name: Dispatch Update
# Triger a workflow in another repo that needs to update the curent repos code
on:
  workflow_call:
    inputs:
      dispatch_repos:
        description: 'JSON array of repositories to update. Eg. "[\"ab_runtime\"]"'
        default: '["ab_runtime"]'
        type: string
      dispatch_type:
        description: Event type for the dispatch
        default: service_new_version
        type: string
      type:
        description: Update type (major, minor, or patch)
        required: true
        type: string
      version:
        description: The version of this update
        required: true
        type: string
      app_id:
        description: GitHub App ID (or clientID) for auth
        required: true
        type: string
    secrets:
      app_secret:
        description: GitHub App client secret for auth
        required: true
jobs:
  dispatch:
    name: Dispatch Update ${{ matrix.repo }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: ${{ fromJSON(inputs.dispatch_repos) }}
    steps:
      - name: Generate an App Token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ inputs.app_id }}
          private-key: ${{ secrets.app_secret }}
          repositories: ${{ matrix.repo }}
      - name: Get name
        id: get-name
        uses: actions/github-script@v7
        with:
          script: |
            const name = context.payload.repository.name;
            const match = name.match(/ab_service_(.+)/);
            return match?.[1] ?? name
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ steps.generate-token.outputs.token }}
          repository: ${{ github.repository_owner }}/${{ matrix.repo }}
          event-type: ${{ inputs.dispatch_type }} 
          client-payload: |-
            {
              "type": "${{ inputs.type }}", 
              "version": "${{ inputs.version }}", 
              "service": ${{ steps.get-name.outputs.result }},
              "repo": ${{ steps.get-name.outputs.result }}
            }

{"version":3,"file":"secrets.js","mappings":"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","sources":["webpack://cruglobal-dot-github/./node_modules/@actions/core/lib/command.js","webpack://cruglobal-dot-github/./node_modules/@actions/core/lib/core.js","webpack://cruglobal-dot-github/./node_modules/@actions/core/lib/file-command.js","webpack://cruglobal-dot-github/./node_modules/@actions/core/lib/oidc-utils.js","webpack://cruglobal-dot-github/./node_modules/@actions/core/lib/path-utils.js","webpack://cruglobal-dot-github/./node_modules/@actions/core/lib/summary.js","webpack://cruglobal-dot-github/./node_modules/@actions/core/lib/utils.js","webpack://cruglobal-dot-github/./node_modules/@actions/http-client/lib/auth.js","webpack://cruglobal-dot-github/./node_modules/@actions/http-client/lib/index.js","webpack://cruglobal-dot-github/./node_modules/@actions/http-client/lib/proxy.js","webpack://cruglobal-dot-github/./node_modules/fast-xml-parser/src/fxp.js","webpack://cruglobal-dot-github/./node_modules/fast-xml-parser/src/util.js","webpack://cruglobal-dot-github/./node_modules/fast-xml-parser/src/validator.js","webpack://cruglobal-dot-github/./node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","webpack://cruglobal-dot-github/./node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","webpack://cruglobal-dot-github/./node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","webpack://cruglobal-dot-github/./node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","webpack://cruglobal-dot-github/./node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","webpack://cruglobal-dot-github/./node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","webpack://cruglobal-dot-github/./node_modules/fast-xml-parser/src/xmlparser/node2json.js","webpack://cruglobal-dot-github/./node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","webpack://cruglobal-dot-github/./node_modules/strnum/strnum.js","webpack://cruglobal-dot-github/./node_modules/tunnel/index.js","webpack://cruglobal-dot-github/./node_modules/tunnel/lib/tunnel.js","webpack://cruglobal-dot-github/./node_modules/uuid/dist/esm-node/v1.js","webpack://cruglobal-dot-github/./node_modules/uuid/dist/esm-node/parse.js","webpack://cruglobal-dot-github/./node_modules/uuid/dist/esm-node/v35.js","webpack://cruglobal-dot-github/./node_modules/uuid/dist/esm-node/md5.js","webpack://cruglobal-dot-github/./node_modules/uuid/dist/esm-node/v3.js","webpack://cruglobal-dot-github/./node_modules/uuid/dist/esm-node/sha1.js","webpack://cruglobal-dot-github/./node_modules/uuid/dist/esm-node/v5.js","webpack://cruglobal-dot-github/./node_modules/uuid/dist/esm-node/nil.js","webpack://cruglobal-dot-github/./node_modules/uuid/dist/esm-node/version.js","webpack://cruglobal-dot-github/./node_modules/uuid/dist/esm-node/rng.js","webpack://cruglobal-dot-github/./node_modules/uuid/dist/esm-node/stringify.js","webpack://cruglobal-dot-github/./node_modules/uuid/dist/esm-node/v4.js","webpack://cruglobal-dot-github/./node_modules/uuid/dist/esm-node/regex.js","webpack://cruglobal-dot-github/./node_modules/uuid/dist/esm-node/validate.js","webpack://cruglobal-dot-github/external node-commonjs \"assert\"","webpack://cruglobal-dot-github/external node-commonjs \"crypto\"","webpack://cruglobal-dot-github/external node-commonjs \"events\"","webpack://cruglobal-dot-github/external node-commonjs \"fs\"","webpack://cruglobal-dot-github/external node-commonjs \"http\"","webpack://cruglobal-dot-github/external node-commonjs \"https\"","webpack://cruglobal-dot-github/external node-commonjs \"net\"","webpack://cruglobal-dot-github/external node-commonjs \"os\"","webpack://cruglobal-dot-github/external node-commonjs \"path\"","webpack://cruglobal-dot-github/external node-commonjs \"tls\"","webpack://cruglobal-dot-github/external node-commonjs \"util\"","webpack://cruglobal-dot-github/webpack/bootstrap","webpack://cruglobal-dot-github/webpack/runtime/compat get default export","webpack://cruglobal-dot-github/webpack/runtime/define property getters","webpack://cruglobal-dot-github/webpack/runtime/hasOwnProperty shorthand","webpack://cruglobal-dot-github/webpack/runtime/make namespace object","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-config-provider/dist-es/booleanSelector.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/config.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/isFipsRegion.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/getRealRegion.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/resolveRegionConfig.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/protocol-http/dist-es/FieldPosition.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/protocol-http/dist-es/httpRequest.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/protocol-http/dist-es/httpResponse.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-content-length/dist-es/index.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-serde/dist-es/serdePlugin.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-serde/dist-es/deserializerMiddleware.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-serde/dist-es/serializerMiddleware.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-endpoint/dist-es/service-customizations/s3.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-endpoint/dist-es/endpointMiddleware.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-endpoint/dist-es/getEndpointPlugin.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-middleware/dist-es/normalizeProvider.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/url-parser/dist-es/index.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/querystring-parser/dist-es/index.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-endpoint/dist-es/resolveEndpointConfig.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/toEndpointV1.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-host-header/dist-es/index.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-retry/dist-es/config.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/service-error-classification/dist-es/constants.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/service-error-classification/dist-es/index.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-retry/dist-es/DefaultRateLimiter.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-retry/dist-es/constants.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-retry/dist-es/defaultRetryToken.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-retry/dist-es/defaultRetryBackoffStrategy.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-retry/dist-es/StandardRetryStrategy.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-retry/dist-es/AdaptiveRetryStrategy.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-retry/dist-es/configurations.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-retry/dist-es/util.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-retry/dist-es/retryMiddleware.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/property-provider/dist-es/ProviderError.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/property-provider/dist-es/CredentialsProviderError.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/property-provider/dist-es/TokenProviderError.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/property-provider/dist-es/chain.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/property-provider/dist-es/fromStatic.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/property-provider/dist-es/memoize.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/is-array-buffer/dist-es/index.js","webpack://cruglobal-dot-github/external node-commonjs \"buffer\"","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-buffer-from/dist-es/index.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-utf8/dist-es/fromUtf8.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-utf8/dist-es/toUint8Array.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-utf8/dist-es/toUtf8.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/signature-v4/dist-es/constants.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/signature-v4/dist-es/credentialDerivation.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalHeaders.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/signature-v4/dist-es/getPayloadHash.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/signature-v4/dist-es/cloneRequest.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/signature-v4/dist-es/prepareRequest.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/signature-v4/dist-es/utilDate.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/signature-v4/dist-es/SignatureV4.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/signature-v4/dist-es/moveHeadersToQuery.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/signature-v4/dist-es/headerUtil.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalQuery.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-signing/dist-es/configurations.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-signing/dist-es/utils/getUpdatedSystemClockOffset.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-signing/dist-es/utils/isClockSkewed.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-signing/dist-es/middleware.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/debug/debugId.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/debug/toDebugString.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isValidHostLabel.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/booleanEquals.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttr.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttrPathList.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isSet.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/not.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/types/dist-es/auth.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/types/dist-es/dns.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/types/dist-es/endpoint.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/types/dist-es/transfer.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/parseURL.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/stringEquals.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/substring.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/uriEncode.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTemplate.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateExpression.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getReferenceValue.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/callFunction.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateCondition.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateConditions.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointHeaders.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperty.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperties.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointUrl.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateEndpointRule.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateErrorRule.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTreeRule.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateRules.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/smithy-client/dist-es/NoOpLogger.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-stack/dist-es/MiddlewareStack.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/smithy-client/dist-es/client.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/smithy-client/dist-es/command.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/smithy-client/dist-es/constants.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/smithy-client/dist-es/parse-utils.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/smithy-client/dist-es/date-utils.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/smithy-client/dist-es/exceptions.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/smithy-client/dist-es/default-error-handler.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/smithy-client/dist-es/defaults-mode.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/smithy-client/dist-es/extended-encode-uri-component.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/smithy-client/dist-es/get-value-from-text-node.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/smithy-client/dist-es/lazy-json.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/smithy-client/dist-es/object-mapping.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/smithy-client/dist-es/serde-json.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sts/dist-es/models/STSServiceException.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sts/dist-es/models/models_0.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sts/dist-es/protocols/Aws_query.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleCommand.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithWebIdentityCommand.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sts/dist-es/defaultStsRoleAssumers.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-env/dist-es/fromEnv.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/shared-ini-file-loader/dist-es/getHomeDir.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/shared-ini-file-loader/dist-es/getProfileName.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/shared-ini-file-loader/dist-es/getSSOTokenFilepath.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/shared-ini-file-loader/dist-es/getSSOTokenFromFile.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/shared-ini-file-loader/dist-es/getConfigFilepath.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/shared-ini-file-loader/dist-es/getCredentialsFilepath.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/shared-ini-file-loader/dist-es/getProfileData.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/shared-ini-file-loader/dist-es/parseIni.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/shared-ini-file-loader/dist-es/slurpFile.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/shared-ini-file-loader/dist-es/loadSharedConfigFiles.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/shared-ini-file-loader/dist-es/getSsoSessionData.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/shared-ini-file-loader/dist-es/loadSsoSessionData.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/shared-ini-file-loader/dist-es/parseKnownFiles.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/shared-ini-file-loader/dist-es/mergeConfigFiles.js","webpack://cruglobal-dot-github/external node-commonjs \"url\"","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-imds/dist-es/remoteProvider/httpRequest.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-imds/dist-es/remoteProvider/retry.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-imds/dist-es/fromContainerMetadata.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/node-config-provider/dist-es/fromStatic.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/node-config-provider/dist-es/configLoader.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/node-config-provider/dist-es/fromEnv.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/node-config-provider/dist-es/fromSharedConfigFiles.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-imds/dist-es/config/Endpoint.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-imds/dist-es/config/EndpointConfigOptions.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-imds/dist-es/config/EndpointMode.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-imds/dist-es/fromInstanceMetadata.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-imds/dist-es/utils/staticStabilityProvider.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js","webpack://cruglobal-dot-github/external node-commonjs \"child_process\"","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/hash-node/dist-es/index.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/node-http-handler/dist-es/constants.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/node-http-handler/dist-es/get-transformed-headers.js","webpack://cruglobal-dot-github/external node-commonjs \"stream\"","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/node-http-handler/dist-es/write-request-body.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/node-http-handler/dist-es/node-http-handler.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/querystring-builder/dist-es/index.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/node-http-handler/dist-es/set-connection-timeout.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/node-http-handler/dist-es/set-socket-timeout.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/node-http-handler/dist-es/set-socket-keep-alive.js","webpack://cruglobal-dot-github/external node-commonjs \"http2\"","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/node-http-handler/dist-es/node-http2-connection-pool.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/node-http-handler/dist-es/stream-collector/collector.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/node-http-handler/dist-es/stream-collector/index.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-body-length-node/dist-es/calculateBodyLength.js","webpack://cruglobal-dot-github/external node-commonjs \"process\"","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-user-agent-node/dist-es/index.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-user-agent-node/dist-es/is-crt-available.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-base64/dist-es/fromBase64.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-base64/dist-es/toBase64.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso/dist-es/endpoint/ruleset.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso/dist-es/endpoint/endpointResolver.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-defaults-mode-node/dist-es/constants.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-defaults-mode-node/dist-es/defaultsModeConfig.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/util-defaults-mode-node/dist-es/resolveDefaultsModeConfig.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso/dist-es/runtimeConfig.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso/dist-es/runtimeConfig.shared.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso/dist-es/SSOClient.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso/dist-es/endpoint/EndpointParameters.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso/dist-es/models/SSOServiceException.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso/dist-es/models/models_0.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso/dist-es/protocols/Aws_restJson1.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso/dist-es/commands/GetRoleCredentialsCommand.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/token-providers/dist-es/constants.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso-oidc/dist-es/models/SSOOIDCServiceException.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso-oidc/dist-es/models/models_0.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso-oidc/dist-es/protocols/Aws_restJson1.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso-oidc/dist-es/commands/CreateTokenCommand.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso-oidc/dist-es/endpoint/EndpointParameters.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso-oidc/dist-es/endpoint/ruleset.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso-oidc/dist-es/endpoint/endpointResolver.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso-oidc/dist-es/runtimeConfig.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso-oidc/dist-es/runtimeConfig.shared.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sso-oidc/dist-es/SSOOIDCClient.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/token-providers/dist-es/fromSso.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromTokenFile.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-node/dist-es/defaultProvider.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/credential-provider-node/dist-es/remoteProvider.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sts/dist-es/endpoint/ruleset.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sts/dist-es/endpoint/endpointResolver.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.shared.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sts/dist-es/STSClient.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sts/dist-es/endpoint/EndpointParameters.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/middleware-sdk-sts/dist-es/index.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-sts/dist-es/defaultRoleAssumers.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-ssm/dist-es/endpoint/ruleset.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-ssm/dist-es/endpoint/endpointResolver.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-ssm/dist-es/runtimeConfig.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-ssm/dist-es/runtimeConfig.shared.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-ssm/dist-es/SSMClient.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-ssm/dist-es/endpoint/EndpointParameters.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-ssm/dist-es/models/SSMServiceException.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-ssm/dist-es/models/models_1.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-ssm/dist-es/models/models_0.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-ssm/dist-es/protocols/Aws_json1_1.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-ssm/dist-es/commands/GetParametersByPathCommand.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-ssm/dist-es/pagination/GetParametersByPathPaginator.js","webpack://cruglobal-dot-github/./node_modules/@aws-sdk/client-ssm/dist-es/commands/ListTagsForResourceCommand.js","webpack://cruglobal-dot-github/./src/aws.js","webpack://cruglobal-dot-github/./src/ecs-config.js","webpack://cruglobal-dot-github/./src/secrets.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issue = exports.issueCommand = void 0;\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst oidc_utils_1 = require(\"./oidc-utils\");\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        return file_command_1.issueFileCommand('ENV', file_command_1.prepareKeyValueMessage(name, val));\n    }\n    command_1.issueCommand('set-env', { name }, convertedVal);\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueFileCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.\n * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.\n * Returns an empty string if the value is not defined.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    if (options && options.trimWhitespace === false) {\n        return val;\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Gets the values of an multiline input.  Each value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string[]\n *\n */\nfunction getMultilineInput(name, options) {\n    const inputs = getInput(name, options)\n        .split('\\n')\n        .filter(x => x !== '');\n    if (options && options.trimWhitespace === false) {\n        return inputs;\n    }\n    return inputs.map(input => input.trim());\n}\nexports.getMultilineInput = getMultilineInput;\n/**\n * Gets the input value of the boolean type in the YAML 1.2 \"core schema\" specification.\n * Support boolean input list: `true | True | TRUE | false | False | FALSE` .\n * The return value is also in boolean type.\n * ref: https://yaml.org/spec/1.2/spec.html#id2804923\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   boolean\n */\nfunction getBooleanInput(name, options) {\n    const trueValue = ['true', 'True', 'TRUE'];\n    const falseValue = ['false', 'False', 'FALSE'];\n    const val = getInput(name, options);\n    if (trueValue.includes(val))\n        return true;\n    if (falseValue.includes(val))\n        return false;\n    throw new TypeError(`Input does not meet YAML 1.2 \"Core Schema\" specification: ${name}\\n` +\n        `Support boolean input list: \\`true | True | TRUE | false | False | FALSE\\``);\n}\nexports.getBooleanInput = getBooleanInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    const filePath = process.env['GITHUB_OUTPUT'] || '';\n    if (filePath) {\n        return file_command_1.issueFileCommand('OUTPUT', file_command_1.prepareKeyValueMessage(name, value));\n    }\n    process.stdout.write(os.EOL);\n    command_1.issueCommand('set-output', { name }, utils_1.toCommandValue(value));\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction error(message, properties = {}) {\n    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds a warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction warning(message, properties = {}) {\n    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Adds a notice issue\n * @param message notice issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction notice(message, properties = {}) {\n    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.notice = notice;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    const filePath = process.env['GITHUB_STATE'] || '';\n    if (filePath) {\n        return file_command_1.issueFileCommand('STATE', file_command_1.prepareKeyValueMessage(name, value));\n    }\n    command_1.issueCommand('save-state', { name }, utils_1.toCommandValue(value));\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\nfunction getIDToken(aud) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield oidc_utils_1.OidcClient.getIDToken(aud);\n    });\n}\nexports.getIDToken = getIDToken;\n/**\n * Summary exports\n */\nvar summary_1 = require(\"./summary\");\nObject.defineProperty(exports, \"summary\", { enumerable: true, get: function () { return summary_1.summary; } });\n/**\n * @deprecated use core.summary\n */\nvar summary_2 = require(\"./summary\");\nObject.defineProperty(exports, \"markdownSummary\", { enumerable: true, get: function () { return summary_2.markdownSummary; } });\n/**\n * Path exports\n */\nvar path_utils_1 = require(\"./path-utils\");\nObject.defineProperty(exports, \"toPosixPath\", { enumerable: true, get: function () { return path_utils_1.toPosixPath; } });\nObject.defineProperty(exports, \"toWin32Path\", { enumerable: true, get: function () { return path_utils_1.toWin32Path; } });\nObject.defineProperty(exports, \"toPlatformPath\", { enumerable: true, get: function () { return path_utils_1.toPlatformPath; } });\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.prepareKeyValueMessage = exports.issueFileCommand = void 0;\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst uuid_1 = require(\"uuid\");\nconst utils_1 = require(\"./utils\");\nfunction issueFileCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueFileCommand = issueFileCommand;\nfunction prepareKeyValueMessage(key, value) {\n    const delimiter = `ghadelimiter_${uuid_1.v4()}`;\n    const convertedValue = utils_1.toCommandValue(value);\n    // These should realistically never happen, but just in case someone finds a\n    // way to exploit uuid generation let's not allow keys or values that contain\n    // the delimiter.\n    if (key.includes(delimiter)) {\n        throw new Error(`Unexpected input: name should not contain the delimiter \"${delimiter}\"`);\n    }\n    if (convertedValue.includes(delimiter)) {\n        throw new Error(`Unexpected input: value should not contain the delimiter \"${delimiter}\"`);\n    }\n    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;\n}\nexports.prepareKeyValueMessage = prepareKeyValueMessage;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OidcClient = void 0;\nconst http_client_1 = require(\"@actions/http-client\");\nconst auth_1 = require(\"@actions/http-client/lib/auth\");\nconst core_1 = require(\"./core\");\nclass OidcClient {\n    static createHttpClient(allowRetry = true, maxRetry = 10) {\n        const requestOptions = {\n            allowRetries: allowRetry,\n            maxRetries: maxRetry\n        };\n        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);\n    }\n    static getRequestToken() {\n        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];\n        if (!token) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');\n        }\n        return token;\n    }\n    static getIDTokenUrl() {\n        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];\n        if (!runtimeUrl) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');\n        }\n        return runtimeUrl;\n    }\n    static getCall(id_token_url) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const httpclient = OidcClient.createHttpClient();\n            const res = yield httpclient\n                .getJson(id_token_url)\n                .catch(error => {\n                throw new Error(`Failed to get ID Token. \\n \n        Error Code : ${error.statusCode}\\n \n        Error Message: ${error.result.message}`);\n            });\n            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;\n            if (!id_token) {\n                throw new Error('Response json body do not have ID Token field');\n            }\n            return id_token;\n        });\n    }\n    static getIDToken(audience) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // New ID Token is requested from action service\n                let id_token_url = OidcClient.getIDTokenUrl();\n                if (audience) {\n                    const encodedAudience = encodeURIComponent(audience);\n                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;\n                }\n                core_1.debug(`ID token url is ${id_token_url}`);\n                const id_token = yield OidcClient.getCall(id_token_url);\n                core_1.setSecret(id_token);\n                return id_token;\n            }\n            catch (error) {\n                throw new Error(`Error message: ${error.message}`);\n            }\n        });\n    }\n}\nexports.OidcClient = OidcClient;\n//# sourceMappingURL=oidc-utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;\nconst path = __importStar(require(\"path\"));\n/**\n * toPosixPath converts the given path to the posix form. On Windows, \\\\ will be\n * replaced with /.\n *\n * @param pth. Path to transform.\n * @return string Posix path.\n */\nfunction toPosixPath(pth) {\n    return pth.replace(/[\\\\]/g, '/');\n}\nexports.toPosixPath = toPosixPath;\n/**\n * toWin32Path converts the given path to the win32 form. On Linux, / will be\n * replaced with \\\\.\n *\n * @param pth. Path to transform.\n * @return string Win32 path.\n */\nfunction toWin32Path(pth) {\n    return pth.replace(/[/]/g, '\\\\');\n}\nexports.toWin32Path = toWin32Path;\n/**\n * toPlatformPath converts the given path to a platform-specific path. It does\n * this by replacing instances of / and \\ with the platform-specific path\n * separator.\n *\n * @param pth The path to platformize.\n * @return string The platform-specific path.\n */\nfunction toPlatformPath(pth) {\n    return pth.replace(/[/\\\\]/g, path.sep);\n}\nexports.toPlatformPath = toPlatformPath;\n//# sourceMappingURL=path-utils.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;\nconst os_1 = require(\"os\");\nconst fs_1 = require(\"fs\");\nconst { access, appendFile, writeFile } = fs_1.promises;\nexports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';\nexports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';\nclass Summary {\n    constructor() {\n        this._buffer = '';\n    }\n    /**\n     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist\n     * Also checks r/w permissions.\n     *\n     * @returns step summary file path\n     */\n    filePath() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._filePath) {\n                return this._filePath;\n            }\n            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];\n            if (!pathFromEnv) {\n                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);\n            }\n            try {\n                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);\n            }\n            catch (_a) {\n                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);\n            }\n            this._filePath = pathFromEnv;\n            return this._filePath;\n        });\n    }\n    /**\n     * Wraps content in an HTML tag, adding any HTML attributes\n     *\n     * @param {string} tag HTML tag to wrap\n     * @param {string | null} content content within the tag\n     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add\n     *\n     * @returns {string} content wrapped in HTML element\n     */\n    wrap(tag, content, attrs = {}) {\n        const htmlAttrs = Object.entries(attrs)\n            .map(([key, value]) => ` ${key}=\"${value}\"`)\n            .join('');\n        if (!content) {\n            return `<${tag}${htmlAttrs}>`;\n        }\n        return `<${tag}${htmlAttrs}>${content}</${tag}>`;\n    }\n    /**\n     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.\n     *\n     * @param {SummaryWriteOptions} [options] (optional) options for write operation\n     *\n     * @returns {Promise<Summary>} summary instance\n     */\n    write(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);\n            const filePath = yield this.filePath();\n            const writeFunc = overwrite ? writeFile : appendFile;\n            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });\n            return this.emptyBuffer();\n        });\n    }\n    /**\n     * Clears the summary buffer and wipes the summary file\n     *\n     * @returns {Summary} summary instance\n     */\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.emptyBuffer().write({ overwrite: true });\n        });\n    }\n    /**\n     * Returns the current summary buffer as a string\n     *\n     * @returns {string} string of summary buffer\n     */\n    stringify() {\n        return this._buffer;\n    }\n    /**\n     * If the summary buffer is empty\n     *\n     * @returns {boolen} true if the buffer is empty\n     */\n    isEmptyBuffer() {\n        return this._buffer.length === 0;\n    }\n    /**\n     * Resets the summary buffer without writing to summary file\n     *\n     * @returns {Summary} summary instance\n     */\n    emptyBuffer() {\n        this._buffer = '';\n        return this;\n    }\n    /**\n     * Adds raw text to the summary buffer\n     *\n     * @param {string} text content to add\n     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)\n     *\n     * @returns {Summary} summary instance\n     */\n    addRaw(text, addEOL = false) {\n        this._buffer += text;\n        return addEOL ? this.addEOL() : this;\n    }\n    /**\n     * Adds the operating system-specific end-of-line marker to the buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addEOL() {\n        return this.addRaw(os_1.EOL);\n    }\n    /**\n     * Adds an HTML codeblock to the summary buffer\n     *\n     * @param {string} code content to render within fenced code block\n     * @param {string} lang (optional) language to syntax highlight code\n     *\n     * @returns {Summary} summary instance\n     */\n    addCodeBlock(code, lang) {\n        const attrs = Object.assign({}, (lang && { lang }));\n        const element = this.wrap('pre', this.wrap('code', code), attrs);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML list to the summary buffer\n     *\n     * @param {string[]} items list of items to render\n     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)\n     *\n     * @returns {Summary} summary instance\n     */\n    addList(items, ordered = false) {\n        const tag = ordered ? 'ol' : 'ul';\n        const listItems = items.map(item => this.wrap('li', item)).join('');\n        const element = this.wrap(tag, listItems);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML table to the summary buffer\n     *\n     * @param {SummaryTableCell[]} rows table rows\n     *\n     * @returns {Summary} summary instance\n     */\n    addTable(rows) {\n        const tableBody = rows\n            .map(row => {\n            const cells = row\n                .map(cell => {\n                if (typeof cell === 'string') {\n                    return this.wrap('td', cell);\n                }\n                const { header, data, colspan, rowspan } = cell;\n                const tag = header ? 'th' : 'td';\n                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));\n                return this.wrap(tag, data, attrs);\n            })\n                .join('');\n            return this.wrap('tr', cells);\n        })\n            .join('');\n        const element = this.wrap('table', tableBody);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds a collapsable HTML details element to the summary buffer\n     *\n     * @param {string} label text for the closed state\n     * @param {string} content collapsable content\n     *\n     * @returns {Summary} summary instance\n     */\n    addDetails(label, content) {\n        const element = this.wrap('details', this.wrap('summary', label) + content);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML image tag to the summary buffer\n     *\n     * @param {string} src path to the image you to embed\n     * @param {string} alt text description of the image\n     * @param {SummaryImageOptions} options (optional) addition image attributes\n     *\n     * @returns {Summary} summary instance\n     */\n    addImage(src, alt, options) {\n        const { width, height } = options || {};\n        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));\n        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML section heading element\n     *\n     * @param {string} text heading text\n     * @param {number | string} [level=1] (optional) the heading level, default: 1\n     *\n     * @returns {Summary} summary instance\n     */\n    addHeading(text, level) {\n        const tag = `h${level}`;\n        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)\n            ? tag\n            : 'h1';\n        const element = this.wrap(allowedTag, text);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML thematic break (<hr>) to the summary buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addSeparator() {\n        const element = this.wrap('hr', null);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML line break (<br>) to the summary buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addBreak() {\n        const element = this.wrap('br', null);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML blockquote to the summary buffer\n     *\n     * @param {string} text quote text\n     * @param {string} cite (optional) citation url\n     *\n     * @returns {Summary} summary instance\n     */\n    addQuote(text, cite) {\n        const attrs = Object.assign({}, (cite && { cite }));\n        const element = this.wrap('blockquote', text, attrs);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML anchor tag to the summary buffer\n     *\n     * @param {string} text link text/content\n     * @param {string} href hyperlink\n     *\n     * @returns {Summary} summary instance\n     */\n    addLink(text, href) {\n        const element = this.wrap('a', text, { href });\n        return this.addRaw(element).addEOL();\n    }\n}\nconst _summary = new Summary();\n/**\n * @deprecated use `core.summary`\n */\nexports.markdownSummary = _summary;\nexports.summary = _summary;\n//# sourceMappingURL=summary.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCommandProperties = exports.toCommandValue = void 0;\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n/**\n *\n * @param annotationProperties\n * @returns The command properties to send with the actual annotation command\n * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646\n */\nfunction toCommandProperties(annotationProperties) {\n    if (!Object.keys(annotationProperties).length) {\n        return {};\n    }\n    return {\n        title: annotationProperties.title,\n        file: annotationProperties.file,\n        line: annotationProperties.startLine,\n        endLine: annotationProperties.endLine,\n        col: annotationProperties.startColumn,\n        endColumn: annotationProperties.endColumn\n    };\n}\nexports.toCommandProperties = toCommandProperties;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;\nclass BasicCredentialHandler {\n    constructor(username, password) {\n        this.username = username;\n        this.password = password;\n    }\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.BasicCredentialHandler = BasicCredentialHandler;\nclass BearerCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.BearerCredentialHandler = BearerCredentialHandler;\nclass PersonalAccessTokenCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;\n//# sourceMappingURL=auth.js.map","\"use strict\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;\nconst http = __importStar(require(\"http\"));\nconst https = __importStar(require(\"https\"));\nconst pm = __importStar(require(\"./proxy\"));\nconst tunnel = __importStar(require(\"tunnel\"));\nvar HttpCodes;\n(function (HttpCodes) {\n    HttpCodes[HttpCodes[\"OK\"] = 200] = \"OK\";\n    HttpCodes[HttpCodes[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n    HttpCodes[HttpCodes[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n    HttpCodes[HttpCodes[\"ResourceMoved\"] = 302] = \"ResourceMoved\";\n    HttpCodes[HttpCodes[\"SeeOther\"] = 303] = \"SeeOther\";\n    HttpCodes[HttpCodes[\"NotModified\"] = 304] = \"NotModified\";\n    HttpCodes[HttpCodes[\"UseProxy\"] = 305] = \"UseProxy\";\n    HttpCodes[HttpCodes[\"SwitchProxy\"] = 306] = \"SwitchProxy\";\n    HttpCodes[HttpCodes[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n    HttpCodes[HttpCodes[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n    HttpCodes[HttpCodes[\"BadRequest\"] = 400] = \"BadRequest\";\n    HttpCodes[HttpCodes[\"Unauthorized\"] = 401] = \"Unauthorized\";\n    HttpCodes[HttpCodes[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n    HttpCodes[HttpCodes[\"Forbidden\"] = 403] = \"Forbidden\";\n    HttpCodes[HttpCodes[\"NotFound\"] = 404] = \"NotFound\";\n    HttpCodes[HttpCodes[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n    HttpCodes[HttpCodes[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n    HttpCodes[HttpCodes[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n    HttpCodes[HttpCodes[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n    HttpCodes[HttpCodes[\"Conflict\"] = 409] = \"Conflict\";\n    HttpCodes[HttpCodes[\"Gone\"] = 410] = \"Gone\";\n    HttpCodes[HttpCodes[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n    HttpCodes[HttpCodes[\"InternalServerError\"] = 500] = \"InternalServerError\";\n    HttpCodes[HttpCodes[\"NotImplemented\"] = 501] = \"NotImplemented\";\n    HttpCodes[HttpCodes[\"BadGateway\"] = 502] = \"BadGateway\";\n    HttpCodes[HttpCodes[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n    HttpCodes[HttpCodes[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));\nvar Headers;\n(function (Headers) {\n    Headers[\"Accept\"] = \"accept\";\n    Headers[\"ContentType\"] = \"content-type\";\n})(Headers = exports.Headers || (exports.Headers = {}));\nvar MediaTypes;\n(function (MediaTypes) {\n    MediaTypes[\"ApplicationJson\"] = \"application/json\";\n})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));\n/**\n * Returns the proxy URL, depending upon the supplied url and proxy environment variables.\n * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n */\nfunction getProxyUrl(serverUrl) {\n    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));\n    return proxyUrl ? proxyUrl.href : '';\n}\nexports.getProxyUrl = getProxyUrl;\nconst HttpRedirectCodes = [\n    HttpCodes.MovedPermanently,\n    HttpCodes.ResourceMoved,\n    HttpCodes.SeeOther,\n    HttpCodes.TemporaryRedirect,\n    HttpCodes.PermanentRedirect\n];\nconst HttpResponseRetryCodes = [\n    HttpCodes.BadGateway,\n    HttpCodes.ServiceUnavailable,\n    HttpCodes.GatewayTimeout\n];\nconst RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];\nconst ExponentialBackoffCeiling = 10;\nconst ExponentialBackoffTimeSlice = 5;\nclass HttpClientError extends Error {\n    constructor(message, statusCode) {\n        super(message);\n        this.name = 'HttpClientError';\n        this.statusCode = statusCode;\n        Object.setPrototypeOf(this, HttpClientError.prototype);\n    }\n}\nexports.HttpClientError = HttpClientError;\nclass HttpClientResponse {\n    constructor(message) {\n        this.message = message;\n    }\n    readBody() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n                let output = Buffer.alloc(0);\n                this.message.on('data', (chunk) => {\n                    output = Buffer.concat([output, chunk]);\n                });\n                this.message.on('end', () => {\n                    resolve(output.toString());\n                });\n            }));\n        });\n    }\n}\nexports.HttpClientResponse = HttpClientResponse;\nfunction isHttps(requestUrl) {\n    const parsedUrl = new URL(requestUrl);\n    return parsedUrl.protocol === 'https:';\n}\nexports.isHttps = isHttps;\nclass HttpClient {\n    constructor(userAgent, handlers, requestOptions) {\n        this._ignoreSslError = false;\n        this._allowRedirects = true;\n        this._allowRedirectDowngrade = false;\n        this._maxRedirects = 50;\n        this._allowRetries = false;\n        this._maxRetries = 1;\n        this._keepAlive = false;\n        this._disposed = false;\n        this.userAgent = userAgent;\n        this.handlers = handlers || [];\n        this.requestOptions = requestOptions;\n        if (requestOptions) {\n            if (requestOptions.ignoreSslError != null) {\n                this._ignoreSslError = requestOptions.ignoreSslError;\n            }\n            this._socketTimeout = requestOptions.socketTimeout;\n            if (requestOptions.allowRedirects != null) {\n                this._allowRedirects = requestOptions.allowRedirects;\n            }\n            if (requestOptions.allowRedirectDowngrade != null) {\n                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;\n            }\n            if (requestOptions.maxRedirects != null) {\n                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);\n            }\n            if (requestOptions.keepAlive != null) {\n                this._keepAlive = requestOptions.keepAlive;\n            }\n            if (requestOptions.allowRetries != null) {\n                this._allowRetries = requestOptions.allowRetries;\n            }\n            if (requestOptions.maxRetries != null) {\n                this._maxRetries = requestOptions.maxRetries;\n            }\n        }\n    }\n    options(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    get(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('GET', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    del(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('DELETE', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    post(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('POST', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    patch(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('PATCH', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    put(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('PUT', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    head(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('HEAD', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    sendStream(verb, requestUrl, stream, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request(verb, requestUrl, stream, additionalHeaders);\n        });\n    }\n    /**\n     * Gets a typed object from an endpoint\n     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise\n     */\n    getJson(requestUrl, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            const res = yield this.get(requestUrl, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    postJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.post(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    putJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.put(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    patchJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.patch(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    /**\n     * Makes a raw http request.\n     * All other methods such as get, post, patch, and request ultimately call this.\n     * Prefer get, del, post and patch\n     */\n    request(verb, requestUrl, data, headers) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._disposed) {\n                throw new Error('Client has already been disposed.');\n            }\n            const parsedUrl = new URL(requestUrl);\n            let info = this._prepareRequest(verb, parsedUrl, headers);\n            // Only perform retries on reads since writes may not be idempotent.\n            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)\n                ? this._maxRetries + 1\n                : 1;\n            let numTries = 0;\n            let response;\n            do {\n                response = yield this.requestRaw(info, data);\n                // Check if it's an authentication challenge\n                if (response &&\n                    response.message &&\n                    response.message.statusCode === HttpCodes.Unauthorized) {\n                    let authenticationHandler;\n                    for (const handler of this.handlers) {\n                        if (handler.canHandleAuthentication(response)) {\n                            authenticationHandler = handler;\n                            break;\n                        }\n                    }\n                    if (authenticationHandler) {\n                        return authenticationHandler.handleAuthentication(this, info, data);\n                    }\n                    else {\n                        // We have received an unauthorized response but have no handlers to handle it.\n                        // Let the response return to the caller.\n                        return response;\n                    }\n                }\n                let redirectsRemaining = this._maxRedirects;\n                while (response.message.statusCode &&\n                    HttpRedirectCodes.includes(response.message.statusCode) &&\n                    this._allowRedirects &&\n                    redirectsRemaining > 0) {\n                    const redirectUrl = response.message.headers['location'];\n                    if (!redirectUrl) {\n                        // if there's no location to redirect to, we won't\n                        break;\n                    }\n                    const parsedRedirectUrl = new URL(redirectUrl);\n                    if (parsedUrl.protocol === 'https:' &&\n                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&\n                        !this._allowRedirectDowngrade) {\n                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');\n                    }\n                    // we need to finish reading the response before reassigning response\n                    // which will leak the open socket.\n                    yield response.readBody();\n                    // strip authorization header if redirected to a different hostname\n                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {\n                        for (const header in headers) {\n                            // header names are case insensitive\n                            if (header.toLowerCase() === 'authorization') {\n                                delete headers[header];\n                            }\n                        }\n                    }\n                    // let's make the request with the new redirectUrl\n                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);\n                    response = yield this.requestRaw(info, data);\n                    redirectsRemaining--;\n                }\n                if (!response.message.statusCode ||\n                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {\n                    // If not a retry code, return immediately instead of retrying\n                    return response;\n                }\n                numTries += 1;\n                if (numTries < maxTries) {\n                    yield response.readBody();\n                    yield this._performExponentialBackoff(numTries);\n                }\n            } while (numTries < maxTries);\n            return response;\n        });\n    }\n    /**\n     * Needs to be called if keepAlive is set to true in request options.\n     */\n    dispose() {\n        if (this._agent) {\n            this._agent.destroy();\n        }\n        this._disposed = true;\n    }\n    /**\n     * Raw request.\n     * @param info\n     * @param data\n     */\n    requestRaw(info, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                function callbackForResult(err, res) {\n                    if (err) {\n                        reject(err);\n                    }\n                    else if (!res) {\n                        // If `err` is not passed, then `res` must be passed.\n                        reject(new Error('Unknown error'));\n                    }\n                    else {\n                        resolve(res);\n                    }\n                }\n                this.requestRawWithCallback(info, data, callbackForResult);\n            });\n        });\n    }\n    /**\n     * Raw request with callback.\n     * @param info\n     * @param data\n     * @param onResult\n     */\n    requestRawWithCallback(info, data, onResult) {\n        if (typeof data === 'string') {\n            if (!info.options.headers) {\n                info.options.headers = {};\n            }\n            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n        }\n        let callbackCalled = false;\n        function handleResult(err, res) {\n            if (!callbackCalled) {\n                callbackCalled = true;\n                onResult(err, res);\n            }\n        }\n        const req = info.httpModule.request(info.options, (msg) => {\n            const res = new HttpClientResponse(msg);\n            handleResult(undefined, res);\n        });\n        let socket;\n        req.on('socket', sock => {\n            socket = sock;\n        });\n        // If we ever get disconnected, we want the socket to timeout eventually\n        req.setTimeout(this._socketTimeout || 3 * 60000, () => {\n            if (socket) {\n                socket.end();\n            }\n            handleResult(new Error(`Request timeout: ${info.options.path}`));\n        });\n        req.on('error', function (err) {\n            // err has statusCode property\n            // res should have headers\n            handleResult(err);\n        });\n        if (data && typeof data === 'string') {\n            req.write(data, 'utf8');\n        }\n        if (data && typeof data !== 'string') {\n            data.on('close', function () {\n                req.end();\n            });\n            data.pipe(req);\n        }\n        else {\n            req.end();\n        }\n    }\n    /**\n     * Gets an http agent. This function is useful when you need an http agent that handles\n     * routing through a proxy server - depending upon the url and proxy environment variables.\n     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n     */\n    getAgent(serverUrl) {\n        const parsedUrl = new URL(serverUrl);\n        return this._getAgent(parsedUrl);\n    }\n    _prepareRequest(method, requestUrl, headers) {\n        const info = {};\n        info.parsedUrl = requestUrl;\n        const usingSsl = info.parsedUrl.protocol === 'https:';\n        info.httpModule = usingSsl ? https : http;\n        const defaultPort = usingSsl ? 443 : 80;\n        info.options = {};\n        info.options.host = info.parsedUrl.hostname;\n        info.options.port = info.parsedUrl.port\n            ? parseInt(info.parsedUrl.port)\n            : defaultPort;\n        info.options.path =\n            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');\n        info.options.method = method;\n        info.options.headers = this._mergeHeaders(headers);\n        if (this.userAgent != null) {\n            info.options.headers['user-agent'] = this.userAgent;\n        }\n        info.options.agent = this._getAgent(info.parsedUrl);\n        // gives handlers an opportunity to participate\n        if (this.handlers) {\n            for (const handler of this.handlers) {\n                handler.prepareRequest(info.options);\n            }\n        }\n        return info;\n    }\n    _mergeHeaders(headers) {\n        if (this.requestOptions && this.requestOptions.headers) {\n            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));\n        }\n        return lowercaseKeys(headers || {});\n    }\n    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {\n        let clientHeader;\n        if (this.requestOptions && this.requestOptions.headers) {\n            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];\n        }\n        return additionalHeaders[header] || clientHeader || _default;\n    }\n    _getAgent(parsedUrl) {\n        let agent;\n        const proxyUrl = pm.getProxyUrl(parsedUrl);\n        const useProxy = proxyUrl && proxyUrl.hostname;\n        if (this._keepAlive && useProxy) {\n            agent = this._proxyAgent;\n        }\n        if (this._keepAlive && !useProxy) {\n            agent = this._agent;\n        }\n        // if agent is already assigned use that agent.\n        if (agent) {\n            return agent;\n        }\n        const usingSsl = parsedUrl.protocol === 'https:';\n        let maxSockets = 100;\n        if (this.requestOptions) {\n            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;\n        }\n        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.\n        if (proxyUrl && proxyUrl.hostname) {\n            const agentOptions = {\n                maxSockets,\n                keepAlive: this._keepAlive,\n                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {\n                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`\n                })), { host: proxyUrl.hostname, port: proxyUrl.port })\n            };\n            let tunnelAgent;\n            const overHttps = proxyUrl.protocol === 'https:';\n            if (usingSsl) {\n                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;\n            }\n            else {\n                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;\n            }\n            agent = tunnelAgent(agentOptions);\n            this._proxyAgent = agent;\n        }\n        // if reusing agent across request and tunneling agent isn't assigned create a new agent\n        if (this._keepAlive && !agent) {\n            const options = { keepAlive: this._keepAlive, maxSockets };\n            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);\n            this._agent = agent;\n        }\n        // if not using private agent and tunnel agent isn't setup then use global agent\n        if (!agent) {\n            agent = usingSsl ? https.globalAgent : http.globalAgent;\n        }\n        if (usingSsl && this._ignoreSslError) {\n            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process\n            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options\n            // we have to cast it to any and change it directly\n            agent.options = Object.assign(agent.options || {}, {\n                rejectUnauthorized: false\n            });\n        }\n        return agent;\n    }\n    _performExponentialBackoff(retryNumber) {\n        return __awaiter(this, void 0, void 0, function* () {\n            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);\n            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);\n            return new Promise(resolve => setTimeout(() => resolve(), ms));\n        });\n    }\n    _processResponse(res, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                const statusCode = res.message.statusCode || 0;\n                const response = {\n                    statusCode,\n                    result: null,\n                    headers: {}\n                };\n                // not found leads to null obj returned\n                if (statusCode === HttpCodes.NotFound) {\n                    resolve(response);\n                }\n                // get the result from the body\n                function dateTimeDeserializer(key, value) {\n                    if (typeof value === 'string') {\n                        const a = new Date(value);\n                        if (!isNaN(a.valueOf())) {\n                            return a;\n                        }\n                    }\n                    return value;\n                }\n                let obj;\n                let contents;\n                try {\n                    contents = yield res.readBody();\n                    if (contents && contents.length > 0) {\n                        if (options && options.deserializeDates) {\n                            obj = JSON.parse(contents, dateTimeDeserializer);\n                        }\n                        else {\n                            obj = JSON.parse(contents);\n                        }\n                        response.result = obj;\n                    }\n                    response.headers = res.message.headers;\n                }\n                catch (err) {\n                    // Invalid resource (contents not json);  leaving result obj null\n                }\n                // note that 3xx redirects are handled by the http layer.\n                if (statusCode > 299) {\n                    let msg;\n                    // if exception/error in body, attempt to get better error\n                    if (obj && obj.message) {\n                        msg = obj.message;\n                    }\n                    else if (contents && contents.length > 0) {\n                        // it may be the case that the exception is in the body message as string\n                        msg = contents;\n                    }\n                    else {\n                        msg = `Failed request: (${statusCode})`;\n                    }\n                    const err = new HttpClientError(msg, statusCode);\n                    err.result = response.result;\n                    reject(err);\n                }\n                else {\n                    resolve(response);\n                }\n            }));\n        });\n    }\n}\nexports.HttpClient = HttpClient;\nconst lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkBypass = exports.getProxyUrl = void 0;\nfunction getProxyUrl(reqUrl) {\n    const usingSsl = reqUrl.protocol === 'https:';\n    if (checkBypass(reqUrl)) {\n        return undefined;\n    }\n    const proxyVar = (() => {\n        if (usingSsl) {\n            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];\n        }\n        else {\n            return process.env['http_proxy'] || process.env['HTTP_PROXY'];\n        }\n    })();\n    if (proxyVar) {\n        return new URL(proxyVar);\n    }\n    else {\n        return undefined;\n    }\n}\nexports.getProxyUrl = getProxyUrl;\nfunction checkBypass(reqUrl) {\n    if (!reqUrl.hostname) {\n        return false;\n    }\n    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';\n    if (!noProxy) {\n        return false;\n    }\n    // Determine the request port\n    let reqPort;\n    if (reqUrl.port) {\n        reqPort = Number(reqUrl.port);\n    }\n    else if (reqUrl.protocol === 'http:') {\n        reqPort = 80;\n    }\n    else if (reqUrl.protocol === 'https:') {\n        reqPort = 443;\n    }\n    // Format the request hostname and hostname with port\n    const upperReqHosts = [reqUrl.hostname.toUpperCase()];\n    if (typeof reqPort === 'number') {\n        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);\n    }\n    // Compare request host against noproxy\n    for (const upperNoProxyItem of noProxy\n        .split(',')\n        .map(x => x.trim().toUpperCase())\n        .filter(x => x)) {\n        if (upperReqHosts.some(x => x === upperNoProxyItem)) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.checkBypass = checkBypass;\n//# sourceMappingURL=proxy.js.map","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          val += this.processTextOrObjNode(item, key, level)\n        } else {\n          val += this.buildTextValNode(item, key, '', level);\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    if (attrStr && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, entity = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) {\n                if( hasBody && \n                     xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'N' &&\n                     xmlData[i+4] === 'T' &&\n                     xmlData[i+5] === 'I' &&\n                     xmlData[i+6] === 'T' &&\n                     xmlData[i+7] === 'Y'\n                ){\n                    i += 7;\n                    entity = true;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'L' &&\n                     xmlData[i+4] === 'E' &&\n                     xmlData[i+5] === 'M' &&\n                     xmlData[i+6] === 'E' &&\n                     xmlData[i+7] === 'N' &&\n                     xmlData[i+8] === 'T'\n                ){\n                    //Not supported\n                    i += 8;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === 'A' &&\n                    xmlData[i+3] === 'T' &&\n                    xmlData[i+4] === 'T' &&\n                    xmlData[i+5] === 'L' &&\n                    xmlData[i+6] === 'I' &&\n                    xmlData[i+7] === 'S' &&\n                    xmlData[i+8] === 'T'\n                ){\n                    //Not supported\n                    i += 8;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === 'N' &&\n                    xmlData[i+3] === 'O' &&\n                    xmlData[i+4] === 'T' &&\n                    xmlData[i+5] === 'A' &&\n                    xmlData[i+6] === 'T' &&\n                    xmlData[i+7] === 'I' &&\n                    xmlData[i+8] === 'O' &&\n                    xmlData[i+9] === 'N'\n                ){\n                    //Not supported\n                    i += 9;\n                }else if( //comment\n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === '-' &&\n                    xmlData[i+3] === '-'\n                ){\n                    comment = true;\n                }else{\n                    throw new Error(\"Invalid DOCTYPE\");\n                }\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') {\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    if(entity) {\n                        parseEntityExp(exp, entities);\n                        entity = false;\n                    }\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nconst entityRegex = RegExp(\"^\\\\s([a-zA-z0-0]+)[ \\t](['\\\"])([^&]+)\\\\2\");\nfunction parseEntityExp(exp, entities){\n    const match = entityRegex.exec(exp);\n    if(match){\n        entities[ match[1] ] = {\n            regx : RegExp( `&${match[1]};`,\"g\"),\n            val: match[3]\n        };\n    }\n}\nmodule.exports = readDocType;","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n        \n        currentNode = this.tagsNodeStack.pop();//avoid recurssion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath);\n          }\n          currentNode.addChild(childNode);\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if(val == undefined) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n        }\n\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) { //TODO: namespace\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //boolean tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${tagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          currentNode.addChild(childNode);\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n            currentNode.addChild(childNode);\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            currentNode.addChild(childNode);\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-dobule quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const propCount = Object.keys(obj).length;\n  if( propCount === 0 || (propCount === 1 && obj[options.textNodeName]) ) return true;\n  return false;\n}\nexports.prettify = prettify;\n","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","module.exports = require('./lib/tunnel');\n","'use strict';\n\nvar net = require('net');\nvar tls = require('tls');\nvar http = require('http');\nvar https = require('https');\nvar events = require('events');\nvar assert = require('assert');\nvar util = require('util');\n\n\nexports.httpOverHttp = httpOverHttp;\nexports.httpsOverHttp = httpsOverHttp;\nexports.httpOverHttps = httpOverHttps;\nexports.httpsOverHttps = httpsOverHttps;\n\n\nfunction httpOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  return agent;\n}\n\nfunction httpsOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\nfunction httpOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  return agent;\n}\n\nfunction httpsOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\n\nfunction TunnelingAgent(options) {\n  var self = this;\n  self.options = options || {};\n  self.proxyOptions = self.options.proxy || {};\n  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;\n  self.requests = [];\n  self.sockets = [];\n\n  self.on('free', function onFree(socket, host, port, localAddress) {\n    var options = toOptions(host, port, localAddress);\n    for (var i = 0, len = self.requests.length; i < len; ++i) {\n      var pending = self.requests[i];\n      if (pending.host === options.host && pending.port === options.port) {\n        // Detect the request to connect same origin server,\n        // reuse the connection.\n        self.requests.splice(i, 1);\n        pending.request.onSocket(socket);\n        return;\n      }\n    }\n    socket.destroy();\n    self.removeSocket(socket);\n  });\n}\nutil.inherits(TunnelingAgent, events.EventEmitter);\n\nTunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {\n  var self = this;\n  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));\n\n  if (self.sockets.length >= this.maxSockets) {\n    // We are over limit so we'll add it to the queue.\n    self.requests.push(options);\n    return;\n  }\n\n  // If we are under maxSockets create a new one.\n  self.createSocket(options, function(socket) {\n    socket.on('free', onFree);\n    socket.on('close', onCloseOrRemove);\n    socket.on('agentRemove', onCloseOrRemove);\n    req.onSocket(socket);\n\n    function onFree() {\n      self.emit('free', socket, options);\n    }\n\n    function onCloseOrRemove(err) {\n      self.removeSocket(socket);\n      socket.removeListener('free', onFree);\n      socket.removeListener('close', onCloseOrRemove);\n      socket.removeListener('agentRemove', onCloseOrRemove);\n    }\n  });\n};\n\nTunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n  var self = this;\n  var placeholder = {};\n  self.sockets.push(placeholder);\n\n  var connectOptions = mergeOptions({}, self.proxyOptions, {\n    method: 'CONNECT',\n    path: options.host + ':' + options.port,\n    agent: false,\n    headers: {\n      host: options.host + ':' + options.port\n    }\n  });\n  if (options.localAddress) {\n    connectOptions.localAddress = options.localAddress;\n  }\n  if (connectOptions.proxyAuth) {\n    connectOptions.headers = connectOptions.headers || {};\n    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n        new Buffer(connectOptions.proxyAuth).toString('base64');\n  }\n\n  debug('making CONNECT request');\n  var connectReq = self.request(connectOptions);\n  connectReq.useChunkedEncodingByDefault = false; // for v0.6\n  connectReq.once('response', onResponse); // for v0.6\n  connectReq.once('upgrade', onUpgrade);   // for v0.6\n  connectReq.once('connect', onConnect);   // for v0.7 or later\n  connectReq.once('error', onError);\n  connectReq.end();\n\n  function onResponse(res) {\n    // Very hacky. This is necessary to avoid http-parser leaks.\n    res.upgrade = true;\n  }\n\n  function onUpgrade(res, socket, head) {\n    // Hacky.\n    process.nextTick(function() {\n      onConnect(res, socket, head);\n    });\n  }\n\n  function onConnect(res, socket, head) {\n    connectReq.removeAllListeners();\n    socket.removeAllListeners();\n\n    if (res.statusCode !== 200) {\n      debug('tunneling socket could not be established, statusCode=%d',\n        res.statusCode);\n      socket.destroy();\n      var error = new Error('tunneling socket could not be established, ' +\n        'statusCode=' + res.statusCode);\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    if (head.length > 0) {\n      debug('got illegal response body from proxy');\n      socket.destroy();\n      var error = new Error('got illegal response body from proxy');\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    debug('tunneling connection has established');\n    self.sockets[self.sockets.indexOf(placeholder)] = socket;\n    return cb(socket);\n  }\n\n  function onError(cause) {\n    connectReq.removeAllListeners();\n\n    debug('tunneling socket could not be established, cause=%s\\n',\n          cause.message, cause.stack);\n    var error = new Error('tunneling socket could not be established, ' +\n                          'cause=' + cause.message);\n    error.code = 'ECONNRESET';\n    options.request.emit('error', error);\n    self.removeSocket(placeholder);\n  }\n};\n\nTunnelingAgent.prototype.removeSocket = function removeSocket(socket) {\n  var pos = this.sockets.indexOf(socket)\n  if (pos === -1) {\n    return;\n  }\n  this.sockets.splice(pos, 1);\n\n  var pending = this.requests.shift();\n  if (pending) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(pending, function(socket) {\n      pending.request.onSocket(socket);\n    });\n  }\n};\n\nfunction createSecureSocket(options, cb) {\n  var self = this;\n  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {\n    var hostHeader = options.request.getHeader('host');\n    var tlsOptions = mergeOptions({}, self.options, {\n      socket: socket,\n      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host\n    });\n\n    // 0 is dummy port for v0.6\n    var secureSocket = tls.connect(0, tlsOptions);\n    self.sockets[self.sockets.indexOf(socket)] = secureSocket;\n    cb(secureSocket);\n  });\n}\n\n\nfunction toOptions(host, port, localAddress) {\n  if (typeof host === 'string') { // since v0.10\n    return {\n      host: host,\n      port: port,\n      localAddress: localAddress\n    };\n  }\n  return host; // for v0.11 or later\n}\n\nfunction mergeOptions(target) {\n  for (var i = 1, len = arguments.length; i < len; ++i) {\n    var overrides = arguments[i];\n    if (typeof overrides === 'object') {\n      var keys = Object.keys(overrides);\n      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {\n        var k = keys[j];\n        if (overrides[k] !== undefined) {\n          target[k] = overrides[k];\n        }\n      }\n    }\n  }\n  return target;\n}\n\n\nvar debug;\nif (process.env.NODE_DEBUG && /\\btunnel\\b/.test(process.env.NODE_DEBUG)) {\n  debug = function() {\n    var args = Array.prototype.slice.call(arguments);\n    if (typeof args[0] === 'string') {\n      args[0] = 'TUNNEL: ' + args[0];\n    } else {\n      args.unshift('TUNNEL:');\n    }\n    console.error.apply(console, args);\n  }\n} else {\n  debug = function() {};\n}\nexports.debug = debug; // for test\n","import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;","import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;","import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","import crypto from 'crypto';\n\nfunction md5(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return crypto.createHash('md5').update(bytes).digest();\n}\n\nexport default md5;","import v35 from './v35.js';\nimport md5 from './md5.js';\nconst v3 = v35('v3', 0x30, md5);\nexport default v3;","import crypto from 'crypto';\n\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return crypto.createHash('sha1').update(bytes).digest();\n}\n\nexport default sha1;","import v35 from './v35.js';\nimport sha1 from './sha1.js';\nconst v5 = v35('v5', 0x50, sha1);\nexport default v5;","export default '00000000-0000-0000-0000-000000000000';","import validate from './validate.js';\n\nfunction version(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\nexport default version;","import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","module.exports = require(\"assert\");","module.exports = require(\"crypto\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"tls\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export var SelectorType;\n(function (SelectorType) {\n    SelectorType[\"ENV\"] = \"env\";\n    SelectorType[\"CONFIG\"] = \"shared config entry\";\n})(SelectorType || (SelectorType = {}));\nexport const booleanSelector = (obj, key, type) => {\n    if (!(key in obj))\n        return undefined;\n    if (obj[key] === \"true\")\n        return true;\n    if (obj[key] === \"false\")\n        return false;\n    throw new Error(`Cannot load ${type} \"${key}\". Expected \"true\" or \"false\", got ${obj[key]}.`);\n};\n","import { booleanSelector, SelectorType } from \"@aws-sdk/util-config-provider\";\nexport const ENV_USE_DUALSTACK_ENDPOINT = \"AWS_USE_DUALSTACK_ENDPOINT\";\nexport const CONFIG_USE_DUALSTACK_ENDPOINT = \"use_dualstack_endpoint\";\nexport const DEFAULT_USE_DUALSTACK_ENDPOINT = false;\nexport const NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => booleanSelector(env, ENV_USE_DUALSTACK_ENDPOINT, SelectorType.ENV),\n    configFileSelector: (profile) => booleanSelector(profile, CONFIG_USE_DUALSTACK_ENDPOINT, SelectorType.CONFIG),\n    default: false,\n};\n","import { booleanSelector, SelectorType } from \"@aws-sdk/util-config-provider\";\nexport const ENV_USE_FIPS_ENDPOINT = \"AWS_USE_FIPS_ENDPOINT\";\nexport const CONFIG_USE_FIPS_ENDPOINT = \"use_fips_endpoint\";\nexport const DEFAULT_USE_FIPS_ENDPOINT = false;\nexport const NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => booleanSelector(env, ENV_USE_FIPS_ENDPOINT, SelectorType.ENV),\n    configFileSelector: (profile) => booleanSelector(profile, CONFIG_USE_FIPS_ENDPOINT, SelectorType.CONFIG),\n    default: false,\n};\n","export const REGION_ENV_NAME = \"AWS_REGION\";\nexport const REGION_INI_NAME = \"region\";\nexport const NODE_REGION_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[REGION_ENV_NAME],\n    configFileSelector: (profile) => profile[REGION_INI_NAME],\n    default: () => {\n        throw new Error(\"Region is missing\");\n    },\n};\nexport const NODE_REGION_CONFIG_FILE_OPTIONS = {\n    preferredFile: \"credentials\",\n};\n","export const isFipsRegion = (region) => typeof region === \"string\" && (region.startsWith(\"fips-\") || region.endsWith(\"-fips\"));\n","import { isFipsRegion } from \"./isFipsRegion\";\nexport const getRealRegion = (region) => isFipsRegion(region)\n    ? [\"fips-aws-global\", \"aws-fips\"].includes(region)\n        ? \"us-east-1\"\n        : region.replace(/fips-(dkr-|prod-)?|-fips/, \"\")\n    : region;\n","import { getRealRegion } from \"./getRealRegion\";\nimport { isFipsRegion } from \"./isFipsRegion\";\nexport const resolveRegionConfig = (input) => {\n    const { region, useFipsEndpoint } = input;\n    if (!region) {\n        throw new Error(\"Region is missing\");\n    }\n    return {\n        ...input,\n        region: async () => {\n            if (typeof region === \"string\") {\n                return getRealRegion(region);\n            }\n            const providedRegion = await region();\n            return getRealRegion(providedRegion);\n        },\n        useFipsEndpoint: async () => {\n            const providedRegion = typeof region === \"string\" ? region : await region();\n            if (isFipsRegion(providedRegion)) {\n                return true;\n            }\n            return typeof useFipsEndpoint !== \"function\" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();\n        },\n    };\n};\n","export var FieldPosition;\n(function (FieldPosition) {\n    FieldPosition[FieldPosition[\"HEADER\"] = 0] = \"HEADER\";\n    FieldPosition[FieldPosition[\"TRAILER\"] = 1] = \"TRAILER\";\n})(FieldPosition || (FieldPosition = {}));\n","export class HttpRequest {\n    constructor(options) {\n        this.method = options.method || \"GET\";\n        this.hostname = options.hostname || \"localhost\";\n        this.port = options.port;\n        this.query = options.query || {};\n        this.headers = options.headers || {};\n        this.body = options.body;\n        this.protocol = options.protocol\n            ? options.protocol.slice(-1) !== \":\"\n                ? `${options.protocol}:`\n                : options.protocol\n            : \"https:\";\n        this.path = options.path ? (options.path.charAt(0) !== \"/\" ? `/${options.path}` : options.path) : \"/\";\n    }\n    static isInstance(request) {\n        if (!request)\n            return false;\n        const req = request;\n        return (\"method\" in req &&\n            \"protocol\" in req &&\n            \"hostname\" in req &&\n            \"path\" in req &&\n            typeof req[\"query\"] === \"object\" &&\n            typeof req[\"headers\"] === \"object\");\n    }\n    clone() {\n        const cloned = new HttpRequest({\n            ...this,\n            headers: { ...this.headers },\n        });\n        if (cloned.query)\n            cloned.query = cloneQuery(cloned.query);\n        return cloned;\n    }\n}\nfunction cloneQuery(query) {\n    return Object.keys(query).reduce((carry, paramName) => {\n        const param = query[paramName];\n        return {\n            ...carry,\n            [paramName]: Array.isArray(param) ? [...param] : param,\n        };\n    }, {});\n}\n","export class HttpResponse {\n    constructor(options) {\n        this.statusCode = options.statusCode;\n        this.headers = options.headers || {};\n        this.body = options.body;\n    }\n    static isInstance(response) {\n        if (!response)\n            return false;\n        const resp = response;\n        return typeof resp.statusCode === \"number\" && typeof resp.headers === \"object\";\n    }\n}\n","import { HttpRequest } from \"@aws-sdk/protocol-http\";\nconst CONTENT_LENGTH_HEADER = \"content-length\";\nexport function contentLengthMiddleware(bodyLengthChecker) {\n    return (next) => async (args) => {\n        const request = args.request;\n        if (HttpRequest.isInstance(request)) {\n            const { body, headers } = request;\n            if (body &&\n                Object.keys(headers)\n                    .map((str) => str.toLowerCase())\n                    .indexOf(CONTENT_LENGTH_HEADER) === -1) {\n                try {\n                    const length = bodyLengthChecker(body);\n                    request.headers = {\n                        ...request.headers,\n                        [CONTENT_LENGTH_HEADER]: String(length),\n                    };\n                }\n                catch (error) {\n                }\n            }\n        }\n        return next({\n            ...args,\n            request,\n        });\n    };\n}\nexport const contentLengthMiddlewareOptions = {\n    step: \"build\",\n    tags: [\"SET_CONTENT_LENGTH\", \"CONTENT_LENGTH\"],\n    name: \"contentLengthMiddleware\",\n    override: true,\n};\nexport const getContentLengthPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);\n    },\n});\n","import { deserializerMiddleware } from \"./deserializerMiddleware\";\nimport { serializerMiddleware } from \"./serializerMiddleware\";\nexport const deserializerMiddlewareOption = {\n    name: \"deserializerMiddleware\",\n    step: \"deserialize\",\n    tags: [\"DESERIALIZER\"],\n    override: true,\n};\nexport const serializerMiddlewareOption = {\n    name: \"serializerMiddleware\",\n    step: \"serialize\",\n    tags: [\"SERIALIZER\"],\n    override: true,\n};\nexport function getSerdePlugin(config, serializer, deserializer) {\n    return {\n        applyToStack: (commandStack) => {\n            commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);\n            commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);\n        },\n    };\n}\n","export const deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {\n    const { response } = await next(args);\n    try {\n        const parsed = await deserializer(response, options);\n        return {\n            response,\n            output: parsed,\n        };\n    }\n    catch (error) {\n        Object.defineProperty(error, \"$response\", {\n            value: response,\n        });\n        if (!('$metadata' in error)) {\n            const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;\n            error.message += \"\\n  \" + hint;\n        }\n        throw error;\n    }\n};\n","export const serializerMiddleware = (options, serializer) => (next, context) => async (args) => {\n    const endpoint = context.endpointV2?.url && options.urlParser\n        ? async () => options.urlParser(context.endpointV2.url)\n        : options.endpoint;\n    if (!endpoint) {\n        throw new Error(\"No valid endpoint provider available.\");\n    }\n    const request = await serializer(args.input, { ...options, endpoint });\n    return next({\n        ...args,\n        request,\n    });\n};\n","export const resolveParamsForS3 = async (endpointParams) => {\n    const bucket = endpointParams?.Bucket || \"\";\n    if (typeof endpointParams.Bucket === \"string\") {\n        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent(\"#\")).replace(/\\?/g, encodeURIComponent(\"?\"));\n    }\n    if (isArnBucketName(bucket)) {\n        if (endpointParams.ForcePathStyle === true) {\n            throw new Error(\"Path-style addressing cannot be used with ARN buckets\");\n        }\n    }\n    else if (!isDnsCompatibleBucketName(bucket) ||\n        (bucket.indexOf(\".\") !== -1 && !String(endpointParams.Endpoint).startsWith(\"http:\")) ||\n        bucket.toLowerCase() !== bucket ||\n        bucket.length < 3) {\n        endpointParams.ForcePathStyle = true;\n    }\n    if (endpointParams.DisableMultiRegionAccessPoints) {\n        endpointParams.disableMultiRegionAccessPoints = true;\n        endpointParams.DisableMRAP = true;\n    }\n    return endpointParams;\n};\nconst DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nconst IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nconst DOTS_PATTERN = /\\.\\./;\nexport const DOT_PATTERN = /\\./;\nexport const S3_HOSTNAME_PATTERN = /^(.+\\.)?s3(-fips)?(\\.dualstack)?[.-]([a-z0-9-]+)\\./;\nexport const isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);\nexport const isArnBucketName = (bucketName) => {\n    const [arn, partition, service, region, account, typeOrId] = bucketName.split(\":\");\n    const isArn = arn === \"arn\" && bucketName.split(\":\").length >= 6;\n    const isValidArn = [arn, partition, service, account, typeOrId].filter(Boolean).length === 5;\n    if (isArn && !isValidArn) {\n        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);\n    }\n    return arn === \"arn\" && !!partition && !!service && !!account && !!typeOrId;\n};\n","export const createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {\n    const configProvider = async () => {\n        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];\n        if (typeof configValue === \"function\") {\n            return configValue();\n        }\n        return configValue;\n    };\n    if (configKey === \"endpoint\" || canonicalEndpointParamKey === \"endpoint\") {\n        return async () => {\n            const endpoint = await configProvider();\n            if (endpoint && typeof endpoint === \"object\") {\n                if (\"url\" in endpoint) {\n                    return endpoint.url.href;\n                }\n                if (\"hostname\" in endpoint) {\n                    const { protocol, hostname, port, path } = endpoint;\n                    return `${protocol}//${hostname}${port ? \":\" + port : \"\"}${path}`;\n                }\n            }\n            return endpoint;\n        };\n    }\n    return configProvider;\n};\n","import { resolveParamsForS3 } from \"../service-customizations\";\nimport { createConfigValueProvider } from \"./createConfigValueProvider\";\nexport const getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {\n    const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);\n    if (typeof clientConfig.endpointProvider !== \"function\") {\n        throw new Error(\"config.endpointProvider is not set.\");\n    }\n    const endpoint = clientConfig.endpointProvider(endpointParams, context);\n    return endpoint;\n};\nexport const resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {\n    const endpointParams = {};\n    const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};\n    for (const [name, instruction] of Object.entries(instructions)) {\n        switch (instruction.type) {\n            case \"staticContextParams\":\n                endpointParams[name] = instruction.value;\n                break;\n            case \"contextParams\":\n                endpointParams[name] = commandInput[instruction.name];\n                break;\n            case \"clientContextParams\":\n            case \"builtInParams\":\n                endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();\n                break;\n            default:\n                throw new Error(\"Unrecognized endpoint parameter instruction: \" + JSON.stringify(instruction));\n        }\n    }\n    if (Object.keys(instructions).length === 0) {\n        Object.assign(endpointParams, clientConfig);\n    }\n    if (String(clientConfig.serviceId).toLowerCase() === \"s3\") {\n        await resolveParamsForS3(endpointParams);\n    }\n    return endpointParams;\n};\n","import { getEndpointFromInstructions } from \"./adaptors/getEndpointFromInstructions\";\nexport const endpointMiddleware = ({ config, instructions, }) => {\n    return (next, context) => async (args) => {\n        const endpoint = await getEndpointFromInstructions(args.input, {\n            getEndpointParameterInstructions() {\n                return instructions;\n            },\n        }, { ...config }, context);\n        context.endpointV2 = endpoint;\n        context.authSchemes = endpoint.properties?.authSchemes;\n        const authScheme = context.authSchemes?.[0];\n        if (authScheme) {\n            context[\"signing_region\"] = authScheme.signingRegion;\n            context[\"signing_service\"] = authScheme.signingName;\n        }\n        return next({\n            ...args,\n        });\n    };\n};\n","import { serializerMiddlewareOption } from \"@aws-sdk/middleware-serde\";\nimport { endpointMiddleware } from \"./endpointMiddleware\";\nexport const endpointMiddlewareOptions = {\n    step: \"serialize\",\n    tags: [\"ENDPOINT_PARAMETERS\", \"ENDPOINT_V2\", \"ENDPOINT\"],\n    name: \"endpointV2Middleware\",\n    override: true,\n    relation: \"before\",\n    toMiddleware: serializerMiddlewareOption.name,\n};\nexport const getEndpointPlugin = (config, instructions) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(endpointMiddleware({\n            config,\n            instructions,\n        }), endpointMiddlewareOptions);\n    },\n});\n","export const normalizeProvider = (input) => {\n    if (typeof input === \"function\")\n        return input;\n    const promisified = Promise.resolve(input);\n    return () => promisified;\n};\n","import { parseQueryString } from \"@aws-sdk/querystring-parser\";\nexport const parseUrl = (url) => {\n    if (typeof url === \"string\") {\n        return parseUrl(new URL(url));\n    }\n    const { hostname, pathname, port, protocol, search } = url;\n    let query;\n    if (search) {\n        query = parseQueryString(search);\n    }\n    return {\n        hostname,\n        port: port ? parseInt(port) : undefined,\n        protocol,\n        path: pathname,\n        query,\n    };\n};\n","export function parseQueryString(querystring) {\n    const query = {};\n    querystring = querystring.replace(/^\\?/, \"\");\n    if (querystring) {\n        for (const pair of querystring.split(\"&\")) {\n            let [key, value = null] = pair.split(\"=\");\n            key = decodeURIComponent(key);\n            if (value) {\n                value = decodeURIComponent(value);\n            }\n            if (!(key in query)) {\n                query[key] = value;\n            }\n            else if (Array.isArray(query[key])) {\n                query[key].push(value);\n            }\n            else {\n                query[key] = [query[key], value];\n            }\n        }\n    }\n    return query;\n}\n","import { normalizeProvider } from \"@aws-sdk/util-middleware\";\nimport { toEndpointV1 } from \"./adaptors/toEndpointV1\";\nexport const resolveEndpointConfig = (input) => {\n    const tls = input.tls ?? true;\n    const { endpoint } = input;\n    const customEndpointProvider = endpoint != null ? async () => toEndpointV1(await normalizeProvider(endpoint)()) : undefined;\n    const isCustomEndpoint = !!endpoint;\n    return {\n        ...input,\n        endpoint: customEndpointProvider,\n        tls,\n        isCustomEndpoint,\n        useDualstackEndpoint: normalizeProvider(input.useDualstackEndpoint ?? false),\n        useFipsEndpoint: normalizeProvider(input.useFipsEndpoint ?? false),\n    };\n};\n","import { parseUrl } from \"@aws-sdk/url-parser\";\nexport const toEndpointV1 = (endpoint) => {\n    if (typeof endpoint === \"object\") {\n        if (\"url\" in endpoint) {\n            return parseUrl(endpoint.url);\n        }\n        return endpoint;\n    }\n    return parseUrl(endpoint);\n};\n","import { HttpRequest } from \"@aws-sdk/protocol-http\";\nexport function resolveHostHeaderConfig(input) {\n    return input;\n}\nexport const hostHeaderMiddleware = (options) => (next) => async (args) => {\n    if (!HttpRequest.isInstance(args.request))\n        return next(args);\n    const { request } = args;\n    const { handlerProtocol = \"\" } = options.requestHandler.metadata || {};\n    if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n        delete request.headers[\"host\"];\n        request.headers[\":authority\"] = \"\";\n    }\n    else if (!request.headers[\"host\"]) {\n        let host = request.hostname;\n        if (request.port != null)\n            host += `:${request.port}`;\n        request.headers[\"host\"] = host;\n    }\n    return next(args);\n};\nexport const hostHeaderMiddlewareOptions = {\n    name: \"hostHeaderMiddleware\",\n    step: \"build\",\n    priority: \"low\",\n    tags: [\"HOST\"],\n    override: true,\n};\nexport const getHostHeaderPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);\n    },\n});\n","export const loggerMiddleware = () => (next, context) => async (args) => {\n    try {\n        const response = await next(args);\n        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;\n        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;\n        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;\n        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;\n        const { $metadata, ...outputWithoutMetadata } = response.output;\n        logger?.info?.({\n            clientName,\n            commandName,\n            input: inputFilterSensitiveLog(args.input),\n            output: outputFilterSensitiveLog(outputWithoutMetadata),\n            metadata: $metadata,\n        });\n        return response;\n    }\n    catch (error) {\n        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;\n        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;\n        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;\n        logger?.error?.({\n            clientName,\n            commandName,\n            input: inputFilterSensitiveLog(args.input),\n            error,\n            metadata: error.$metadata,\n        });\n        throw error;\n    }\n};\nexport const loggerMiddlewareOptions = {\n    name: \"loggerMiddleware\",\n    tags: [\"LOGGER\"],\n    step: \"initialize\",\n    override: true,\n};\nexport const getLoggerPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n    },\n});\n","import { HttpRequest } from \"@aws-sdk/protocol-http\";\nconst TRACE_ID_HEADER_NAME = \"X-Amzn-Trace-Id\";\nconst ENV_LAMBDA_FUNCTION_NAME = \"AWS_LAMBDA_FUNCTION_NAME\";\nconst ENV_TRACE_ID = \"_X_AMZN_TRACE_ID\";\nexport const recursionDetectionMiddleware = (options) => (next) => async (args) => {\n    const { request } = args;\n    if (!HttpRequest.isInstance(request) ||\n        options.runtime !== \"node\" ||\n        request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {\n        return next(args);\n    }\n    const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];\n    const traceId = process.env[ENV_TRACE_ID];\n    const nonEmptyString = (str) => typeof str === \"string\" && str.length > 0;\n    if (nonEmptyString(functionName) && nonEmptyString(traceId)) {\n        request.headers[TRACE_ID_HEADER_NAME] = traceId;\n    }\n    return next({\n        ...args,\n        request,\n    });\n};\nexport const addRecursionDetectionMiddlewareOptions = {\n    step: \"build\",\n    tags: [\"RECURSION_DETECTION\"],\n    name: \"recursionDetectionMiddleware\",\n    override: true,\n    priority: \"low\",\n};\nexport const getRecursionDetectionPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);\n    },\n});\n","export var RETRY_MODES;\n(function (RETRY_MODES) {\n    RETRY_MODES[\"STANDARD\"] = \"standard\";\n    RETRY_MODES[\"ADAPTIVE\"] = \"adaptive\";\n})(RETRY_MODES || (RETRY_MODES = {}));\nexport const DEFAULT_MAX_ATTEMPTS = 3;\nexport const DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;\n","export const CLOCK_SKEW_ERROR_CODES = [\n    \"AuthFailure\",\n    \"InvalidSignatureException\",\n    \"RequestExpired\",\n    \"RequestInTheFuture\",\n    \"RequestTimeTooSkewed\",\n    \"SignatureDoesNotMatch\",\n];\nexport const THROTTLING_ERROR_CODES = [\n    \"BandwidthLimitExceeded\",\n    \"EC2ThrottledException\",\n    \"LimitExceededException\",\n    \"PriorRequestNotComplete\",\n    \"ProvisionedThroughputExceededException\",\n    \"RequestLimitExceeded\",\n    \"RequestThrottled\",\n    \"RequestThrottledException\",\n    \"SlowDown\",\n    \"ThrottledException\",\n    \"Throttling\",\n    \"ThrottlingException\",\n    \"TooManyRequestsException\",\n    \"TransactionInProgressException\",\n];\nexport const TRANSIENT_ERROR_CODES = [\"AbortError\", \"TimeoutError\", \"RequestTimeout\", \"RequestTimeoutException\"];\nexport const TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];\nexport const NODEJS_TIMEOUT_ERROR_CODES = [\"ECONNRESET\", \"ECONNREFUSED\", \"EPIPE\", \"ETIMEDOUT\"];\n","import { CLOCK_SKEW_ERROR_CODES, NODEJS_TIMEOUT_ERROR_CODES, THROTTLING_ERROR_CODES, TRANSIENT_ERROR_CODES, TRANSIENT_ERROR_STATUS_CODES, } from \"./constants\";\nexport const isRetryableByTrait = (error) => error.$retryable !== undefined;\nexport const isClockSkewError = (error) => CLOCK_SKEW_ERROR_CODES.includes(error.name);\nexport const isThrottlingError = (error) => error.$metadata?.httpStatusCode === 429 ||\n    THROTTLING_ERROR_CODES.includes(error.name) ||\n    error.$retryable?.throttling == true;\nexport const isTransientError = (error) => TRANSIENT_ERROR_CODES.includes(error.name) ||\n    NODEJS_TIMEOUT_ERROR_CODES.includes(error?.code || \"\") ||\n    TRANSIENT_ERROR_STATUS_CODES.includes(error.$metadata?.httpStatusCode || 0);\nexport const isServerError = (error) => {\n    if (error.$metadata?.httpStatusCode !== undefined) {\n        const statusCode = error.$metadata.httpStatusCode;\n        if (500 <= statusCode && statusCode <= 599 && !isTransientError(error)) {\n            return true;\n        }\n        return false;\n    }\n    return false;\n};\n","import { isThrottlingError } from \"@aws-sdk/service-error-classification\";\nexport class DefaultRateLimiter {\n    constructor(options) {\n        this.currentCapacity = 0;\n        this.enabled = false;\n        this.lastMaxRate = 0;\n        this.measuredTxRate = 0;\n        this.requestCount = 0;\n        this.lastTimestamp = 0;\n        this.timeWindow = 0;\n        this.beta = options?.beta ?? 0.7;\n        this.minCapacity = options?.minCapacity ?? 1;\n        this.minFillRate = options?.minFillRate ?? 0.5;\n        this.scaleConstant = options?.scaleConstant ?? 0.4;\n        this.smooth = options?.smooth ?? 0.8;\n        const currentTimeInSeconds = this.getCurrentTimeInSeconds();\n        this.lastThrottleTime = currentTimeInSeconds;\n        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());\n        this.fillRate = this.minFillRate;\n        this.maxCapacity = this.minCapacity;\n    }\n    getCurrentTimeInSeconds() {\n        return Date.now() / 1000;\n    }\n    async getSendToken() {\n        return this.acquireTokenBucket(1);\n    }\n    async acquireTokenBucket(amount) {\n        if (!this.enabled) {\n            return;\n        }\n        this.refillTokenBucket();\n        if (amount > this.currentCapacity) {\n            const delay = ((amount - this.currentCapacity) / this.fillRate) * 1000;\n            await new Promise((resolve) => setTimeout(resolve, delay));\n        }\n        this.currentCapacity = this.currentCapacity - amount;\n    }\n    refillTokenBucket() {\n        const timestamp = this.getCurrentTimeInSeconds();\n        if (!this.lastTimestamp) {\n            this.lastTimestamp = timestamp;\n            return;\n        }\n        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;\n        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);\n        this.lastTimestamp = timestamp;\n    }\n    updateClientSendingRate(response) {\n        let calculatedRate;\n        this.updateMeasuredRate();\n        if (isThrottlingError(response)) {\n            const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);\n            this.lastMaxRate = rateToUse;\n            this.calculateTimeWindow();\n            this.lastThrottleTime = this.getCurrentTimeInSeconds();\n            calculatedRate = this.cubicThrottle(rateToUse);\n            this.enableTokenBucket();\n        }\n        else {\n            this.calculateTimeWindow();\n            calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());\n        }\n        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);\n        this.updateTokenBucketRate(newRate);\n    }\n    calculateTimeWindow() {\n        this.timeWindow = this.getPrecise(Math.pow((this.lastMaxRate * (1 - this.beta)) / this.scaleConstant, 1 / 3));\n    }\n    cubicThrottle(rateToUse) {\n        return this.getPrecise(rateToUse * this.beta);\n    }\n    cubicSuccess(timestamp) {\n        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);\n    }\n    enableTokenBucket() {\n        this.enabled = true;\n    }\n    updateTokenBucketRate(newRate) {\n        this.refillTokenBucket();\n        this.fillRate = Math.max(newRate, this.minFillRate);\n        this.maxCapacity = Math.max(newRate, this.minCapacity);\n        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);\n    }\n    updateMeasuredRate() {\n        const t = this.getCurrentTimeInSeconds();\n        const timeBucket = Math.floor(t * 2) / 2;\n        this.requestCount++;\n        if (timeBucket > this.lastTxRateBucket) {\n            const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);\n            this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));\n            this.requestCount = 0;\n            this.lastTxRateBucket = timeBucket;\n        }\n    }\n    getPrecise(num) {\n        return parseFloat(num.toFixed(8));\n    }\n}\n","export const DEFAULT_RETRY_DELAY_BASE = 100;\nexport const MAXIMUM_RETRY_DELAY = 20 * 1000;\nexport const THROTTLING_RETRY_DELAY_BASE = 500;\nexport const INITIAL_RETRY_TOKENS = 500;\nexport const RETRY_COST = 5;\nexport const TIMEOUT_RETRY_COST = 10;\nexport const NO_RETRY_INCREMENT = 1;\nexport const INVOCATION_ID_HEADER = \"amz-sdk-invocation-id\";\nexport const REQUEST_HEADER = \"amz-sdk-request\";\n","import { DEFAULT_RETRY_DELAY_BASE, MAXIMUM_RETRY_DELAY, NO_RETRY_INCREMENT, RETRY_COST, THROTTLING_RETRY_DELAY_BASE, TIMEOUT_RETRY_COST, } from \"./constants\";\nimport { getDefaultRetryBackoffStrategy } from \"./defaultRetryBackoffStrategy\";\nexport const getDefaultRetryToken = (initialRetryTokens, initialRetryDelay, initialRetryCount, options) => {\n    const MAX_CAPACITY = initialRetryTokens;\n    const retryCost = options?.retryCost ?? RETRY_COST;\n    const timeoutRetryCost = options?.timeoutRetryCost ?? TIMEOUT_RETRY_COST;\n    const retryBackoffStrategy = options?.retryBackoffStrategy ?? getDefaultRetryBackoffStrategy();\n    let availableCapacity = initialRetryTokens;\n    let retryDelay = Math.min(MAXIMUM_RETRY_DELAY, initialRetryDelay);\n    let lastRetryCost = undefined;\n    let retryCount = initialRetryCount ?? 0;\n    const getCapacityAmount = (errorType) => (errorType === \"TRANSIENT\" ? timeoutRetryCost : retryCost);\n    const getRetryCount = () => retryCount;\n    const getRetryDelay = () => retryDelay;\n    const getLastRetryCost = () => lastRetryCost;\n    const hasRetryTokens = (errorType) => getCapacityAmount(errorType) <= availableCapacity;\n    const getRetryTokenCount = (errorInfo) => {\n        const errorType = errorInfo.errorType;\n        if (!hasRetryTokens(errorType)) {\n            throw new Error(\"No retry token available\");\n        }\n        const capacityAmount = getCapacityAmount(errorType);\n        const delayBase = errorType === \"THROTTLING\" ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE;\n        retryBackoffStrategy.setDelayBase(delayBase);\n        const delayFromErrorType = retryBackoffStrategy.computeNextBackoffDelay(retryCount);\n        if (errorInfo.retryAfterHint) {\n            const delayFromRetryAfterHint = errorInfo.retryAfterHint.getTime() - Date.now();\n            retryDelay = Math.max(delayFromRetryAfterHint || 0, delayFromErrorType);\n        }\n        else {\n            retryDelay = delayFromErrorType;\n        }\n        retryCount++;\n        lastRetryCost = capacityAmount;\n        availableCapacity -= capacityAmount;\n        return capacityAmount;\n    };\n    const releaseRetryTokens = (releaseAmount) => {\n        availableCapacity += releaseAmount ?? NO_RETRY_INCREMENT;\n        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);\n    };\n    return {\n        getRetryCount,\n        getRetryDelay,\n        getLastRetryCost,\n        hasRetryTokens,\n        getRetryTokenCount,\n        releaseRetryTokens,\n    };\n};\n","import { DEFAULT_RETRY_DELAY_BASE, MAXIMUM_RETRY_DELAY } from \"./constants\";\nexport const getDefaultRetryBackoffStrategy = () => {\n    let delayBase = DEFAULT_RETRY_DELAY_BASE;\n    const computeNextBackoffDelay = (attempts) => {\n        return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));\n    };\n    const setDelayBase = (delay) => {\n        delayBase = delay;\n    };\n    return {\n        computeNextBackoffDelay,\n        setDelayBase,\n    };\n};\n","import { DEFAULT_MAX_ATTEMPTS, RETRY_MODES } from \"./config\";\nimport { DEFAULT_RETRY_DELAY_BASE, INITIAL_RETRY_TOKENS } from \"./constants\";\nimport { getDefaultRetryToken } from \"./defaultRetryToken\";\nexport class StandardRetryStrategy {\n    constructor(maxAttempts) {\n        this.maxAttempts = maxAttempts;\n        this.mode = RETRY_MODES.STANDARD;\n        this.retryToken = getDefaultRetryToken(INITIAL_RETRY_TOKENS, DEFAULT_RETRY_DELAY_BASE);\n        this.maxAttemptsProvider = typeof maxAttempts === \"function\" ? maxAttempts : async () => maxAttempts;\n    }\n    async acquireInitialRetryToken(retryTokenScope) {\n        return this.retryToken;\n    }\n    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {\n        const maxAttempts = await this.getMaxAttempts();\n        if (this.shouldRetry(tokenToRenew, errorInfo, maxAttempts)) {\n            tokenToRenew.getRetryTokenCount(errorInfo);\n            return tokenToRenew;\n        }\n        throw new Error(\"No retry token available\");\n    }\n    recordSuccess(token) {\n        this.retryToken.releaseRetryTokens(token.getLastRetryCost());\n    }\n    async getMaxAttempts() {\n        let maxAttempts;\n        try {\n            return await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);\n            return DEFAULT_MAX_ATTEMPTS;\n        }\n    }\n    shouldRetry(tokenToRenew, errorInfo, maxAttempts) {\n        const attempts = tokenToRenew.getRetryCount();\n        return (attempts < maxAttempts &&\n            tokenToRenew.hasRetryTokens(errorInfo.errorType) &&\n            this.isRetryableError(errorInfo.errorType));\n    }\n    isRetryableError(errorType) {\n        return errorType === \"THROTTLING\" || errorType === \"TRANSIENT\";\n    }\n}\n","import { RETRY_MODES } from \"./config\";\nimport { DefaultRateLimiter } from \"./DefaultRateLimiter\";\nimport { StandardRetryStrategy } from \"./StandardRetryStrategy\";\nexport class AdaptiveRetryStrategy {\n    constructor(maxAttemptsProvider, options) {\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = RETRY_MODES.ADAPTIVE;\n        const { rateLimiter } = options ?? {};\n        this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();\n        this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);\n    }\n    async acquireInitialRetryToken(retryTokenScope) {\n        await this.rateLimiter.getSendToken();\n        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);\n    }\n    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {\n        this.rateLimiter.updateClientSendingRate(errorInfo);\n        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);\n    }\n    recordSuccess(token) {\n        this.rateLimiter.updateClientSendingRate({});\n        this.standardRetryStrategy.recordSuccess(token);\n    }\n}\n","import { normalizeProvider } from \"@aws-sdk/util-middleware\";\nimport { AdaptiveRetryStrategy, DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, RETRY_MODES, StandardRetryStrategy, } from \"@aws-sdk/util-retry\";\nexport const ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport const CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexport const NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => {\n        const value = env[ENV_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n        }\n        return maxAttempt;\n    },\n    configFileSelector: (profile) => {\n        const value = profile[CONFIG_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n        }\n        return maxAttempt;\n    },\n    default: DEFAULT_MAX_ATTEMPTS,\n};\nexport const resolveRetryConfig = (input) => {\n    const { retryStrategy } = input;\n    const maxAttempts = normalizeProvider(input.maxAttempts ?? DEFAULT_MAX_ATTEMPTS);\n    return {\n        ...input,\n        maxAttempts,\n        retryStrategy: async () => {\n            if (retryStrategy) {\n                return retryStrategy;\n            }\n            const retryMode = await normalizeProvider(input.retryMode)();\n            if (retryMode === RETRY_MODES.ADAPTIVE) {\n                return new AdaptiveRetryStrategy(maxAttempts);\n            }\n            return new StandardRetryStrategy(maxAttempts);\n        },\n    };\n};\nexport const ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport const CONFIG_RETRY_MODE = \"retry_mode\";\nexport const NODE_RETRY_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_RETRY_MODE],\n    configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],\n    default: DEFAULT_RETRY_MODE,\n};\n","export const asSdkError = (error) => {\n    if (error instanceof Error)\n        return error;\n    if (error instanceof Object)\n        return Object.assign(new Error(), error);\n    if (typeof error === \"string\")\n        return new Error(error);\n    return new Error(`AWS SDK error wrapper for ${error}`);\n};\n","import { HttpRequest, HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { isServerError, isThrottlingError, isTransientError } from \"@aws-sdk/service-error-classification\";\nimport { INVOCATION_ID_HEADER, REQUEST_HEADER } from \"@aws-sdk/util-retry\";\nimport { v4 } from \"uuid\";\nimport { asSdkError } from \"./util\";\nexport const retryMiddleware = (options) => (next, context) => async (args) => {\n    let retryStrategy = await options.retryStrategy();\n    const maxAttempts = await options.maxAttempts();\n    if (isRetryStrategyV2(retryStrategy)) {\n        retryStrategy = retryStrategy;\n        let retryToken = await retryStrategy.acquireInitialRetryToken(context[\"partition_id\"]);\n        let lastError = new Error();\n        let attempts = 0;\n        let totalRetryDelay = 0;\n        const { request } = args;\n        if (HttpRequest.isInstance(request)) {\n            request.headers[INVOCATION_ID_HEADER] = v4();\n        }\n        while (true) {\n            try {\n                if (HttpRequest.isInstance(request)) {\n                    request.headers[REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                const { response, output } = await next(args);\n                retryStrategy.recordSuccess(retryToken);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalRetryDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const retryErrorInfo = getRetryErrorInfo(e);\n                lastError = asSdkError(e);\n                try {\n                    retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);\n                }\n                catch (refreshError) {\n                    if (!lastError.$metadata) {\n                        lastError.$metadata = {};\n                    }\n                    lastError.$metadata.attempts = attempts + 1;\n                    lastError.$metadata.totalRetryDelay = totalRetryDelay;\n                    throw lastError;\n                }\n                attempts = retryToken.getRetryCount();\n                const delay = retryToken.getRetryDelay();\n                totalRetryDelay += delay;\n                await new Promise((resolve) => setTimeout(resolve, delay));\n            }\n        }\n    }\n    else {\n        retryStrategy = retryStrategy;\n        if (retryStrategy?.mode)\n            context.userAgent = [...(context.userAgent || []), [\"cfg/retry-mode\", retryStrategy.mode]];\n        return retryStrategy.retry(next, args);\n    }\n};\nconst isRetryStrategyV2 = (retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== \"undefined\" &&\n    typeof retryStrategy.refreshRetryTokenForRetry !== \"undefined\" &&\n    typeof retryStrategy.recordSuccess !== \"undefined\";\nconst getRetryErrorInfo = (error) => {\n    const errorInfo = {\n        errorType: getRetryErrorType(error),\n    };\n    const retryAfterHint = getRetryAfterHint(error.$response);\n    if (retryAfterHint) {\n        errorInfo.retryAfterHint = retryAfterHint;\n    }\n    return errorInfo;\n};\nconst getRetryErrorType = (error) => {\n    if (isThrottlingError(error))\n        return \"THROTTLING\";\n    if (isTransientError(error))\n        return \"TRANSIENT\";\n    if (isServerError(error))\n        return \"SERVER_ERROR\";\n    return \"CLIENT_ERROR\";\n};\nexport const retryMiddlewareOptions = {\n    name: \"retryMiddleware\",\n    tags: [\"RETRY\"],\n    step: \"finalizeRequest\",\n    priority: \"high\",\n    override: true,\n};\nexport const getRetryPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(retryMiddleware(options), retryMiddlewareOptions);\n    },\n});\nexport const getRetryAfterHint = (response) => {\n    if (!HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return new Date(retryAfterSeconds * 1000);\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate;\n};\n","export class ProviderError extends Error {\n    constructor(message, tryNextLink = true) {\n        super(message);\n        this.tryNextLink = tryNextLink;\n        this.name = \"ProviderError\";\n        Object.setPrototypeOf(this, ProviderError.prototype);\n    }\n    static from(error, tryNextLink = true) {\n        return Object.assign(new this(error.message, tryNextLink), error);\n    }\n}\n","import { ProviderError } from \"./ProviderError\";\nexport class CredentialsProviderError extends ProviderError {\n    constructor(message, tryNextLink = true) {\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = \"CredentialsProviderError\";\n        Object.setPrototypeOf(this, CredentialsProviderError.prototype);\n    }\n}\n","import { ProviderError } from \"./ProviderError\";\nexport class TokenProviderError extends ProviderError {\n    constructor(message, tryNextLink = true) {\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = \"TokenProviderError\";\n        Object.setPrototypeOf(this, TokenProviderError.prototype);\n    }\n}\n","import { ProviderError } from \"./ProviderError\";\nexport function chain(...providers) {\n    return () => {\n        let promise = Promise.reject(new ProviderError(\"No providers in chain\"));\n        for (const provider of providers) {\n            promise = promise.catch((err) => {\n                if (err?.tryNextLink) {\n                    return provider();\n                }\n                throw err;\n            });\n        }\n        return promise;\n    };\n}\n","export const fromStatic = (staticValue) => () => Promise.resolve(staticValue);\n","export const memoize = (provider, isExpired, requiresRefresh) => {\n    let resolved;\n    let pending;\n    let hasResult;\n    let isConstant = false;\n    const coalesceProvider = async () => {\n        if (!pending) {\n            pending = provider();\n        }\n        try {\n            resolved = await pending;\n            hasResult = true;\n            isConstant = false;\n        }\n        finally {\n            pending = undefined;\n        }\n        return resolved;\n    };\n    if (isExpired === undefined) {\n        return async (options) => {\n            if (!hasResult || options?.forceRefresh) {\n                resolved = await coalesceProvider();\n            }\n            return resolved;\n        };\n    }\n    return async (options) => {\n        if (!hasResult || options?.forceRefresh) {\n            resolved = await coalesceProvider();\n        }\n        if (isConstant) {\n            return resolved;\n        }\n        if (requiresRefresh && !requiresRefresh(resolved)) {\n            isConstant = true;\n            return resolved;\n        }\n        if (isExpired(resolved)) {\n            await coalesceProvider();\n            return resolved;\n        }\n        return resolved;\n    };\n};\n","const SHORT_TO_HEX = {};\nconst HEX_TO_SHORT = {};\nfor (let i = 0; i < 256; i++) {\n    let encodedByte = i.toString(16).toLowerCase();\n    if (encodedByte.length === 1) {\n        encodedByte = `0${encodedByte}`;\n    }\n    SHORT_TO_HEX[i] = encodedByte;\n    HEX_TO_SHORT[encodedByte] = i;\n}\nexport function fromHex(encoded) {\n    if (encoded.length % 2 !== 0) {\n        throw new Error(\"Hex encoded strings must have an even number length\");\n    }\n    const out = new Uint8Array(encoded.length / 2);\n    for (let i = 0; i < encoded.length; i += 2) {\n        const encodedByte = encoded.slice(i, i + 2).toLowerCase();\n        if (encodedByte in HEX_TO_SHORT) {\n            out[i / 2] = HEX_TO_SHORT[encodedByte];\n        }\n        else {\n            throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);\n        }\n    }\n    return out;\n}\nexport function toHex(bytes) {\n    let out = \"\";\n    for (let i = 0; i < bytes.byteLength; i++) {\n        out += SHORT_TO_HEX[bytes[i]];\n    }\n    return out;\n}\n","export const isArrayBuffer = (arg) => (typeof ArrayBuffer === \"function\" && arg instanceof ArrayBuffer) ||\n    Object.prototype.toString.call(arg) === \"[object ArrayBuffer]\";\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"buffer\");","import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { Buffer } from \"buffer\";\nexport const fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {\n    if (!isArrayBuffer(input)) {\n        throw new TypeError(`The \"input\" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);\n    }\n    return Buffer.from(input, offset, length);\n};\nexport const fromString = (input, encoding) => {\n    if (typeof input !== \"string\") {\n        throw new TypeError(`The \"input\" argument must be of type string. Received type ${typeof input} (${input})`);\n    }\n    return encoding ? Buffer.from(input, encoding) : Buffer.from(input);\n};\n","import { fromString } from \"@aws-sdk/util-buffer-from\";\nexport const fromUtf8 = (input) => {\n    const buf = fromString(input, \"utf8\");\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n};\n","import { fromUtf8 } from \"./fromUtf8\";\nexport const toUint8Array = (data) => {\n    if (typeof data === \"string\") {\n        return fromUtf8(data);\n    }\n    if (ArrayBuffer.isView(data)) {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n    }\n    return new Uint8Array(data);\n};\n","import { fromArrayBuffer } from \"@aws-sdk/util-buffer-from\";\nexport const toUtf8 = (input) => fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString(\"utf8\");\n","export const ALGORITHM_QUERY_PARAM = \"X-Amz-Algorithm\";\nexport const CREDENTIAL_QUERY_PARAM = \"X-Amz-Credential\";\nexport const AMZ_DATE_QUERY_PARAM = \"X-Amz-Date\";\nexport const SIGNED_HEADERS_QUERY_PARAM = \"X-Amz-SignedHeaders\";\nexport const EXPIRES_QUERY_PARAM = \"X-Amz-Expires\";\nexport const SIGNATURE_QUERY_PARAM = \"X-Amz-Signature\";\nexport const TOKEN_QUERY_PARAM = \"X-Amz-Security-Token\";\nexport const REGION_SET_PARAM = \"X-Amz-Region-Set\";\nexport const AUTH_HEADER = \"authorization\";\nexport const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();\nexport const DATE_HEADER = \"date\";\nexport const GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];\nexport const SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();\nexport const SHA256_HEADER = \"x-amz-content-sha256\";\nexport const TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();\nexport const HOST_HEADER = \"host\";\nexport const ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    \"cache-control\": true,\n    connection: true,\n    expect: true,\n    from: true,\n    \"keep-alive\": true,\n    \"max-forwards\": true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    \"transfer-encoding\": true,\n    upgrade: true,\n    \"user-agent\": true,\n    \"x-amzn-trace-id\": true,\n};\nexport const PROXY_HEADER_PATTERN = /^proxy-/;\nexport const SEC_HEADER_PATTERN = /^sec-/;\nexport const UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];\nexport const ALGORITHM_IDENTIFIER = \"AWS4-HMAC-SHA256\";\nexport const ALGORITHM_IDENTIFIER_V4A = \"AWS4-ECDSA-P256-SHA256\";\nexport const EVENT_ALGORITHM_IDENTIFIER = \"AWS4-HMAC-SHA256-PAYLOAD\";\nexport const UNSIGNED_PAYLOAD = \"UNSIGNED-PAYLOAD\";\nexport const MAX_CACHE_SIZE = 50;\nexport const KEY_TYPE_IDENTIFIER = \"aws4_request\";\nexport const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;\n","import { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { toUint8Array } from \"@aws-sdk/util-utf8\";\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\nconst signingKeyCache = {};\nconst cacheQueue = [];\nexport const createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;\nexport const getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {\n    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);\n    const cacheKey = `${shortDate}:${region}:${service}:${toHex(credsHash)}:${credentials.sessionToken}`;\n    if (cacheKey in signingKeyCache) {\n        return signingKeyCache[cacheKey];\n    }\n    cacheQueue.push(cacheKey);\n    while (cacheQueue.length > MAX_CACHE_SIZE) {\n        delete signingKeyCache[cacheQueue.shift()];\n    }\n    let key = `AWS4${credentials.secretAccessKey}`;\n    for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {\n        key = await hmac(sha256Constructor, key, signable);\n    }\n    return (signingKeyCache[cacheKey] = key);\n};\nexport const clearCredentialCache = () => {\n    cacheQueue.length = 0;\n    Object.keys(signingKeyCache).forEach((cacheKey) => {\n        delete signingKeyCache[cacheKey];\n    });\n};\nconst hmac = (ctor, secret, data) => {\n    const hash = new ctor(secret);\n    hash.update(toUint8Array(data));\n    return hash.digest();\n};\n","import { ALWAYS_UNSIGNABLE_HEADERS, PROXY_HEADER_PATTERN, SEC_HEADER_PATTERN } from \"./constants\";\nexport const getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {\n    const canonical = {};\n    for (const headerName of Object.keys(headers).sort()) {\n        if (headers[headerName] == undefined) {\n            continue;\n        }\n        const canonicalHeaderName = headerName.toLowerCase();\n        if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS ||\n            unsignableHeaders?.has(canonicalHeaderName) ||\n            PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||\n            SEC_HEADER_PATTERN.test(canonicalHeaderName)) {\n            if (!signableHeaders || (signableHeaders && !signableHeaders.has(canonicalHeaderName))) {\n                continue;\n            }\n        }\n        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, \" \");\n    }\n    return canonical;\n};\n","export const escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);\nconst hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;\n","import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { toUint8Array } from \"@aws-sdk/util-utf8\";\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\nexport const getPayloadHash = async ({ headers, body }, hashConstructor) => {\n    for (const headerName of Object.keys(headers)) {\n        if (headerName.toLowerCase() === SHA256_HEADER) {\n            return headers[headerName];\n        }\n    }\n    if (body == undefined) {\n        return \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n    }\n    else if (typeof body === \"string\" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {\n        const hashCtor = new hashConstructor();\n        hashCtor.update(toUint8Array(body));\n        return toHex(await hashCtor.digest());\n    }\n    return UNSIGNED_PAYLOAD;\n};\n","export const cloneRequest = ({ headers, query, ...rest }) => ({\n    ...rest,\n    headers: { ...headers },\n    query: query ? cloneQuery(query) : undefined,\n});\nexport const cloneQuery = (query) => Object.keys(query).reduce((carry, paramName) => {\n    const param = query[paramName];\n    return {\n        ...carry,\n        [paramName]: Array.isArray(param) ? [...param] : param,\n    };\n}, {});\n","import { cloneRequest } from \"./cloneRequest\";\nimport { GENERATED_HEADERS } from \"./constants\";\nexport const prepareRequest = (request) => {\n    request = typeof request.clone === \"function\" ? request.clone() : cloneRequest(request);\n    for (const headerName of Object.keys(request.headers)) {\n        if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n            delete request.headers[headerName];\n        }\n    }\n    return request;\n};\n","export const iso8601 = (time) => toDate(time)\n    .toISOString()\n    .replace(/\\.\\d{3}Z$/, \"Z\");\nexport const toDate = (time) => {\n    if (typeof time === \"number\") {\n        return new Date(time * 1000);\n    }\n    if (typeof time === \"string\") {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000);\n        }\n        return new Date(time);\n    }\n    return time;\n};\n","import { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { normalizeProvider } from \"@aws-sdk/util-middleware\";\nimport { toUint8Array } from \"@aws-sdk/util-utf8\";\nimport { ALGORITHM_IDENTIFIER, ALGORITHM_QUERY_PARAM, AMZ_DATE_HEADER, AMZ_DATE_QUERY_PARAM, AUTH_HEADER, CREDENTIAL_QUERY_PARAM, EVENT_ALGORITHM_IDENTIFIER, EXPIRES_QUERY_PARAM, MAX_PRESIGNED_TTL, SHA256_HEADER, SIGNATURE_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, TOKEN_HEADER, TOKEN_QUERY_PARAM, } from \"./constants\";\nimport { createScope, getSigningKey } from \"./credentialDerivation\";\nimport { getCanonicalHeaders } from \"./getCanonicalHeaders\";\nimport { getCanonicalQuery } from \"./getCanonicalQuery\";\nimport { getPayloadHash } from \"./getPayloadHash\";\nimport { hasHeader } from \"./headerUtil\";\nimport { moveHeadersToQuery } from \"./moveHeadersToQuery\";\nimport { prepareRequest } from \"./prepareRequest\";\nimport { iso8601 } from \"./utilDate\";\nexport class SignatureV4 {\n    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true, }) {\n        this.service = service;\n        this.sha256 = sha256;\n        this.uriEscapePath = uriEscapePath;\n        this.applyChecksum = typeof applyChecksum === \"boolean\" ? applyChecksum : true;\n        this.regionProvider = normalizeProvider(region);\n        this.credentialProvider = normalizeProvider(credentials);\n    }\n    async presign(originalRequest, options = {}) {\n        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, } = options;\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const { longDate, shortDate } = formatDate(signingDate);\n        if (expiresIn > MAX_PRESIGNED_TTL) {\n            return Promise.reject(\"Signature version 4 presigned URLs\" + \" must have an expiration date less than one week in\" + \" the future\");\n        }\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders });\n        if (credentials.sessionToken) {\n            request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;\n        }\n        request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;\n        request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;\n        request.query[AMZ_DATE_QUERY_PARAM] = longDate;\n        request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);\n        request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));\n        return request;\n    }\n    async sign(toSign, options) {\n        if (typeof toSign === \"string\") {\n            return this.signString(toSign, options);\n        }\n        else if (toSign.headers && toSign.payload) {\n            return this.signEvent(toSign, options);\n        }\n        else {\n            return this.signRequest(toSign, options);\n        }\n    }\n    async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {\n        const region = signingRegion ?? (await this.regionProvider());\n        const { shortDate, longDate } = formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);\n        const hash = new this.sha256();\n        hash.update(headers);\n        const hashedHeaders = toHex(await hash.digest());\n        const stringToSign = [\n            EVENT_ALGORITHM_IDENTIFIER,\n            longDate,\n            scope,\n            priorSignature,\n            hashedHeaders,\n            hashedPayload,\n        ].join(\"\\n\");\n        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });\n    }\n    async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const { shortDate } = formatDate(signingDate);\n        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));\n        hash.update(toUint8Array(stringToSign));\n        return toHex(await hash.digest());\n    }\n    async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService, } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const request = prepareRequest(requestToSign);\n        const { longDate, shortDate } = formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        request.headers[AMZ_DATE_HEADER] = longDate;\n        if (credentials.sessionToken) {\n            request.headers[TOKEN_HEADER] = credentials.sessionToken;\n        }\n        const payloadHash = await getPayloadHash(request, this.sha256);\n        if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {\n            request.headers[SHA256_HEADER] = payloadHash;\n        }\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));\n        request.headers[AUTH_HEADER] =\n            `${ALGORITHM_IDENTIFIER} ` +\n                `Credential=${credentials.accessKeyId}/${scope}, ` +\n                `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` +\n                `Signature=${signature}`;\n        return request;\n    }\n    createCanonicalRequest(request, canonicalHeaders, payloadHash) {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort();\n        return `${request.method}\n${this.getCanonicalPath(request)}\n${getCanonicalQuery(request)}\n${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join(\"\\n\")}\n\n${sortedHeaders.join(\";\")}\n${payloadHash}`;\n    }\n    async createStringToSign(longDate, credentialScope, canonicalRequest) {\n        const hash = new this.sha256();\n        hash.update(toUint8Array(canonicalRequest));\n        const hashedRequest = await hash.digest();\n        return `${ALGORITHM_IDENTIFIER}\n${longDate}\n${credentialScope}\n${toHex(hashedRequest)}`;\n    }\n    getCanonicalPath({ path }) {\n        if (this.uriEscapePath) {\n            const normalizedPathSegments = [];\n            for (const pathSegment of path.split(\"/\")) {\n                if (pathSegment?.length === 0)\n                    continue;\n                if (pathSegment === \".\")\n                    continue;\n                if (pathSegment === \"..\") {\n                    normalizedPathSegments.pop();\n                }\n                else {\n                    normalizedPathSegments.push(pathSegment);\n                }\n            }\n            const normalizedPath = `${path?.startsWith(\"/\") ? \"/\" : \"\"}${normalizedPathSegments.join(\"/\")}${normalizedPathSegments.length > 0 && path?.endsWith(\"/\") ? \"/\" : \"\"}`;\n            const doubleEncoded = encodeURIComponent(normalizedPath);\n            return doubleEncoded.replace(/%2F/g, \"/\");\n        }\n        return path;\n    }\n    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {\n        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);\n        const hash = new this.sha256(await keyPromise);\n        hash.update(toUint8Array(stringToSign));\n        return toHex(await hash.digest());\n    }\n    getSigningKey(credentials, region, shortDate, service) {\n        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n    }\n    validateResolvedCredentials(credentials) {\n        if (typeof credentials !== \"object\" ||\n            typeof credentials.accessKeyId !== \"string\" ||\n            typeof credentials.secretAccessKey !== \"string\") {\n            throw new Error(\"Resolved credential object is not valid\");\n        }\n    }\n}\nconst formatDate = (now) => {\n    const longDate = iso8601(now).replace(/[\\-:]/g, \"\");\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    };\n};\nconst getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(\";\");\n","import { cloneRequest } from \"./cloneRequest\";\nexport const moveHeadersToQuery = (request, options = {}) => {\n    const { headers, query = {} } = typeof request.clone === \"function\" ? request.clone() : cloneRequest(request);\n    for (const name of Object.keys(headers)) {\n        const lname = name.toLowerCase();\n        if (lname.slice(0, 6) === \"x-amz-\" && !options.unhoistableHeaders?.has(lname)) {\n            query[name] = headers[name];\n            delete headers[name];\n        }\n    }\n    return {\n        ...request,\n        headers,\n        query,\n    };\n};\n","export const hasHeader = (soughtHeader, headers) => {\n    soughtHeader = soughtHeader.toLowerCase();\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true;\n        }\n    }\n    return false;\n};\nexport const getHeaderValue = (soughtHeader, headers) => {\n    soughtHeader = soughtHeader.toLowerCase();\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return headers[headerName];\n        }\n    }\n    return undefined;\n};\nexport const deleteHeader = (soughtHeader, headers) => {\n    soughtHeader = soughtHeader.toLowerCase();\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            delete headers[headerName];\n        }\n    }\n};\n","import { escapeUri } from \"@aws-sdk/util-uri-escape\";\nimport { SIGNATURE_HEADER } from \"./constants\";\nexport const getCanonicalQuery = ({ query = {} }) => {\n    const keys = [];\n    const serialized = {};\n    for (const key of Object.keys(query).sort()) {\n        if (key.toLowerCase() === SIGNATURE_HEADER) {\n            continue;\n        }\n        keys.push(key);\n        const value = query[key];\n        if (typeof value === \"string\") {\n            serialized[key] = `${escapeUri(key)}=${escapeUri(value)}`;\n        }\n        else if (Array.isArray(value)) {\n            serialized[key] = value\n                .slice(0)\n                .sort()\n                .reduce((encoded, value) => encoded.concat([`${escapeUri(key)}=${escapeUri(value)}`]), [])\n                .join(\"&\");\n        }\n    }\n    return keys\n        .map((key) => serialized[key])\n        .filter((serialized) => serialized)\n        .join(\"&\");\n};\n","import { memoize } from \"@aws-sdk/property-provider\";\nimport { SignatureV4 } from \"@aws-sdk/signature-v4\";\nimport { normalizeProvider } from \"@aws-sdk/util-middleware\";\nconst CREDENTIAL_EXPIRE_WINDOW = 300000;\nexport const resolveAwsAuthConfig = (input) => {\n    const normalizedCreds = input.credentials\n        ? normalizeCredentialProvider(input.credentials)\n        : input.credentialDefaultProvider(input);\n    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;\n    let signer;\n    if (input.signer) {\n        signer = normalizeProvider(input.signer);\n    }\n    else if (input.regionInfoProvider) {\n        signer = () => normalizeProvider(input.region)()\n            .then(async (region) => [\n            (await input.regionInfoProvider(region, {\n                useFipsEndpoint: await input.useFipsEndpoint(),\n                useDualstackEndpoint: await input.useDualstackEndpoint(),\n            })) || {},\n            region,\n        ])\n            .then(([regionInfo, region]) => {\n            const { signingRegion, signingService } = regionInfo;\n            input.signingRegion = input.signingRegion || signingRegion || region;\n            input.signingName = input.signingName || signingService || input.serviceId;\n            const params = {\n                ...input,\n                credentials: normalizedCreds,\n                region: input.signingRegion,\n                service: input.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const SignerCtor = input.signerConstructor || SignatureV4;\n            return new SignerCtor(params);\n        });\n    }\n    else {\n        signer = async (authScheme) => {\n            authScheme = Object.assign({}, {\n                name: \"sigv4\",\n                signingName: input.signingName || input.defaultSigningName,\n                signingRegion: await normalizeProvider(input.region)(),\n                properties: {},\n            }, authScheme);\n            const signingRegion = authScheme.signingRegion;\n            const signingService = authScheme.signingName;\n            input.signingRegion = input.signingRegion || signingRegion;\n            input.signingName = input.signingName || signingService || input.serviceId;\n            const params = {\n                ...input,\n                credentials: normalizedCreds,\n                region: input.signingRegion,\n                service: input.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const SignerCtor = input.signerConstructor || SignatureV4;\n            return new SignerCtor(params);\n        };\n    }\n    return {\n        ...input,\n        systemClockOffset,\n        signingEscapePath,\n        credentials: normalizedCreds,\n        signer,\n    };\n};\nexport const resolveSigV4AuthConfig = (input) => {\n    const normalizedCreds = input.credentials\n        ? normalizeCredentialProvider(input.credentials)\n        : input.credentialDefaultProvider(input);\n    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;\n    let signer;\n    if (input.signer) {\n        signer = normalizeProvider(input.signer);\n    }\n    else {\n        signer = normalizeProvider(new SignatureV4({\n            credentials: normalizedCreds,\n            region: input.region,\n            service: input.signingName,\n            sha256,\n            uriEscapePath: signingEscapePath,\n        }));\n    }\n    return {\n        ...input,\n        systemClockOffset,\n        signingEscapePath,\n        credentials: normalizedCreds,\n        signer,\n    };\n};\nconst normalizeCredentialProvider = (credentials) => {\n    if (typeof credentials === \"function\") {\n        return memoize(credentials, (credentials) => credentials.expiration !== undefined &&\n            credentials.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials) => credentials.expiration !== undefined);\n    }\n    return normalizeProvider(credentials);\n};\n","export const getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);\n","import { isClockSkewed } from \"./isClockSkewed\";\nexport const getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {\n    const clockTimeInMs = Date.parse(clockTime);\n    if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {\n        return clockTimeInMs - Date.now();\n    }\n    return currentSystemClockOffset;\n};\n","import { getSkewCorrectedDate } from \"./getSkewCorrectedDate\";\nexport const isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 300000;\n","import { HttpRequest, HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { getSkewCorrectedDate } from \"./utils/getSkewCorrectedDate\";\nimport { getUpdatedSystemClockOffset } from \"./utils/getUpdatedSystemClockOffset\";\nexport const awsAuthMiddleware = (options) => (next, context) => async function (args) {\n    if (!HttpRequest.isInstance(args.request))\n        return next(args);\n    const authScheme = context.endpointV2?.properties?.authSchemes?.[0];\n    const multiRegionOverride = authScheme?.name === \"sigv4a\" ? authScheme?.signingRegionSet?.join(\",\") : undefined;\n    const signer = await options.signer(authScheme);\n    const output = await next({\n        ...args,\n        request: await signer.sign(args.request, {\n            signingDate: getSkewCorrectedDate(options.systemClockOffset),\n            signingRegion: multiRegionOverride || context[\"signing_region\"],\n            signingService: context[\"signing_service\"],\n        }),\n    }).catch((error) => {\n        const serverTime = error.ServerTime ?? getDateHeader(error.$response);\n        if (serverTime) {\n            options.systemClockOffset = getUpdatedSystemClockOffset(serverTime, options.systemClockOffset);\n        }\n        throw error;\n    });\n    const dateHeader = getDateHeader(output.response);\n    if (dateHeader) {\n        options.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, options.systemClockOffset);\n    }\n    return output;\n};\nconst getDateHeader = (response) => HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : undefined;\nexport const awsAuthMiddlewareOptions = {\n    name: \"awsAuthMiddleware\",\n    tags: [\"SIGNATURE\", \"AWSAUTH\"],\n    relation: \"after\",\n    toMiddleware: \"retryMiddleware\",\n    override: true,\n};\nexport const getAwsAuthPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n    },\n});\nexport const getSigV4AuthPlugin = getAwsAuthPlugin;\n","export function resolveUserAgentConfig(input) {\n    return {\n        ...input,\n        customUserAgent: typeof input.customUserAgent === \"string\" ? [[input.customUserAgent]] : input.customUserAgent,\n    };\n}\n","import partitionsInfo from \"./partitions.json\";\nlet selectedPartitionsInfo = partitionsInfo;\nlet selectedUserAgentPrefix = \"\";\nexport const partition = (value) => {\n    const { partitions } = selectedPartitionsInfo;\n    for (const partition of partitions) {\n        const { regions, outputs } = partition;\n        for (const [region, regionData] of Object.entries(regions)) {\n            if (region === value) {\n                return {\n                    ...outputs,\n                    ...regionData,\n                };\n            }\n        }\n    }\n    for (const partition of partitions) {\n        const { regionRegex, outputs } = partition;\n        if (new RegExp(regionRegex).test(value)) {\n            return {\n                ...outputs,\n            };\n        }\n    }\n    const DEFAULT_PARTITION = partitions.find((partition) => partition.id === \"aws\");\n    if (!DEFAULT_PARTITION) {\n        throw new Error(\"Provided region was not found in the partition array or regex,\" +\n            \" and default partition with id 'aws' doesn't exist.\");\n    }\n    return {\n        ...DEFAULT_PARTITION.outputs,\n    };\n};\nexport const setPartitionInfo = (partitionsInfo, userAgentPrefix = \"\") => {\n    selectedPartitionsInfo = partitionsInfo;\n    selectedUserAgentPrefix = userAgentPrefix;\n};\nexport const useDefaultPartitionInfo = () => {\n    setPartitionInfo(partitionsInfo, \"\");\n};\nexport const getUserAgentPrefix = () => selectedUserAgentPrefix;\n","export const debugId = \"endpoints\";\n","export function toDebugString(input) {\n    if (typeof input !== \"object\" || input == null) {\n        return input;\n    }\n    if (\"ref\" in input) {\n        return `$${toDebugString(input.ref)}`;\n    }\n    if (\"fn\" in input) {\n        return `${input.fn}(${(input.argv || []).map(toDebugString).join(\", \")})`;\n    }\n    return JSON.stringify(input, null, 2);\n}\n","export class EndpointError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"EndpointError\";\n    }\n}\n","const IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}$`);\nexport const isIpAddress = (value) => IP_V4_REGEX.test(value) || (value.startsWith(\"[\") && value.endsWith(\"]\"));\n","const VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);\nexport const isValidHostLabel = (value, allowSubDomains = false) => {\n    if (!allowSubDomains) {\n        return VALID_HOST_LABEL_REGEX.test(value);\n    }\n    const labels = value.split(\".\");\n    for (const label of labels) {\n        if (!isValidHostLabel(label)) {\n            return false;\n        }\n    }\n    return true;\n};\n","import { isIpAddress } from \"../isIpAddress\";\nimport { isValidHostLabel } from \"../isValidHostLabel\";\nexport const isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {\n    if (allowSubDomains) {\n        for (const label of value.split(\".\")) {\n            if (!isVirtualHostableS3Bucket(label)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    if (!isValidHostLabel(value)) {\n        return false;\n    }\n    if (value.length < 3 || value.length > 63) {\n        return false;\n    }\n    if (value !== value.toLowerCase()) {\n        return false;\n    }\n    if (isIpAddress(value)) {\n        return false;\n    }\n    return true;\n};\n","export const parseArn = (value) => {\n    const segments = value.split(\":\");\n    if (segments.length < 6)\n        return null;\n    const [arn, partition, service, region, accountId, ...resourceId] = segments;\n    if (arn !== \"arn\" || partition === \"\" || service === \"\" || resourceId[0] === \"\")\n        return null;\n    return {\n        partition,\n        service,\n        region,\n        accountId,\n        resourceId: resourceId[0].includes(\"/\") ? resourceId[0].split(\"/\") : resourceId,\n    };\n};\n","export const booleanEquals = (value1, value2) => value1 === value2;\n","import { EndpointError } from \"../types\";\nimport { getAttrPathList } from \"./getAttrPathList\";\nexport const getAttr = (value, path) => getAttrPathList(path).reduce((acc, index) => {\n    if (typeof acc !== \"object\") {\n        throw new EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);\n    }\n    else if (Array.isArray(acc)) {\n        return acc[parseInt(index)];\n    }\n    return acc[index];\n}, value);\n","import { EndpointError } from \"../types\";\nexport const getAttrPathList = (path) => {\n    const parts = path.split(\".\");\n    const pathList = [];\n    for (const part of parts) {\n        const squareBracketIndex = part.indexOf(\"[\");\n        if (squareBracketIndex !== -1) {\n            if (part.indexOf(\"]\") !== part.length - 1) {\n                throw new EndpointError(`Path: '${path}' does not end with ']'`);\n            }\n            const arrayIndex = part.slice(squareBracketIndex + 1, -1);\n            if (Number.isNaN(parseInt(arrayIndex))) {\n                throw new EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);\n            }\n            if (squareBracketIndex !== 0) {\n                pathList.push(part.slice(0, squareBracketIndex));\n            }\n            pathList.push(arrayIndex);\n        }\n        else {\n            pathList.push(part);\n        }\n    }\n    return pathList;\n};\n","export const isSet = (value) => value != null;\n","export const not = (value) => !value;\n","export var HttpAuthLocation;\n(function (HttpAuthLocation) {\n    HttpAuthLocation[\"HEADER\"] = \"header\";\n    HttpAuthLocation[\"QUERY\"] = \"query\";\n})(HttpAuthLocation || (HttpAuthLocation = {}));\n","export var HostAddressType;\n(function (HostAddressType) {\n    HostAddressType[\"AAAA\"] = \"AAAA\";\n    HostAddressType[\"A\"] = \"A\";\n})(HostAddressType || (HostAddressType = {}));\n","export var EndpointURLScheme;\n(function (EndpointURLScheme) {\n    EndpointURLScheme[\"HTTP\"] = \"http\";\n    EndpointURLScheme[\"HTTPS\"] = \"https\";\n})(EndpointURLScheme || (EndpointURLScheme = {}));\n","export var RequestHandlerProtocol;\n(function (RequestHandlerProtocol) {\n    RequestHandlerProtocol[\"HTTP_0_9\"] = \"http/0.9\";\n    RequestHandlerProtocol[\"HTTP_1_0\"] = \"http/1.0\";\n    RequestHandlerProtocol[\"TDS_8_0\"] = \"tds/8.0\";\n})(RequestHandlerProtocol || (RequestHandlerProtocol = {}));\n","import { EndpointURLScheme } from \"@aws-sdk/types\";\nimport { isIpAddress } from \"./isIpAddress\";\nconst DEFAULT_PORTS = {\n    [EndpointURLScheme.HTTP]: 80,\n    [EndpointURLScheme.HTTPS]: 443,\n};\nexport const parseURL = (value) => {\n    const whatwgURL = (() => {\n        try {\n            if (value instanceof URL) {\n                return value;\n            }\n            if (typeof value === \"object\" && \"hostname\" in value) {\n                const { hostname, port, protocol = \"\", path = \"\", query = {} } = value;\n                const url = new URL(`${protocol}//${hostname}${port ? `:${port}` : \"\"}${path}`);\n                url.search = Object.entries(query)\n                    .map(([k, v]) => `${k}=${v}`)\n                    .join(\"&\");\n                return url;\n            }\n            return new URL(value);\n        }\n        catch (error) {\n            return null;\n        }\n    })();\n    if (!whatwgURL) {\n        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);\n        return null;\n    }\n    const urlString = whatwgURL.href;\n    const { host, hostname, pathname, protocol, search } = whatwgURL;\n    if (search) {\n        return null;\n    }\n    const scheme = protocol.slice(0, -1);\n    if (!Object.values(EndpointURLScheme).includes(scheme)) {\n        return null;\n    }\n    const isIp = isIpAddress(hostname);\n    const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) ||\n        (typeof value === \"string\" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`));\n    const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;\n    return {\n        scheme,\n        authority,\n        path: pathname,\n        normalizedPath: pathname.endsWith(\"/\") ? pathname : `${pathname}/`,\n        isIp,\n    };\n};\n","export const stringEquals = (value1, value2) => value1 === value2;\n","export const substring = (input, start, stop, reverse) => {\n    if (start >= stop || input.length < stop) {\n        return null;\n    }\n    if (!reverse) {\n        return input.substring(start, stop);\n    }\n    return input.substring(input.length - stop, input.length - start);\n};\n","export const uriEncode = (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);\n","import { getAttr } from \"../lib\";\nexport const evaluateTemplate = (template, options) => {\n    const evaluatedTemplateArr = [];\n    const templateContext = {\n        ...options.endpointParams,\n        ...options.referenceRecord,\n    };\n    let currentIndex = 0;\n    while (currentIndex < template.length) {\n        const openingBraceIndex = template.indexOf(\"{\", currentIndex);\n        if (openingBraceIndex === -1) {\n            evaluatedTemplateArr.push(template.slice(currentIndex));\n            break;\n        }\n        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));\n        const closingBraceIndex = template.indexOf(\"}\", openingBraceIndex);\n        if (closingBraceIndex === -1) {\n            evaluatedTemplateArr.push(template.slice(openingBraceIndex));\n            break;\n        }\n        if (template[openingBraceIndex + 1] === \"{\" && template[closingBraceIndex + 1] === \"}\") {\n            evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));\n            currentIndex = closingBraceIndex + 2;\n        }\n        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);\n        if (parameterName.includes(\"#\")) {\n            const [refName, attrName] = parameterName.split(\"#\");\n            evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));\n        }\n        else {\n            evaluatedTemplateArr.push(templateContext[parameterName]);\n        }\n        currentIndex = closingBraceIndex + 1;\n    }\n    return evaluatedTemplateArr.join(\"\");\n};\n","import { EndpointError } from \"../types\";\nimport { callFunction } from \"./callFunction\";\nimport { evaluateTemplate } from \"./evaluateTemplate\";\nimport { getReferenceValue } from \"./getReferenceValue\";\nexport const evaluateExpression = (obj, keyName, options) => {\n    if (typeof obj === \"string\") {\n        return evaluateTemplate(obj, options);\n    }\n    else if (obj[\"fn\"]) {\n        return callFunction(obj, options);\n    }\n    else if (obj[\"ref\"]) {\n        return getReferenceValue(obj, options);\n    }\n    throw new EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);\n};\n","export const getReferenceValue = ({ ref }, options) => {\n    const referenceRecord = {\n        ...options.endpointParams,\n        ...options.referenceRecord,\n    };\n    return referenceRecord[ref];\n};\n","import * as lib from \"../lib\";\nimport { evaluateExpression } from \"./evaluateExpression\";\nexport const callFunction = ({ fn, argv }, options) => {\n    const evaluatedArgs = argv.map((arg) => [\"boolean\", \"number\"].includes(typeof arg) ? arg : evaluateExpression(arg, \"arg\", options));\n    return fn.split(\".\").reduce((acc, key) => acc[key], lib)(...evaluatedArgs);\n};\n","import { debugId, toDebugString } from \"../debug\";\nimport { EndpointError } from \"../types\";\nimport { callFunction } from \"./callFunction\";\nexport const evaluateCondition = ({ assign, ...fnArgs }, options) => {\n    if (assign && assign in options.referenceRecord) {\n        throw new EndpointError(`'${assign}' is already defined in Reference Record.`);\n    }\n    const value = callFunction(fnArgs, options);\n    options.logger?.debug?.(debugId, `evaluateCondition: ${toDebugString(fnArgs)} = ${toDebugString(value)}`);\n    return {\n        result: value === \"\" ? true : !!value,\n        ...(assign != null && { toAssign: { name: assign, value } }),\n    };\n};\n","import { debugId, toDebugString } from \"../debug\";\nimport { evaluateCondition } from \"./evaluateCondition\";\nexport const evaluateConditions = (conditions = [], options) => {\n    const conditionsReferenceRecord = {};\n    for (const condition of conditions) {\n        const { result, toAssign } = evaluateCondition(condition, {\n            ...options,\n            referenceRecord: {\n                ...options.referenceRecord,\n                ...conditionsReferenceRecord,\n            },\n        });\n        if (!result) {\n            return { result };\n        }\n        if (toAssign) {\n            conditionsReferenceRecord[toAssign.name] = toAssign.value;\n            options.logger?.debug?.(debugId, `assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);\n        }\n    }\n    return { result: true, referenceRecord: conditionsReferenceRecord };\n};\n","import { EndpointError } from \"../types\";\nimport { evaluateExpression } from \"./evaluateExpression\";\nexport const getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({\n    ...acc,\n    [headerKey]: headerVal.map((headerValEntry) => {\n        const processedExpr = evaluateExpression(headerValEntry, \"Header value entry\", options);\n        if (typeof processedExpr !== \"string\") {\n            throw new EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);\n        }\n        return processedExpr;\n    }),\n}), {});\n","import { EndpointError } from \"../types\";\nimport { evaluateTemplate } from \"./evaluateTemplate\";\nimport { getEndpointProperties } from \"./getEndpointProperties\";\nexport const getEndpointProperty = (property, options) => {\n    if (Array.isArray(property)) {\n        return property.map((propertyEntry) => getEndpointProperty(propertyEntry, options));\n    }\n    switch (typeof property) {\n        case \"string\":\n            return evaluateTemplate(property, options);\n        case \"object\":\n            if (property === null) {\n                throw new EndpointError(`Unexpected endpoint property: ${property}`);\n            }\n            return getEndpointProperties(property, options);\n        case \"boolean\":\n            return property;\n        default:\n            throw new EndpointError(`Unexpected endpoint property type: ${typeof property}`);\n    }\n};\n","import { getEndpointProperty } from \"./getEndpointProperty\";\nexport const getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({\n    ...acc,\n    [propertyKey]: getEndpointProperty(propertyVal, options),\n}), {});\n","import { EndpointError } from \"../types\";\nimport { evaluateExpression } from \"./evaluateExpression\";\nexport const getEndpointUrl = (endpointUrl, options) => {\n    const expression = evaluateExpression(endpointUrl, \"Endpoint URL\", options);\n    if (typeof expression === \"string\") {\n        try {\n            return new URL(expression);\n        }\n        catch (error) {\n            console.error(`Failed to construct URL with ${expression}`, error);\n            throw error;\n        }\n    }\n    throw new EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);\n};\n","import { debugId, toDebugString } from \"../debug\";\nimport { evaluateConditions } from \"./evaluateConditions\";\nimport { getEndpointHeaders } from \"./getEndpointHeaders\";\nimport { getEndpointProperties } from \"./getEndpointProperties\";\nimport { getEndpointUrl } from \"./getEndpointUrl\";\nexport const evaluateEndpointRule = (endpointRule, options) => {\n    const { conditions, endpoint } = endpointRule;\n    const { result, referenceRecord } = evaluateConditions(conditions, options);\n    if (!result) {\n        return;\n    }\n    const endpointRuleOptions = {\n        ...options,\n        referenceRecord: { ...options.referenceRecord, ...referenceRecord },\n    };\n    const { url, properties, headers } = endpoint;\n    options.logger?.debug?.(debugId, `Resolving endpoint from template: ${toDebugString(endpoint)}`);\n    return {\n        ...(headers != undefined && {\n            headers: getEndpointHeaders(headers, endpointRuleOptions),\n        }),\n        ...(properties != undefined && {\n            properties: getEndpointProperties(properties, endpointRuleOptions),\n        }),\n        url: getEndpointUrl(url, endpointRuleOptions),\n    };\n};\n","import { EndpointError } from \"../types\";\nimport { evaluateConditions } from \"./evaluateConditions\";\nimport { evaluateExpression } from \"./evaluateExpression\";\nexport const evaluateErrorRule = (errorRule, options) => {\n    const { conditions, error } = errorRule;\n    const { result, referenceRecord } = evaluateConditions(conditions, options);\n    if (!result) {\n        return;\n    }\n    throw new EndpointError(evaluateExpression(error, \"Error\", {\n        ...options,\n        referenceRecord: { ...options.referenceRecord, ...referenceRecord },\n    }));\n};\n","import { evaluateConditions } from \"./evaluateConditions\";\nimport { evaluateRules } from \"./evaluateRules\";\nexport const evaluateTreeRule = (treeRule, options) => {\n    const { conditions, rules } = treeRule;\n    const { result, referenceRecord } = evaluateConditions(conditions, options);\n    if (!result) {\n        return;\n    }\n    return evaluateRules(rules, {\n        ...options,\n        referenceRecord: { ...options.referenceRecord, ...referenceRecord },\n    });\n};\n","import { EndpointError } from \"../types\";\nimport { evaluateEndpointRule } from \"./evaluateEndpointRule\";\nimport { evaluateErrorRule } from \"./evaluateErrorRule\";\nimport { evaluateTreeRule } from \"./evaluateTreeRule\";\nexport const evaluateRules = (rules, options) => {\n    for (const rule of rules) {\n        if (rule.type === \"endpoint\") {\n            const endpointOrUndefined = evaluateEndpointRule(rule, options);\n            if (endpointOrUndefined) {\n                return endpointOrUndefined;\n            }\n        }\n        else if (rule.type === \"error\") {\n            evaluateErrorRule(rule, options);\n        }\n        else if (rule.type === \"tree\") {\n            const endpointOrUndefined = evaluateTreeRule(rule, options);\n            if (endpointOrUndefined) {\n                return endpointOrUndefined;\n            }\n        }\n        else {\n            throw new EndpointError(`Unknown endpoint rule: ${rule}`);\n        }\n    }\n    throw new EndpointError(`Rules evaluation failed`);\n};\n","import { debugId, toDebugString } from \"./debug\";\nimport { EndpointError } from \"./types\";\nimport { evaluateRules } from \"./utils\";\nexport const resolveEndpoint = (ruleSetObject, options) => {\n    const { endpointParams, logger } = options;\n    const { parameters, rules } = ruleSetObject;\n    options.logger?.debug?.(debugId, `Initial EndpointParams: ${toDebugString(endpointParams)}`);\n    const paramsWithDefault = Object.entries(parameters)\n        .filter(([, v]) => v.default != null)\n        .map(([k, v]) => [k, v.default]);\n    if (paramsWithDefault.length > 0) {\n        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {\n            endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;\n        }\n    }\n    const requiredParams = Object.entries(parameters)\n        .filter(([, v]) => v.required)\n        .map(([k]) => k);\n    for (const requiredParam of requiredParams) {\n        if (endpointParams[requiredParam] == null) {\n            throw new EndpointError(`Missing required parameter: '${requiredParam}'`);\n        }\n    }\n    const endpoint = evaluateRules(rules, { endpointParams, logger, referenceRecord: {} });\n    if (options.endpointParams?.Endpoint) {\n        try {\n            const givenEndpoint = new URL(options.endpointParams.Endpoint);\n            const { protocol, port } = givenEndpoint;\n            endpoint.url.protocol = protocol;\n            endpoint.url.port = port;\n        }\n        catch (e) {\n        }\n    }\n    options.logger?.debug?.(debugId, `Resolved endpoint: ${toDebugString(endpoint)}`);\n    return endpoint;\n};\n","export const USER_AGENT = \"user-agent\";\nexport const X_AMZ_USER_AGENT = \"x-amz-user-agent\";\nexport const SPACE = \" \";\nexport const UA_ESCAPE_REGEX = /[^\\!\\#\\$\\%\\&\\'\\*\\+\\-\\.\\^\\_\\`\\|\\~\\d\\w]/g;\n","import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { getUserAgentPrefix } from \"@aws-sdk/util-endpoints\";\nimport { SPACE, UA_ESCAPE_REGEX, USER_AGENT, X_AMZ_USER_AGENT } from \"./constants\";\nexport const userAgentMiddleware = (options) => (next, context) => async (args) => {\n    const { request } = args;\n    if (!HttpRequest.isInstance(request))\n        return next(args);\n    const { headers } = request;\n    const userAgent = context?.userAgent?.map(escapeUserAgent) || [];\n    const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);\n    const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];\n    const prefix = getUserAgentPrefix();\n    const sdkUserAgentValue = (prefix ? [prefix] : [])\n        .concat([...defaultUserAgent, ...userAgent, ...customUserAgent])\n        .join(SPACE);\n    const normalUAValue = [\n        ...defaultUserAgent.filter((section) => section.startsWith(\"aws-sdk-\")),\n        ...customUserAgent,\n    ].join(SPACE);\n    if (options.runtime !== \"browser\") {\n        if (normalUAValue) {\n            headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT]\n                ? `${headers[USER_AGENT]} ${normalUAValue}`\n                : normalUAValue;\n        }\n        headers[USER_AGENT] = sdkUserAgentValue;\n    }\n    else {\n        headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;\n    }\n    return next({\n        ...args,\n        request,\n    });\n};\nconst escapeUserAgent = ([name, version]) => {\n    const prefixSeparatorIndex = name.indexOf(\"/\");\n    const prefix = name.substring(0, prefixSeparatorIndex);\n    let uaName = name.substring(prefixSeparatorIndex + 1);\n    if (prefix === \"api\") {\n        uaName = uaName.toLowerCase();\n    }\n    return [prefix, uaName, version]\n        .filter((item) => item && item.length > 0)\n        .map((item) => item?.replace(UA_ESCAPE_REGEX, \"_\"))\n        .join(\"/\");\n};\nexport const getUserAgentMiddlewareOptions = {\n    name: \"getUserAgentMiddleware\",\n    step: \"build\",\n    priority: \"low\",\n    tags: [\"SET_USER_AGENT\", \"USER_AGENT\"],\n    override: true,\n};\nexport const getUserAgentPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);\n    },\n});\n","export class NoOpLogger {\n    trace() { }\n    debug() { }\n    info() { }\n    warn() { }\n    error() { }\n}\n","export const constructStack = () => {\n    let absoluteEntries = [];\n    let relativeEntries = [];\n    const entriesNameSet = new Set();\n    const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] ||\n        priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]);\n    const removeByName = (toRemove) => {\n        let isRemoved = false;\n        const filterCb = (entry) => {\n            if (entry.name && entry.name === toRemove) {\n                isRemoved = true;\n                entriesNameSet.delete(toRemove);\n                return false;\n            }\n            return true;\n        };\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    };\n    const removeByReference = (toRemove) => {\n        let isRemoved = false;\n        const filterCb = (entry) => {\n            if (entry.middleware === toRemove) {\n                isRemoved = true;\n                if (entry.name)\n                    entriesNameSet.delete(entry.name);\n                return false;\n            }\n            return true;\n        };\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    };\n    const cloneTo = (toStack) => {\n        absoluteEntries.forEach((entry) => {\n            toStack.add(entry.middleware, { ...entry });\n        });\n        relativeEntries.forEach((entry) => {\n            toStack.addRelativeTo(entry.middleware, { ...entry });\n        });\n        return toStack;\n    };\n    const expandRelativeMiddlewareList = (from) => {\n        const expandedMiddlewareList = [];\n        from.before.forEach((entry) => {\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            }\n            else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        expandedMiddlewareList.push(from);\n        from.after.reverse().forEach((entry) => {\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            }\n            else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        return expandedMiddlewareList;\n    };\n    const getMiddlewareList = (debug = false) => {\n        const normalizedAbsoluteEntries = [];\n        const normalizedRelativeEntries = [];\n        const normalizedEntriesNameMap = {};\n        absoluteEntries.forEach((entry) => {\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: [],\n            };\n            if (normalizedEntry.name)\n                normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n            normalizedAbsoluteEntries.push(normalizedEntry);\n        });\n        relativeEntries.forEach((entry) => {\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: [],\n            };\n            if (normalizedEntry.name)\n                normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n            normalizedRelativeEntries.push(normalizedEntry);\n        });\n        normalizedRelativeEntries.forEach((entry) => {\n            if (entry.toMiddleware) {\n                const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n                if (toMiddleware === undefined) {\n                    if (debug) {\n                        return;\n                    }\n                    throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || \"anonymous\"} middleware ${entry.relation} ${entry.toMiddleware}`);\n                }\n                if (entry.relation === \"after\") {\n                    toMiddleware.after.push(entry);\n                }\n                if (entry.relation === \"before\") {\n                    toMiddleware.before.push(entry);\n                }\n            }\n        });\n        const mainChain = sort(normalizedAbsoluteEntries)\n            .map(expandRelativeMiddlewareList)\n            .reduce((wholeList, expendedMiddlewareList) => {\n            wholeList.push(...expendedMiddlewareList);\n            return wholeList;\n        }, []);\n        return mainChain;\n    };\n    const stack = {\n        add: (middleware, options = {}) => {\n            const { name, override } = options;\n            const entry = {\n                step: \"initialize\",\n                priority: \"normal\",\n                middleware,\n                ...options,\n            };\n            if (name) {\n                if (entriesNameSet.has(name)) {\n                    if (!override)\n                        throw new Error(`Duplicate middleware name '${name}'`);\n                    const toOverrideIndex = absoluteEntries.findIndex((entry) => entry.name === name);\n                    const toOverride = absoluteEntries[toOverrideIndex];\n                    if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n                        throw new Error(`\"${name}\" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be ` +\n                            `overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);\n                    }\n                    absoluteEntries.splice(toOverrideIndex, 1);\n                }\n                entriesNameSet.add(name);\n            }\n            absoluteEntries.push(entry);\n        },\n        addRelativeTo: (middleware, options) => {\n            const { name, override } = options;\n            const entry = {\n                middleware,\n                ...options,\n            };\n            if (name) {\n                if (entriesNameSet.has(name)) {\n                    if (!override)\n                        throw new Error(`Duplicate middleware name '${name}'`);\n                    const toOverrideIndex = relativeEntries.findIndex((entry) => entry.name === name);\n                    const toOverride = relativeEntries[toOverrideIndex];\n                    if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n                        throw new Error(`\"${name}\" middleware ${toOverride.relation} \"${toOverride.toMiddleware}\" middleware cannot be overridden ` +\n                            `by same-name middleware ${entry.relation} \"${entry.toMiddleware}\" middleware.`);\n                    }\n                    relativeEntries.splice(toOverrideIndex, 1);\n                }\n                entriesNameSet.add(name);\n            }\n            relativeEntries.push(entry);\n        },\n        clone: () => cloneTo(constructStack()),\n        use: (plugin) => {\n            plugin.applyToStack(stack);\n        },\n        remove: (toRemove) => {\n            if (typeof toRemove === \"string\")\n                return removeByName(toRemove);\n            else\n                return removeByReference(toRemove);\n        },\n        removeByTag: (toRemove) => {\n            let isRemoved = false;\n            const filterCb = (entry) => {\n                const { tags, name } = entry;\n                if (tags && tags.includes(toRemove)) {\n                    if (name)\n                        entriesNameSet.delete(name);\n                    isRemoved = true;\n                    return false;\n                }\n                return true;\n            };\n            absoluteEntries = absoluteEntries.filter(filterCb);\n            relativeEntries = relativeEntries.filter(filterCb);\n            return isRemoved;\n        },\n        concat: (from) => {\n            const cloned = cloneTo(constructStack());\n            cloned.use(from);\n            return cloned;\n        },\n        applyToStack: cloneTo,\n        identify: () => {\n            return getMiddlewareList(true).map((mw) => {\n                return mw.name + \": \" + (mw.tags || []).join(\",\");\n            });\n        },\n        resolve: (handler, context) => {\n            for (const middleware of getMiddlewareList()\n                .map((entry) => entry.middleware)\n                .reverse()) {\n                handler = middleware(handler, context);\n            }\n            return handler;\n        },\n    };\n    return stack;\n};\nconst stepWeights = {\n    initialize: 5,\n    serialize: 4,\n    build: 3,\n    finalizeRequest: 2,\n    deserialize: 1,\n};\nconst priorityWeights = {\n    high: 3,\n    normal: 2,\n    low: 1,\n};\n","import { constructStack } from \"@aws-sdk/middleware-stack\";\nexport class Client {\n    constructor(config) {\n        this.middlewareStack = constructStack();\n        this.config = config;\n    }\n    send(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    }\n    destroy() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    }\n}\n","import { constructStack } from \"@aws-sdk/middleware-stack\";\nexport class Command {\n    constructor() {\n        this.middlewareStack = constructStack();\n    }\n}\n","export const SENSITIVE_STRING = \"***SensitiveInformation***\";\n","export const parseBoolean = (value) => {\n    switch (value) {\n        case \"true\":\n            return true;\n        case \"false\":\n            return false;\n        default:\n            throw new Error(`Unable to parse boolean value \"${value}\"`);\n    }\n};\nexport const expectBoolean = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"number\") {\n        if (value === 0 || value === 1) {\n            logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));\n        }\n        if (value === 0) {\n            return false;\n        }\n        if (value === 1) {\n            return true;\n        }\n    }\n    if (typeof value === \"string\") {\n        const lower = value.toLowerCase();\n        if (lower === \"false\" || lower === \"true\") {\n            logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));\n        }\n        if (lower === \"false\") {\n            return false;\n        }\n        if (lower === \"true\") {\n            return true;\n        }\n    }\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);\n};\nexport const expectNumber = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"string\") {\n        const parsed = parseFloat(value);\n        if (!Number.isNaN(parsed)) {\n            if (String(parsed) !== String(value)) {\n                logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));\n            }\n            return parsed;\n        }\n    }\n    if (typeof value === \"number\") {\n        return value;\n    }\n    throw new TypeError(`Expected number, got ${typeof value}: ${value}`);\n};\nconst MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));\nexport const expectFloat32 = (value) => {\n    const expected = expectNumber(value);\n    if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {\n        if (Math.abs(expected) > MAX_FLOAT) {\n            throw new TypeError(`Expected 32-bit float, got ${value}`);\n        }\n    }\n    return expected;\n};\nexport const expectLong = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (Number.isInteger(value) && !Number.isNaN(value)) {\n        return value;\n    }\n    throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);\n};\nexport const expectInt = expectLong;\nexport const expectInt32 = (value) => expectSizedInt(value, 32);\nexport const expectShort = (value) => expectSizedInt(value, 16);\nexport const expectByte = (value) => expectSizedInt(value, 8);\nconst expectSizedInt = (value, size) => {\n    const expected = expectLong(value);\n    if (expected !== undefined && castInt(expected, size) !== expected) {\n        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);\n    }\n    return expected;\n};\nconst castInt = (value, size) => {\n    switch (size) {\n        case 32:\n            return Int32Array.of(value)[0];\n        case 16:\n            return Int16Array.of(value)[0];\n        case 8:\n            return Int8Array.of(value)[0];\n    }\n};\nexport const expectNonNull = (value, location) => {\n    if (value === null || value === undefined) {\n        if (location) {\n            throw new TypeError(`Expected a non-null value for ${location}`);\n        }\n        throw new TypeError(\"Expected a non-null value\");\n    }\n    return value;\n};\nexport const expectObject = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"object\" && !Array.isArray(value)) {\n        return value;\n    }\n    const receivedType = Array.isArray(value) ? \"array\" : typeof value;\n    throw new TypeError(`Expected object, got ${receivedType}: ${value}`);\n};\nexport const expectString = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    if ([\"boolean\", \"number\", \"bigint\"].includes(typeof value)) {\n        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));\n        return String(value);\n    }\n    throw new TypeError(`Expected string, got ${typeof value}: ${value}`);\n};\nexport const expectUnion = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    const asObject = expectObject(value);\n    const setKeys = Object.entries(asObject)\n        .filter(([, v]) => v != null)\n        .map(([k]) => k);\n    if (setKeys.length === 0) {\n        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);\n    }\n    if (setKeys.length > 1) {\n        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);\n    }\n    return asObject;\n};\nexport const strictParseDouble = (value) => {\n    if (typeof value == \"string\") {\n        return expectNumber(parseNumber(value));\n    }\n    return expectNumber(value);\n};\nexport const strictParseFloat = strictParseDouble;\nexport const strictParseFloat32 = (value) => {\n    if (typeof value == \"string\") {\n        return expectFloat32(parseNumber(value));\n    }\n    return expectFloat32(value);\n};\nconst NUMBER_REGEX = /(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)|(-?Infinity)|(NaN)/g;\nconst parseNumber = (value) => {\n    const matches = value.match(NUMBER_REGEX);\n    if (matches === null || matches[0].length !== value.length) {\n        throw new TypeError(`Expected real number, got implicit NaN`);\n    }\n    return parseFloat(value);\n};\nexport const limitedParseDouble = (value) => {\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return expectNumber(value);\n};\nexport const handleFloat = limitedParseDouble;\nexport const limitedParseFloat = limitedParseDouble;\nexport const limitedParseFloat32 = (value) => {\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return expectFloat32(value);\n};\nconst parseFloatString = (value) => {\n    switch (value) {\n        case \"NaN\":\n            return NaN;\n        case \"Infinity\":\n            return Infinity;\n        case \"-Infinity\":\n            return -Infinity;\n        default:\n            throw new Error(`Unable to parse float value: ${value}`);\n    }\n};\nexport const strictParseLong = (value) => {\n    if (typeof value === \"string\") {\n        return expectLong(parseNumber(value));\n    }\n    return expectLong(value);\n};\nexport const strictParseInt = strictParseLong;\nexport const strictParseInt32 = (value) => {\n    if (typeof value === \"string\") {\n        return expectInt32(parseNumber(value));\n    }\n    return expectInt32(value);\n};\nexport const strictParseShort = (value) => {\n    if (typeof value === \"string\") {\n        return expectShort(parseNumber(value));\n    }\n    return expectShort(value);\n};\nexport const strictParseByte = (value) => {\n    if (typeof value === \"string\") {\n        return expectByte(parseNumber(value));\n    }\n    return expectByte(value);\n};\nconst stackTraceWarning = (message) => {\n    return String(new TypeError(message).stack || message)\n        .split(\"\\n\")\n        .slice(0, 5)\n        .filter((s) => !s.includes(\"stackTraceWarning\"))\n        .join(\"\\n\");\n};\nexport const logger = {\n    warn: console.warn,\n};\n","import { strictParseByte, strictParseDouble, strictParseFloat32, strictParseShort } from \"./parse-utils\";\nconst DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nconst MONTHS = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nexport function dateToUtcString(date) {\n    const year = date.getUTCFullYear();\n    const month = date.getUTCMonth();\n    const dayOfWeek = date.getUTCDay();\n    const dayOfMonthInt = date.getUTCDate();\n    const hoursInt = date.getUTCHours();\n    const minutesInt = date.getUTCMinutes();\n    const secondsInt = date.getUTCSeconds();\n    const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;\n    const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;\n    const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;\n    const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;\n    return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;\n}\nconst RFC3339 = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?[zZ]$/);\nexport const parseRfc3339DateTime = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n    }\n    const match = RFC3339.exec(value);\n    if (!match) {\n        throw new TypeError(\"Invalid RFC-3339 date-time value\");\n    }\n    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n    const year = strictParseShort(stripLeadingZeroes(yearStr));\n    const month = parseDateValue(monthStr, \"month\", 1, 12);\n    const day = parseDateValue(dayStr, \"day\", 1, 31);\n    return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });\n};\nconst RFC3339_WITH_OFFSET = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?(([-+]\\d{2}\\:\\d{2})|[zZ])$/);\nexport const parseRfc3339DateTimeWithOffset = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n    }\n    const match = RFC3339_WITH_OFFSET.exec(value);\n    if (!match) {\n        throw new TypeError(\"Invalid RFC-3339 date-time value\");\n    }\n    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;\n    const year = strictParseShort(stripLeadingZeroes(yearStr));\n    const month = parseDateValue(monthStr, \"month\", 1, 12);\n    const day = parseDateValue(dayStr, \"day\", 1, 31);\n    const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });\n    if (offsetStr.toUpperCase() != \"Z\") {\n        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));\n    }\n    return date;\n};\nconst IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nconst RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d{2}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nconst ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\\d{2}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? (\\d{4})$/);\nexport const parseRfc7231DateTime = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-7231 date-times must be expressed as strings\");\n    }\n    let match = IMF_FIXDATE.exec(value);\n    if (match) {\n        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });\n    }\n    match = RFC_850_DATE.exec(value);\n    if (match) {\n        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n            hours,\n            minutes,\n            seconds,\n            fractionalMilliseconds,\n        }));\n    }\n    match = ASC_TIME.exec(value);\n    if (match) {\n        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;\n        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), \"day\", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });\n    }\n    throw new TypeError(\"Invalid RFC-7231 date-time value\");\n};\nexport const parseEpochTimestamp = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    let valueAsDouble;\n    if (typeof value === \"number\") {\n        valueAsDouble = value;\n    }\n    else if (typeof value === \"string\") {\n        valueAsDouble = strictParseDouble(value);\n    }\n    else {\n        throw new TypeError(\"Epoch timestamps must be expressed as floating point numbers or their string representation\");\n    }\n    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {\n        throw new TypeError(\"Epoch timestamps must be valid, non-Infinite, non-NaN numerics\");\n    }\n    return new Date(Math.round(valueAsDouble * 1000));\n};\nconst buildDate = (year, month, day, time) => {\n    const adjustedMonth = month - 1;\n    validateDayOfMonth(year, adjustedMonth, day);\n    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, \"hour\", 0, 23), parseDateValue(time.minutes, \"minute\", 0, 59), parseDateValue(time.seconds, \"seconds\", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));\n};\nconst parseTwoDigitYear = (value) => {\n    const thisYear = new Date().getUTCFullYear();\n    const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));\n    if (valueInThisCentury < thisYear) {\n        return valueInThisCentury + 100;\n    }\n    return valueInThisCentury;\n};\nconst FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;\nconst adjustRfc850Year = (input) => {\n    if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {\n        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));\n    }\n    return input;\n};\nconst parseMonthByShortName = (value) => {\n    const monthIdx = MONTHS.indexOf(value);\n    if (monthIdx < 0) {\n        throw new TypeError(`Invalid month: ${value}`);\n    }\n    return monthIdx + 1;\n};\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst validateDayOfMonth = (year, month, day) => {\n    let maxDays = DAYS_IN_MONTH[month];\n    if (month === 1 && isLeapYear(year)) {\n        maxDays = 29;\n    }\n    if (day > maxDays) {\n        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);\n    }\n};\nconst isLeapYear = (year) => {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n};\nconst parseDateValue = (value, type, lower, upper) => {\n    const dateVal = strictParseByte(stripLeadingZeroes(value));\n    if (dateVal < lower || dateVal > upper) {\n        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);\n    }\n    return dateVal;\n};\nconst parseMilliseconds = (value) => {\n    if (value === null || value === undefined) {\n        return 0;\n    }\n    return strictParseFloat32(\"0.\" + value) * 1000;\n};\nconst parseOffsetToMilliseconds = (value) => {\n    const directionStr = value[0];\n    let direction = 1;\n    if (directionStr == \"+\") {\n        direction = 1;\n    }\n    else if (directionStr == \"-\") {\n        direction = -1;\n    }\n    else {\n        throw new TypeError(`Offset direction, ${directionStr}, must be \"+\" or \"-\"`);\n    }\n    const hour = Number(value.substring(1, 3));\n    const minute = Number(value.substring(4, 6));\n    return direction * (hour * 60 + minute) * 60 * 1000;\n};\nconst stripLeadingZeroes = (value) => {\n    let idx = 0;\n    while (idx < value.length - 1 && value.charAt(idx) === \"0\") {\n        idx++;\n    }\n    if (idx === 0) {\n        return value;\n    }\n    return value.slice(idx);\n};\n","export class ServiceException extends Error {\n    constructor(options) {\n        super(options.message);\n        Object.setPrototypeOf(this, ServiceException.prototype);\n        this.name = options.name;\n        this.$fault = options.$fault;\n        this.$metadata = options.$metadata;\n    }\n}\nexport const decorateServiceException = (exception, additions = {}) => {\n    Object.entries(additions)\n        .filter(([, v]) => v !== undefined)\n        .forEach(([k, v]) => {\n        if (exception[k] == undefined || exception[k] === \"\") {\n            exception[k] = v;\n        }\n    });\n    const message = exception.message || exception.Message || \"UnknownError\";\n    exception.message = message;\n    delete exception.Message;\n    return exception;\n};\n","import { decorateServiceException } from \"./exceptions\";\nexport const throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode }) => {\n    const $metadata = deserializeMetadata(output);\n    const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + \"\" : undefined;\n    const response = new exceptionCtor({\n        name: parsedBody?.code || parsedBody?.Code || errorCode || statusCode || \"UnknownError\",\n        $fault: \"client\",\n        $metadata,\n    });\n    throw decorateServiceException(response, parsedBody);\n};\nexport const withBaseException = (ExceptionCtor) => {\n    return ({ output, parsedBody, errorCode }) => {\n        throwDefaultError({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });\n    };\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\n","export const loadConfigsForDefaultMode = (mode) => {\n    switch (mode) {\n        case \"standard\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 3100,\n            };\n        case \"in-region\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 1100,\n            };\n        case \"cross-region\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 3100,\n            };\n        case \"mobile\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 30000,\n            };\n        default:\n            return {};\n    }\n};\n","let warningEmitted = false;\nexport const emitWarningIfUnsupportedVersion = (version) => {\n    if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf(\".\"))) < 14) {\n        warningEmitted = true;\n    }\n};\n","export function extendedEncodeURIComponent(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n        return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n}\n","export const getValueFromTextNode = (obj) => {\n    const textNodeName = \"#text\";\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== undefined) {\n            obj[key] = obj[key][textNodeName];\n        }\n        else if (typeof obj[key] === \"object\" && obj[key] !== null) {\n            obj[key] = getValueFromTextNode(obj[key]);\n        }\n    }\n    return obj;\n};\n","export const StringWrapper = function () {\n    const Class = Object.getPrototypeOf(this).constructor;\n    const Constructor = Function.bind.apply(String, [null, ...arguments]);\n    const instance = new Constructor();\n    Object.setPrototypeOf(instance, Class.prototype);\n    return instance;\n};\nStringWrapper.prototype = Object.create(String.prototype, {\n    constructor: {\n        value: StringWrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true,\n    },\n});\nObject.setPrototypeOf(StringWrapper, String);\nexport class LazyJsonString extends StringWrapper {\n    deserializeJSON() {\n        return JSON.parse(super.toString());\n    }\n    toJSON() {\n        return super.toString();\n    }\n    static fromObject(object) {\n        if (object instanceof LazyJsonString) {\n            return object;\n        }\n        else if (object instanceof String || typeof object === \"string\") {\n            return new LazyJsonString(object);\n        }\n        return new LazyJsonString(JSON.stringify(object));\n    }\n}\n","export function map(arg0, arg1, arg2) {\n    let target;\n    let filter;\n    let instructions;\n    if (typeof arg1 === \"undefined\" && typeof arg2 === \"undefined\") {\n        target = {};\n        instructions = arg0;\n    }\n    else {\n        target = arg0;\n        if (typeof arg1 === \"function\") {\n            filter = arg1;\n            instructions = arg2;\n            return mapWithFilter(target, filter, instructions);\n        }\n        else {\n            instructions = arg1;\n        }\n    }\n    for (const key of Object.keys(instructions)) {\n        if (!Array.isArray(instructions[key])) {\n            target[key] = instructions[key];\n            continue;\n        }\n        applyInstruction(target, null, instructions, key);\n    }\n    return target;\n}\nexport const convertMap = (target) => {\n    const output = {};\n    for (const [k, v] of Object.entries(target || {})) {\n        output[k] = [, v];\n    }\n    return output;\n};\nexport const take = (source, instructions) => {\n    const out = {};\n    for (const key in instructions) {\n        applyInstruction(out, source, instructions, key);\n    }\n    return out;\n};\nconst mapWithFilter = (target, filter, instructions) => {\n    return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {\n        if (Array.isArray(value)) {\n            _instructions[key] = value;\n        }\n        else {\n            if (typeof value === \"function\") {\n                _instructions[key] = [filter, value()];\n            }\n            else {\n                _instructions[key] = [filter, value];\n            }\n        }\n        return _instructions;\n    }, {}));\n};\nconst applyInstruction = (target, source, instructions, targetKey) => {\n    if (source !== null) {\n        let instruction = instructions[targetKey];\n        if (typeof instruction === \"function\") {\n            instruction = [, instruction];\n        }\n        const [filter = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;\n        if ((typeof filter === \"function\" && filter(source[sourceKey])) || (typeof filter !== \"function\" && !!filter)) {\n            target[targetKey] = valueFn(source[sourceKey]);\n        }\n        return;\n    }\n    let [filter, value] = instructions[targetKey];\n    if (typeof value === \"function\") {\n        let _value;\n        const defaultFilterPassed = filter === undefined && (_value = value()) != null;\n        const customFilterPassed = (typeof filter === \"function\" && !!filter(void 0)) || (typeof filter !== \"function\" && !!filter);\n        if (defaultFilterPassed) {\n            target[targetKey] = _value;\n        }\n        else if (customFilterPassed) {\n            target[targetKey] = value();\n        }\n    }\n    else {\n        const defaultFilterPassed = filter === undefined && value != null;\n        const customFilterPassed = (typeof filter === \"function\" && !!filter(value)) || (typeof filter !== \"function\" && !!filter);\n        if (defaultFilterPassed || customFilterPassed) {\n            target[targetKey] = value;\n        }\n    }\n};\nconst nonNullish = (_) => _ != null;\nconst pass = (_) => _;\n","export const _json = (obj) => {\n    if (obj == null) {\n        return {};\n    }\n    if (Array.isArray(obj)) {\n        return obj.filter((_) => _ != null);\n    }\n    if (typeof obj === \"object\") {\n        const target = {};\n        for (const key of Object.keys(obj)) {\n            if (obj[key] == null) {\n                continue;\n            }\n            target[key] = _json(obj[key]);\n        }\n        return target;\n    }\n    return obj;\n};\n","import { ServiceException as __ServiceException, } from \"@aws-sdk/smithy-client\";\nexport class STSServiceException extends __ServiceException {\n    constructor(options) {\n        super(options);\n        Object.setPrototypeOf(this, STSServiceException.prototype);\n    }\n}\n","import { STSServiceException as __BaseException } from \"./STSServiceException\";\nexport class ExpiredTokenException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ExpiredTokenException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ExpiredTokenException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ExpiredTokenException.prototype);\n    }\n}\nexport class MalformedPolicyDocumentException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"MalformedPolicyDocumentException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"MalformedPolicyDocumentException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);\n    }\n}\nexport class PackedPolicyTooLargeException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"PackedPolicyTooLargeException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"PackedPolicyTooLargeException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, PackedPolicyTooLargeException.prototype);\n    }\n}\nexport class RegionDisabledException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"RegionDisabledException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"RegionDisabledException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, RegionDisabledException.prototype);\n    }\n}\nexport class IDPRejectedClaimException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"IDPRejectedClaimException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"IDPRejectedClaimException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, IDPRejectedClaimException.prototype);\n    }\n}\nexport class InvalidIdentityTokenException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidIdentityTokenException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidIdentityTokenException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidIdentityTokenException.prototype);\n    }\n}\nexport class IDPCommunicationErrorException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"IDPCommunicationErrorException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"IDPCommunicationErrorException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, IDPCommunicationErrorException.prototype);\n    }\n}\nexport class InvalidAuthorizationMessageException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidAuthorizationMessageException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidAuthorizationMessageException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidAuthorizationMessageException.prototype);\n    }\n}\n","import { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, getValueFromTextNode as __getValueFromTextNode, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, strictParseInt32 as __strictParseInt32, withBaseException, } from \"@aws-sdk/smithy-client\";\nimport { XMLParser } from \"fast-xml-parser\";\nimport { ExpiredTokenException, IDPCommunicationErrorException, IDPRejectedClaimException, InvalidAuthorizationMessageException, InvalidIdentityTokenException, MalformedPolicyDocumentException, PackedPolicyTooLargeException, RegionDisabledException, } from \"../models/models_0\";\nimport { STSServiceException as __BaseException } from \"../models/STSServiceException\";\nexport const se_AssumeRoleCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_AssumeRoleRequest(input, context),\n        Action: \"AssumeRole\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_AssumeRoleWithSAMLCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_AssumeRoleWithSAMLRequest(input, context),\n        Action: \"AssumeRoleWithSAML\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_AssumeRoleWithWebIdentityCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_AssumeRoleWithWebIdentityRequest(input, context),\n        Action: \"AssumeRoleWithWebIdentity\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DecodeAuthorizationMessageCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_DecodeAuthorizationMessageRequest(input, context),\n        Action: \"DecodeAuthorizationMessage\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetAccessKeyInfoCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_GetAccessKeyInfoRequest(input, context),\n        Action: \"GetAccessKeyInfo\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetCallerIdentityCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_GetCallerIdentityRequest(input, context),\n        Action: \"GetCallerIdentity\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetFederationTokenCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_GetFederationTokenRequest(input, context),\n        Action: \"GetFederationToken\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetSessionTokenCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_GetSessionTokenRequest(input, context),\n        Action: \"GetSessionToken\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const de_AssumeRoleCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_AssumeRoleCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_AssumeRoleCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.sts#ExpiredTokenException\":\n            throw await de_ExpiredTokenExceptionRes(parsedOutput, context);\n        case \"MalformedPolicyDocument\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);\n        case \"PackedPolicyTooLarge\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await de_RegionDisabledExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                errorCode,\n            });\n    }\n};\nexport const de_AssumeRoleWithSAMLCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_AssumeRoleWithSAMLCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_AssumeRoleWithSAMLCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.sts#ExpiredTokenException\":\n            throw await de_ExpiredTokenExceptionRes(parsedOutput, context);\n        case \"IDPRejectedClaim\":\n        case \"com.amazonaws.sts#IDPRejectedClaimException\":\n            throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);\n        case \"InvalidIdentityToken\":\n        case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n            throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);\n        case \"MalformedPolicyDocument\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);\n        case \"PackedPolicyTooLarge\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await de_RegionDisabledExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                errorCode,\n            });\n    }\n};\nexport const de_AssumeRoleWithWebIdentityCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_AssumeRoleWithWebIdentityCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_AssumeRoleWithWebIdentityCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.sts#ExpiredTokenException\":\n            throw await de_ExpiredTokenExceptionRes(parsedOutput, context);\n        case \"IDPCommunicationError\":\n        case \"com.amazonaws.sts#IDPCommunicationErrorException\":\n            throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);\n        case \"IDPRejectedClaim\":\n        case \"com.amazonaws.sts#IDPRejectedClaimException\":\n            throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);\n        case \"InvalidIdentityToken\":\n        case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n            throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);\n        case \"MalformedPolicyDocument\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);\n        case \"PackedPolicyTooLarge\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await de_RegionDisabledExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                errorCode,\n            });\n    }\n};\nexport const de_DecodeAuthorizationMessageCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DecodeAuthorizationMessageCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DecodeAuthorizationMessageCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidAuthorizationMessageException\":\n        case \"com.amazonaws.sts#InvalidAuthorizationMessageException\":\n            throw await de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                errorCode,\n            });\n    }\n};\nexport const de_GetAccessKeyInfoCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetAccessKeyInfoCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetAccessKeyInfoCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        errorCode,\n    });\n};\nexport const de_GetCallerIdentityCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetCallerIdentityCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetCallerIdentityCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        errorCode,\n    });\n};\nexport const de_GetFederationTokenCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetFederationTokenCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetFederationTokenCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"MalformedPolicyDocument\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);\n        case \"PackedPolicyTooLarge\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await de_RegionDisabledExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                errorCode,\n            });\n    }\n};\nexport const de_GetSessionTokenCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetSessionTokenCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetSessionTokenCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await de_RegionDisabledExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                errorCode,\n            });\n    }\n};\nconst de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_ExpiredTokenException(body.Error, context);\n    const exception = new ExpiredTokenException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_IDPCommunicationErrorExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_IDPCommunicationErrorException(body.Error, context);\n    const exception = new IDPCommunicationErrorException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_IDPRejectedClaimExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_IDPRejectedClaimException(body.Error, context);\n    const exception = new IDPRejectedClaimException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidAuthorizationMessageExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);\n    const exception = new InvalidAuthorizationMessageException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidIdentityTokenExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_InvalidIdentityTokenException(body.Error, context);\n    const exception = new InvalidIdentityTokenException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_MalformedPolicyDocumentException(body.Error, context);\n    const exception = new MalformedPolicyDocumentException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_PackedPolicyTooLargeExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_PackedPolicyTooLargeException(body.Error, context);\n    const exception = new PackedPolicyTooLargeException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_RegionDisabledExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_RegionDisabledException(body.Error, context);\n    const exception = new RegionDisabledException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst se_AssumeRoleRequest = (input, context) => {\n    const entries = {};\n    if (input.RoleArn != null) {\n        entries[\"RoleArn\"] = input.RoleArn;\n    }\n    if (input.RoleSessionName != null) {\n        entries[\"RoleSessionName\"] = input.RoleSessionName;\n    }\n    if (input.PolicyArns != null) {\n        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);\n        if (input.PolicyArns?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.Policy != null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    if (input.Tags != null) {\n        const memberEntries = se_tagListType(input.Tags, context);\n        if (input.Tags?.length === 0) {\n            entries.Tags = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `Tags.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.TransitiveTagKeys != null) {\n        const memberEntries = se_tagKeyListType(input.TransitiveTagKeys, context);\n        if (input.TransitiveTagKeys?.length === 0) {\n            entries.TransitiveTagKeys = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `TransitiveTagKeys.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.ExternalId != null) {\n        entries[\"ExternalId\"] = input.ExternalId;\n    }\n    if (input.SerialNumber != null) {\n        entries[\"SerialNumber\"] = input.SerialNumber;\n    }\n    if (input.TokenCode != null) {\n        entries[\"TokenCode\"] = input.TokenCode;\n    }\n    if (input.SourceIdentity != null) {\n        entries[\"SourceIdentity\"] = input.SourceIdentity;\n    }\n    return entries;\n};\nconst se_AssumeRoleWithSAMLRequest = (input, context) => {\n    const entries = {};\n    if (input.RoleArn != null) {\n        entries[\"RoleArn\"] = input.RoleArn;\n    }\n    if (input.PrincipalArn != null) {\n        entries[\"PrincipalArn\"] = input.PrincipalArn;\n    }\n    if (input.SAMLAssertion != null) {\n        entries[\"SAMLAssertion\"] = input.SAMLAssertion;\n    }\n    if (input.PolicyArns != null) {\n        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);\n        if (input.PolicyArns?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.Policy != null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    return entries;\n};\nconst se_AssumeRoleWithWebIdentityRequest = (input, context) => {\n    const entries = {};\n    if (input.RoleArn != null) {\n        entries[\"RoleArn\"] = input.RoleArn;\n    }\n    if (input.RoleSessionName != null) {\n        entries[\"RoleSessionName\"] = input.RoleSessionName;\n    }\n    if (input.WebIdentityToken != null) {\n        entries[\"WebIdentityToken\"] = input.WebIdentityToken;\n    }\n    if (input.ProviderId != null) {\n        entries[\"ProviderId\"] = input.ProviderId;\n    }\n    if (input.PolicyArns != null) {\n        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);\n        if (input.PolicyArns?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.Policy != null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    return entries;\n};\nconst se_DecodeAuthorizationMessageRequest = (input, context) => {\n    const entries = {};\n    if (input.EncodedMessage != null) {\n        entries[\"EncodedMessage\"] = input.EncodedMessage;\n    }\n    return entries;\n};\nconst se_GetAccessKeyInfoRequest = (input, context) => {\n    const entries = {};\n    if (input.AccessKeyId != null) {\n        entries[\"AccessKeyId\"] = input.AccessKeyId;\n    }\n    return entries;\n};\nconst se_GetCallerIdentityRequest = (input, context) => {\n    const entries = {};\n    return entries;\n};\nconst se_GetFederationTokenRequest = (input, context) => {\n    const entries = {};\n    if (input.Name != null) {\n        entries[\"Name\"] = input.Name;\n    }\n    if (input.Policy != null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.PolicyArns != null) {\n        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);\n        if (input.PolicyArns?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    if (input.Tags != null) {\n        const memberEntries = se_tagListType(input.Tags, context);\n        if (input.Tags?.length === 0) {\n            entries.Tags = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `Tags.${key}`;\n            entries[loc] = value;\n        });\n    }\n    return entries;\n};\nconst se_GetSessionTokenRequest = (input, context) => {\n    const entries = {};\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    if (input.SerialNumber != null) {\n        entries[\"SerialNumber\"] = input.SerialNumber;\n    }\n    if (input.TokenCode != null) {\n        entries[\"TokenCode\"] = input.TokenCode;\n    }\n    return entries;\n};\nconst se_policyDescriptorListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        const memberEntries = se_PolicyDescriptorType(entry, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            entries[`member.${counter}.${key}`] = value;\n        });\n        counter++;\n    }\n    return entries;\n};\nconst se_PolicyDescriptorType = (input, context) => {\n    const entries = {};\n    if (input.arn != null) {\n        entries[\"arn\"] = input.arn;\n    }\n    return entries;\n};\nconst se_Tag = (input, context) => {\n    const entries = {};\n    if (input.Key != null) {\n        entries[\"Key\"] = input.Key;\n    }\n    if (input.Value != null) {\n        entries[\"Value\"] = input.Value;\n    }\n    return entries;\n};\nconst se_tagKeyListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        entries[`member.${counter}`] = entry;\n        counter++;\n    }\n    return entries;\n};\nconst se_tagListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        const memberEntries = se_Tag(entry, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            entries[`member.${counter}.${key}`] = value;\n        });\n        counter++;\n    }\n    return entries;\n};\nconst de_AssumedRoleUser = (output, context) => {\n    const contents = {};\n    if (output[\"AssumedRoleId\"] !== undefined) {\n        contents.AssumedRoleId = __expectString(output[\"AssumedRoleId\"]);\n    }\n    if (output[\"Arn\"] !== undefined) {\n        contents.Arn = __expectString(output[\"Arn\"]);\n    }\n    return contents;\n};\nconst de_AssumeRoleResponse = (output, context) => {\n    const contents = {};\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = de_Credentials(output[\"Credentials\"], context);\n    }\n    if (output[\"AssumedRoleUser\"] !== undefined) {\n        contents.AssumedRoleUser = de_AssumedRoleUser(output[\"AssumedRoleUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    if (output[\"SourceIdentity\"] !== undefined) {\n        contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n    }\n    return contents;\n};\nconst de_AssumeRoleWithSAMLResponse = (output, context) => {\n    const contents = {};\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = de_Credentials(output[\"Credentials\"], context);\n    }\n    if (output[\"AssumedRoleUser\"] !== undefined) {\n        contents.AssumedRoleUser = de_AssumedRoleUser(output[\"AssumedRoleUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    if (output[\"Subject\"] !== undefined) {\n        contents.Subject = __expectString(output[\"Subject\"]);\n    }\n    if (output[\"SubjectType\"] !== undefined) {\n        contents.SubjectType = __expectString(output[\"SubjectType\"]);\n    }\n    if (output[\"Issuer\"] !== undefined) {\n        contents.Issuer = __expectString(output[\"Issuer\"]);\n    }\n    if (output[\"Audience\"] !== undefined) {\n        contents.Audience = __expectString(output[\"Audience\"]);\n    }\n    if (output[\"NameQualifier\"] !== undefined) {\n        contents.NameQualifier = __expectString(output[\"NameQualifier\"]);\n    }\n    if (output[\"SourceIdentity\"] !== undefined) {\n        contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n    }\n    return contents;\n};\nconst de_AssumeRoleWithWebIdentityResponse = (output, context) => {\n    const contents = {};\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = de_Credentials(output[\"Credentials\"], context);\n    }\n    if (output[\"SubjectFromWebIdentityToken\"] !== undefined) {\n        contents.SubjectFromWebIdentityToken = __expectString(output[\"SubjectFromWebIdentityToken\"]);\n    }\n    if (output[\"AssumedRoleUser\"] !== undefined) {\n        contents.AssumedRoleUser = de_AssumedRoleUser(output[\"AssumedRoleUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    if (output[\"Provider\"] !== undefined) {\n        contents.Provider = __expectString(output[\"Provider\"]);\n    }\n    if (output[\"Audience\"] !== undefined) {\n        contents.Audience = __expectString(output[\"Audience\"]);\n    }\n    if (output[\"SourceIdentity\"] !== undefined) {\n        contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n    }\n    return contents;\n};\nconst de_Credentials = (output, context) => {\n    const contents = {};\n    if (output[\"AccessKeyId\"] !== undefined) {\n        contents.AccessKeyId = __expectString(output[\"AccessKeyId\"]);\n    }\n    if (output[\"SecretAccessKey\"] !== undefined) {\n        contents.SecretAccessKey = __expectString(output[\"SecretAccessKey\"]);\n    }\n    if (output[\"SessionToken\"] !== undefined) {\n        contents.SessionToken = __expectString(output[\"SessionToken\"]);\n    }\n    if (output[\"Expiration\"] !== undefined) {\n        contents.Expiration = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"Expiration\"]));\n    }\n    return contents;\n};\nconst de_DecodeAuthorizationMessageResponse = (output, context) => {\n    const contents = {};\n    if (output[\"DecodedMessage\"] !== undefined) {\n        contents.DecodedMessage = __expectString(output[\"DecodedMessage\"]);\n    }\n    return contents;\n};\nconst de_ExpiredTokenException = (output, context) => {\n    const contents = {};\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst de_FederatedUser = (output, context) => {\n    const contents = {};\n    if (output[\"FederatedUserId\"] !== undefined) {\n        contents.FederatedUserId = __expectString(output[\"FederatedUserId\"]);\n    }\n    if (output[\"Arn\"] !== undefined) {\n        contents.Arn = __expectString(output[\"Arn\"]);\n    }\n    return contents;\n};\nconst de_GetAccessKeyInfoResponse = (output, context) => {\n    const contents = {};\n    if (output[\"Account\"] !== undefined) {\n        contents.Account = __expectString(output[\"Account\"]);\n    }\n    return contents;\n};\nconst de_GetCallerIdentityResponse = (output, context) => {\n    const contents = {};\n    if (output[\"UserId\"] !== undefined) {\n        contents.UserId = __expectString(output[\"UserId\"]);\n    }\n    if (output[\"Account\"] !== undefined) {\n        contents.Account = __expectString(output[\"Account\"]);\n    }\n    if (output[\"Arn\"] !== undefined) {\n        contents.Arn = __expectString(output[\"Arn\"]);\n    }\n    return contents;\n};\nconst de_GetFederationTokenResponse = (output, context) => {\n    const contents = {};\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = de_Credentials(output[\"Credentials\"], context);\n    }\n    if (output[\"FederatedUser\"] !== undefined) {\n        contents.FederatedUser = de_FederatedUser(output[\"FederatedUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    return contents;\n};\nconst de_GetSessionTokenResponse = (output, context) => {\n    const contents = {};\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = de_Credentials(output[\"Credentials\"], context);\n    }\n    return contents;\n};\nconst de_IDPCommunicationErrorException = (output, context) => {\n    const contents = {};\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst de_IDPRejectedClaimException = (output, context) => {\n    const contents = {};\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst de_InvalidAuthorizationMessageException = (output, context) => {\n    const contents = {};\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst de_InvalidIdentityTokenException = (output, context) => {\n    const contents = {};\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst de_MalformedPolicyDocumentException = (output, context) => {\n    const contents = {};\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst de_PackedPolicyTooLargeException = (output, context) => {\n    const contents = {};\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst de_RegionDisabledException = (output, context) => {\n    const contents = {};\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst throwDefaultError = withBaseException(__BaseException);\nconst buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const contents = {\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        path: basePath.endsWith(\"/\") ? basePath.slice(0, -1) + path : basePath + path,\n        headers,\n    };\n    if (resolvedHostname !== undefined) {\n        contents.hostname = resolvedHostname;\n    }\n    if (body !== undefined) {\n        contents.body = body;\n    }\n    return new __HttpRequest(contents);\n};\nconst SHARED_HEADERS = {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n};\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        const parser = new XMLParser({\n            attributeNamePrefix: \"\",\n            htmlEntities: true,\n            ignoreAttributes: false,\n            ignoreDeclaration: true,\n            parseTagValue: false,\n            trimValues: false,\n            tagValueProcessor: (_, val) => (val.trim() === \"\" && val.includes(\"\\n\") ? \"\" : undefined),\n        });\n        parser.addEntity(\"#xD\", \"\\r\");\n        parser.addEntity(\"#10\", \"\\n\");\n        const parsedObj = parser.parse(encoded);\n        const textNodeName = \"#text\";\n        const key = Object.keys(parsedObj)[0];\n        const parsedObjToReturn = parsedObj[key];\n        if (parsedObjToReturn[textNodeName]) {\n            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n            delete parsedObjToReturn[textNodeName];\n        }\n        return __getValueFromTextNode(parsedObjToReturn);\n    }\n    return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n    const value = await parseBody(errorBody, context);\n    if (value.Error) {\n        value.Error.message = value.Error.message ?? value.Error.Message;\n    }\n    return value;\n};\nconst buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)\n    .map(([key, value]) => __extendedEncodeURIComponent(key) + \"=\" + __extendedEncodeURIComponent(value))\n    .join(\"&\");\nconst loadQueryErrorCode = (output, data) => {\n    if (data.Error?.Code !== undefined) {\n        return data.Error.Code;\n    }\n    if (output.statusCode == 404) {\n        return \"NotFound\";\n    }\n};\n","import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getAwsAuthPlugin } from \"@aws-sdk/middleware-signing\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { de_AssumeRoleCommand, se_AssumeRoleCommand } from \"../protocols/Aws_query\";\nexport class AssumeRoleCommand extends $Command {\n    static getEndpointParameterInstructions() {\n        return {\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getEndpointPlugin(configuration, AssumeRoleCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use(getAwsAuthPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"STSClient\";\n        const commandName = \"AssumeRoleCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: (_) => _,\n            outputFilterSensitiveLog: (_) => _,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return se_AssumeRoleCommand(input, context);\n    }\n    deserialize(output, context) {\n        return de_AssumeRoleCommand(output, context);\n    }\n}\n","import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { de_AssumeRoleWithWebIdentityCommand, se_AssumeRoleWithWebIdentityCommand } from \"../protocols/Aws_query\";\nexport class AssumeRoleWithWebIdentityCommand extends $Command {\n    static getEndpointParameterInstructions() {\n        return {\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getEndpointPlugin(configuration, AssumeRoleWithWebIdentityCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"STSClient\";\n        const commandName = \"AssumeRoleWithWebIdentityCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: (_) => _,\n            outputFilterSensitiveLog: (_) => _,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return se_AssumeRoleWithWebIdentityCommand(input, context);\n    }\n    deserialize(output, context) {\n        return de_AssumeRoleWithWebIdentityCommand(output, context);\n    }\n}\n","import { AssumeRoleCommand } from \"./commands/AssumeRoleCommand\";\nimport { AssumeRoleWithWebIdentityCommand, } from \"./commands/AssumeRoleWithWebIdentityCommand\";\nconst ASSUME_ROLE_DEFAULT_REGION = \"us-east-1\";\nconst decorateDefaultRegion = (region) => {\n    if (typeof region !== \"function\") {\n        return region === undefined ? ASSUME_ROLE_DEFAULT_REGION : region;\n    }\n    return async () => {\n        try {\n            return await region();\n        }\n        catch (e) {\n            return ASSUME_ROLE_DEFAULT_REGION;\n        }\n    };\n};\nexport const getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {\n    let stsClient;\n    let closureSourceCreds;\n    return async (sourceCreds, params) => {\n        closureSourceCreds = sourceCreds;\n        if (!stsClient) {\n            const { logger, region, requestHandler } = stsOptions;\n            stsClient = new stsClientCtor({\n                logger,\n                credentialDefaultProvider: () => async () => closureSourceCreds,\n                region: decorateDefaultRegion(region || stsOptions.region),\n                ...(requestHandler ? { requestHandler } : {}),\n            });\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n        };\n    };\n};\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {\n    let stsClient;\n    return async (params) => {\n        if (!stsClient) {\n            const { logger, region, requestHandler } = stsOptions;\n            stsClient = new stsClientCtor({\n                logger,\n                region: decorateDefaultRegion(region || stsOptions.region),\n                ...(requestHandler ? { requestHandler } : {}),\n            });\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n        };\n    };\n};\nexport const decorateDefaultCredentialProvider = (provider) => (input) => provider({\n    roleAssumer: getDefaultRoleAssumer(input, input.stsClientCtor),\n    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input, input.stsClientCtor),\n    ...input,\n});\n","import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nexport const ENV_KEY = \"AWS_ACCESS_KEY_ID\";\nexport const ENV_SECRET = \"AWS_SECRET_ACCESS_KEY\";\nexport const ENV_SESSION = \"AWS_SESSION_TOKEN\";\nexport const ENV_EXPIRATION = \"AWS_CREDENTIAL_EXPIRATION\";\nexport const fromEnv = () => async () => {\n    const accessKeyId = process.env[ENV_KEY];\n    const secretAccessKey = process.env[ENV_SECRET];\n    const sessionToken = process.env[ENV_SESSION];\n    const expiry = process.env[ENV_EXPIRATION];\n    if (accessKeyId && secretAccessKey) {\n        return {\n            accessKeyId,\n            secretAccessKey,\n            ...(sessionToken && { sessionToken }),\n            ...(expiry && { expiration: new Date(expiry) }),\n        };\n    }\n    throw new CredentialsProviderError(\"Unable to find environment variable credentials.\");\n};\n","import { homedir } from \"os\";\nimport { sep } from \"path\";\nexport const getHomeDir = () => {\n    const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${sep}` } = process.env;\n    if (HOME)\n        return HOME;\n    if (USERPROFILE)\n        return USERPROFILE;\n    if (HOMEPATH)\n        return `${HOMEDRIVE}${HOMEPATH}`;\n    return homedir();\n};\n","export const ENV_PROFILE = \"AWS_PROFILE\";\nexport const DEFAULT_PROFILE = \"default\";\nexport const getProfileName = (init) => init.profile || process.env[ENV_PROFILE] || DEFAULT_PROFILE;\n","import { createHash } from \"crypto\";\nimport { join } from \"path\";\nimport { getHomeDir } from \"./getHomeDir\";\nexport const getSSOTokenFilepath = (id) => {\n    const hasher = createHash(\"sha1\");\n    const cacheName = hasher.update(id).digest(\"hex\");\n    return join(getHomeDir(), \".aws\", \"sso\", \"cache\", `${cacheName}.json`);\n};\n","import { promises as fsPromises } from \"fs\";\nimport { getSSOTokenFilepath } from \"./getSSOTokenFilepath\";\nconst { readFile } = fsPromises;\nexport const getSSOTokenFromFile = async (id) => {\n    const ssoTokenFilepath = getSSOTokenFilepath(id);\n    const ssoTokenText = await readFile(ssoTokenFilepath, \"utf8\");\n    return JSON.parse(ssoTokenText);\n};\n","import { join } from \"path\";\nimport { getHomeDir } from \"./getHomeDir\";\nexport const ENV_CONFIG_PATH = \"AWS_CONFIG_FILE\";\nexport const getConfigFilepath = () => process.env[ENV_CONFIG_PATH] || join(getHomeDir(), \".aws\", \"config\");\n","import { join } from \"path\";\nimport { getHomeDir } from \"./getHomeDir\";\nexport const ENV_CREDENTIALS_PATH = \"AWS_SHARED_CREDENTIALS_FILE\";\nexport const getCredentialsFilepath = () => process.env[ENV_CREDENTIALS_PATH] || join(getHomeDir(), \".aws\", \"credentials\");\n","const profileKeyRegex = /^profile\\s([\"'])?([^\\1]+)\\1$/;\nexport const getProfileData = (data) => Object.entries(data)\n    .filter(([key]) => profileKeyRegex.test(key))\n    .reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {\n    ...(data.default && { default: data.default }),\n});\n","const profileNameBlockList = [\"__proto__\", \"profile __proto__\"];\nexport const parseIni = (iniData) => {\n    const map = {};\n    let currentSection;\n    for (let line of iniData.split(/\\r?\\n/)) {\n        line = line.split(/(^|\\s)[;#]/)[0].trim();\n        const isSection = line[0] === \"[\" && line[line.length - 1] === \"]\";\n        if (isSection) {\n            currentSection = line.substring(1, line.length - 1);\n            if (profileNameBlockList.includes(currentSection)) {\n                throw new Error(`Found invalid profile name \"${currentSection}\"`);\n            }\n        }\n        else if (currentSection) {\n            const indexOfEqualsSign = line.indexOf(\"=\");\n            const start = 0;\n            const end = line.length - 1;\n            const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;\n            if (isAssignment) {\n                const [name, value] = [\n                    line.substring(0, indexOfEqualsSign).trim(),\n                    line.substring(indexOfEqualsSign + 1).trim(),\n                ];\n                map[currentSection] = map[currentSection] || {};\n                map[currentSection][name] = value;\n            }\n        }\n    }\n    return map;\n};\n","import { promises as fsPromises } from \"fs\";\nconst { readFile } = fsPromises;\nconst filePromisesHash = {};\nexport const slurpFile = (path, options) => {\n    if (!filePromisesHash[path] || options?.ignoreCache) {\n        filePromisesHash[path] = readFile(path, \"utf8\");\n    }\n    return filePromisesHash[path];\n};\n","import { getConfigFilepath } from \"./getConfigFilepath\";\nimport { getCredentialsFilepath } from \"./getCredentialsFilepath\";\nimport { getProfileData } from \"./getProfileData\";\nimport { parseIni } from \"./parseIni\";\nimport { slurpFile } from \"./slurpFile\";\nconst swallowError = () => ({});\nexport const loadSharedConfigFiles = async (init = {}) => {\n    const { filepath = getCredentialsFilepath(), configFilepath = getConfigFilepath() } = init;\n    const parsedFiles = await Promise.all([\n        slurpFile(configFilepath, {\n            ignoreCache: init.ignoreCache,\n        })\n            .then(parseIni)\n            .then(getProfileData)\n            .catch(swallowError),\n        slurpFile(filepath, {\n            ignoreCache: init.ignoreCache,\n        })\n            .then(parseIni)\n            .catch(swallowError),\n    ]);\n    return {\n        configFile: parsedFiles[0],\n        credentialsFile: parsedFiles[1],\n    };\n};\n","const ssoSessionKeyRegex = /^sso-session\\s([\"'])?([^\\1]+)\\1$/;\nexport const getSsoSessionData = (data) => Object.entries(data)\n    .filter(([key]) => ssoSessionKeyRegex.test(key))\n    .reduce((acc, [key, value]) => ({ ...acc, [ssoSessionKeyRegex.exec(key)[2]]: value }), {});\n","import { getConfigFilepath } from \"./getConfigFilepath\";\nimport { getSsoSessionData } from \"./getSsoSessionData\";\nimport { parseIni } from \"./parseIni\";\nimport { slurpFile } from \"./slurpFile\";\nconst swallowError = () => ({});\nexport const loadSsoSessionData = async (init = {}) => slurpFile(init.configFilepath ?? getConfigFilepath())\n    .then(parseIni)\n    .then(getSsoSessionData)\n    .catch(swallowError);\n","import { loadSharedConfigFiles } from \"./loadSharedConfigFiles\";\nimport { mergeConfigFiles } from \"./mergeConfigFiles\";\nexport const parseKnownFiles = async (init) => {\n    const parsedFiles = await loadSharedConfigFiles(init);\n    return mergeConfigFiles(parsedFiles.configFile, parsedFiles.credentialsFile);\n};\n","export const mergeConfigFiles = (...files) => {\n    const merged = {};\n    for (const file of files) {\n        for (const [key, values] of Object.entries(file)) {\n            if (merged[key] !== undefined) {\n                Object.assign(merged[key], values);\n            }\n            else {\n                merged[key] = values;\n            }\n        }\n    }\n    return merged;\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"url\");","import { ProviderError } from \"@aws-sdk/property-provider\";\nimport { Buffer } from \"buffer\";\nimport { request } from \"http\";\nexport function httpRequest(options) {\n    return new Promise((resolve, reject) => {\n        const req = request({\n            method: \"GET\",\n            ...options,\n            hostname: options.hostname?.replace(/^\\[(.+)\\]$/, \"$1\"),\n        });\n        req.on(\"error\", (err) => {\n            reject(Object.assign(new ProviderError(\"Unable to connect to instance metadata service\"), err));\n            req.destroy();\n        });\n        req.on(\"timeout\", () => {\n            reject(new ProviderError(\"TimeoutError from instance metadata service\"));\n            req.destroy();\n        });\n        req.on(\"response\", (res) => {\n            const { statusCode = 400 } = res;\n            if (statusCode < 200 || 300 <= statusCode) {\n                reject(Object.assign(new ProviderError(\"Error response received from instance metadata service\"), { statusCode }));\n                req.destroy();\n            }\n            const chunks = [];\n            res.on(\"data\", (chunk) => {\n                chunks.push(chunk);\n            });\n            res.on(\"end\", () => {\n                resolve(Buffer.concat(chunks));\n                req.destroy();\n            });\n        });\n        req.end();\n    });\n}\n","export const isImdsCredentials = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.AccessKeyId === \"string\" &&\n    typeof arg.SecretAccessKey === \"string\" &&\n    typeof arg.Token === \"string\" &&\n    typeof arg.Expiration === \"string\";\nexport const fromImdsCredentials = (creds) => ({\n    accessKeyId: creds.AccessKeyId,\n    secretAccessKey: creds.SecretAccessKey,\n    sessionToken: creds.Token,\n    expiration: new Date(creds.Expiration),\n});\n","export const DEFAULT_TIMEOUT = 1000;\nexport const DEFAULT_MAX_RETRIES = 0;\nexport const providerConfigFromInit = ({ maxRetries = DEFAULT_MAX_RETRIES, timeout = DEFAULT_TIMEOUT, }) => ({ maxRetries, timeout });\n","export const retry = (toRetry, maxRetries) => {\n    let promise = toRetry();\n    for (let i = 0; i < maxRetries; i++) {\n        promise = promise.catch(toRetry);\n    }\n    return promise;\n};\n","import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { parse } from \"url\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nexport const ENV_CMDS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\nexport const ENV_CMDS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\nexport const ENV_CMDS_AUTH_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\nexport const fromContainerMetadata = (init = {}) => {\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    return () => retry(async () => {\n        const requestOptions = await getCmdsUri();\n        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\n        if (!isImdsCredentials(credsResponse)) {\n            throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\");\n        }\n        return fromImdsCredentials(credsResponse);\n    }, maxRetries);\n};\nconst requestFromEcsImds = async (timeout, options) => {\n    if (process.env[ENV_CMDS_AUTH_TOKEN]) {\n        options.headers = {\n            ...options.headers,\n            Authorization: process.env[ENV_CMDS_AUTH_TOKEN],\n        };\n    }\n    const buffer = await httpRequest({\n        ...options,\n        timeout,\n    });\n    return buffer.toString();\n};\nconst CMDS_IP = \"169.254.170.2\";\nconst GREENGRASS_HOSTS = {\n    localhost: true,\n    \"127.0.0.1\": true,\n};\nconst GREENGRASS_PROTOCOLS = {\n    \"http:\": true,\n    \"https:\": true,\n};\nconst getCmdsUri = async () => {\n    if (process.env[ENV_CMDS_RELATIVE_URI]) {\n        return {\n            hostname: CMDS_IP,\n            path: process.env[ENV_CMDS_RELATIVE_URI],\n        };\n    }\n    if (process.env[ENV_CMDS_FULL_URI]) {\n        const parsed = parse(process.env[ENV_CMDS_FULL_URI]);\n        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\n            throw new CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);\n        }\n        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\n            throw new CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);\n        }\n        return {\n            ...parsed,\n            port: parsed.port ? parseInt(parsed.port, 10) : undefined,\n        };\n    }\n    throw new CredentialsProviderError(\"The container metadata credential provider cannot be used unless\" +\n        ` the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment` +\n        \" variable is set\", false);\n};\n","import { fromStatic as convertToProvider } from \"@aws-sdk/property-provider\";\nconst isFunction = (func) => typeof func === \"function\";\nexport const fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : convertToProvider(defaultValue);\n","import { chain, memoize } from \"@aws-sdk/property-provider\";\nimport { fromEnv } from \"./fromEnv\";\nimport { fromSharedConfigFiles } from \"./fromSharedConfigFiles\";\nimport { fromStatic } from \"./fromStatic\";\nexport const loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => memoize(chain(fromEnv(environmentVariableSelector), fromSharedConfigFiles(configFileSelector, configuration), fromStatic(defaultValue)));\n","import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nexport const fromEnv = (envVarSelector) => async () => {\n    try {\n        const config = envVarSelector(process.env);\n        if (config === undefined) {\n            throw new Error();\n        }\n        return config;\n    }\n    catch (e) {\n        throw new CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);\n    }\n};\n","import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { getProfileName, loadSharedConfigFiles } from \"@aws-sdk/shared-ini-file-loader\";\nexport const fromSharedConfigFiles = (configSelector, { preferredFile = \"config\", ...init } = {}) => async () => {\n    const profile = getProfileName(init);\n    const { configFile, credentialsFile } = await loadSharedConfigFiles(init);\n    const profileFromCredentials = credentialsFile[profile] || {};\n    const profileFromConfig = configFile[profile] || {};\n    const mergedProfile = preferredFile === \"config\"\n        ? { ...profileFromCredentials, ...profileFromConfig }\n        : { ...profileFromConfig, ...profileFromCredentials };\n    try {\n        const configValue = configSelector(mergedProfile);\n        if (configValue === undefined) {\n            throw new Error();\n        }\n        return configValue;\n    }\n    catch (e) {\n        throw new CredentialsProviderError(e.message ||\n            `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);\n    }\n};\n","export var Endpoint;\n(function (Endpoint) {\n    Endpoint[\"IPv4\"] = \"http://169.254.169.254\";\n    Endpoint[\"IPv6\"] = \"http://[fd00:ec2::254]\";\n})(Endpoint || (Endpoint = {}));\n","export const ENV_ENDPOINT_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT\";\nexport const CONFIG_ENDPOINT_NAME = \"ec2_metadata_service_endpoint\";\nexport const ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],\n    default: undefined,\n};\n","export var EndpointMode;\n(function (EndpointMode) {\n    EndpointMode[\"IPv4\"] = \"IPv4\";\n    EndpointMode[\"IPv6\"] = \"IPv6\";\n})(EndpointMode || (EndpointMode = {}));\n","import { EndpointMode } from \"./EndpointMode\";\nexport const ENV_ENDPOINT_MODE_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE\";\nexport const CONFIG_ENDPOINT_MODE_NAME = \"ec2_metadata_service_endpoint_mode\";\nexport const ENDPOINT_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_MODE_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],\n    default: EndpointMode.IPv4,\n};\n","import { loadConfig } from \"@aws-sdk/node-config-provider\";\nimport { parseUrl } from \"@aws-sdk/url-parser\";\nimport { Endpoint as InstanceMetadataEndpoint } from \"../config/Endpoint\";\nimport { ENDPOINT_CONFIG_OPTIONS } from \"../config/EndpointConfigOptions\";\nimport { EndpointMode } from \"../config/EndpointMode\";\nimport { ENDPOINT_MODE_CONFIG_OPTIONS, } from \"../config/EndpointModeConfigOptions\";\nexport const getInstanceMetadataEndpoint = async () => parseUrl((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));\nconst getFromEndpointConfig = async () => loadConfig(ENDPOINT_CONFIG_OPTIONS)();\nconst getFromEndpointModeConfig = async () => {\n    const endpointMode = await loadConfig(ENDPOINT_MODE_CONFIG_OPTIONS)();\n    switch (endpointMode) {\n        case EndpointMode.IPv4:\n            return InstanceMetadataEndpoint.IPv4;\n        case EndpointMode.IPv6:\n            return InstanceMetadataEndpoint.IPv6;\n        default:\n            throw new Error(`Unsupported endpoint mode: ${endpointMode}.` + ` Select from ${Object.values(EndpointMode)}`);\n    }\n};\n","const STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;\nconst STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;\nconst STATIC_STABILITY_DOC_URL = \"https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html\";\nexport const getExtendedInstanceMetadataCredentials = (credentials, logger) => {\n    const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS +\n        Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);\n    const newExpiration = new Date(Date.now() + refreshInterval * 1000);\n    logger.warn(\"Attempting credential expiration extension due to a credential service availability issue. A refresh of these \" +\n        \"credentials will be attempted after ${new Date(newExpiration)}.\\nFor more information, please visit: \" +\n        STATIC_STABILITY_DOC_URL);\n    const originalExpiration = credentials.originalExpiration ?? credentials.expiration;\n    return {\n        ...credentials,\n        ...(originalExpiration ? { originalExpiration } : {}),\n        expiration: newExpiration,\n    };\n};\n","import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nimport { getInstanceMetadataEndpoint } from \"./utils/getInstanceMetadataEndpoint\";\nimport { staticStabilityProvider } from \"./utils/staticStabilityProvider\";\nconst IMDS_PATH = \"/latest/meta-data/iam/security-credentials/\";\nconst IMDS_TOKEN_PATH = \"/latest/api/token\";\nexport const fromInstanceMetadata = (init = {}) => staticStabilityProvider(getInstanceImdsProvider(init), { logger: init.logger });\nconst getInstanceImdsProvider = (init) => {\n    let disableFetchToken = false;\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    const getCredentials = async (maxRetries, options) => {\n        const profile = (await retry(async () => {\n            let profile;\n            try {\n                profile = await getProfile(options);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return profile;\n        }, maxRetries)).trim();\n        return retry(async () => {\n            let creds;\n            try {\n                creds = await getCredentialsFromProfile(profile, options);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return creds;\n        }, maxRetries);\n    };\n    return async () => {\n        const endpoint = await getInstanceMetadataEndpoint();\n        if (disableFetchToken) {\n            return getCredentials(maxRetries, { ...endpoint, timeout });\n        }\n        else {\n            let token;\n            try {\n                token = (await getMetadataToken({ ...endpoint, timeout })).toString();\n            }\n            catch (error) {\n                if (error?.statusCode === 400) {\n                    throw Object.assign(error, {\n                        message: \"EC2 Metadata token request returned error\",\n                    });\n                }\n                else if (error.message === \"TimeoutError\" || [403, 404, 405].includes(error.statusCode)) {\n                    disableFetchToken = true;\n                }\n                return getCredentials(maxRetries, { ...endpoint, timeout });\n            }\n            return getCredentials(maxRetries, {\n                ...endpoint,\n                headers: {\n                    \"x-aws-ec2-metadata-token\": token,\n                },\n                timeout,\n            });\n        }\n    };\n};\nconst getMetadataToken = async (options) => httpRequest({\n    ...options,\n    path: IMDS_TOKEN_PATH,\n    method: \"PUT\",\n    headers: {\n        \"x-aws-ec2-metadata-token-ttl-seconds\": \"21600\",\n    },\n});\nconst getProfile = async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString();\nconst getCredentialsFromProfile = async (profile, options) => {\n    const credsResponse = JSON.parse((await httpRequest({\n        ...options,\n        path: IMDS_PATH + profile,\n    })).toString());\n    if (!isImdsCredentials(credsResponse)) {\n        throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\");\n    }\n    return fromImdsCredentials(credsResponse);\n};\n","import { getExtendedInstanceMetadataCredentials } from \"./getExtendedInstanceMetadataCredentials\";\nexport const staticStabilityProvider = (provider, options = {}) => {\n    const logger = options?.logger || console;\n    let pastCredentials;\n    return async () => {\n        let credentials;\n        try {\n            credentials = await provider();\n            if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {\n                credentials = getExtendedInstanceMetadataCredentials(credentials, logger);\n            }\n        }\n        catch (e) {\n            if (pastCredentials) {\n                logger.warn(\"Credential renew failed: \", e);\n                credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger);\n            }\n            else {\n                throw e;\n            }\n        }\n        pastCredentials = credentials;\n        return credentials;\n    };\n};\n","import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { getProfileName } from \"@aws-sdk/shared-ini-file-loader\";\nimport { resolveCredentialSource } from \"./resolveCredentialSource\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const isAssumeRoleProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 &&\n    (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));\nconst isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\nconst isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\nexport const resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {\n    const data = profiles[profileName];\n    if (!options.roleAssumer) {\n        throw new CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);\n    }\n    const { source_profile } = data;\n    if (source_profile && source_profile in visitedProfiles) {\n        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` +\n            ` ${getProfileName(options)}. Profiles visited: ` +\n            Object.keys(visitedProfiles).join(\", \"), false);\n    }\n    const sourceCredsProvider = source_profile\n        ? resolveProfileData(source_profile, profiles, options, {\n            ...visitedProfiles,\n            [source_profile]: true,\n        })\n        : resolveCredentialSource(data.credential_source, profileName)();\n    const params = {\n        RoleArn: data.role_arn,\n        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,\n        ExternalId: data.external_id,\n    };\n    const { mfa_serial } = data;\n    if (mfa_serial) {\n        if (!options.mfaCodeProvider) {\n            throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);\n        }\n        params.SerialNumber = mfa_serial;\n        params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n    }\n    const sourceCreds = await sourceCredsProvider;\n    return options.roleAssumer(sourceCreds, params);\n};\n","import { fromEnv } from \"@aws-sdk/credential-provider-env\";\nimport { fromContainerMetadata, fromInstanceMetadata } from \"@aws-sdk/credential-provider-imds\";\nimport { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nexport const resolveCredentialSource = (credentialSource, profileName) => {\n    const sourceProvidersMap = {\n        EcsContainer: fromContainerMetadata,\n        Ec2InstanceMetadata: fromInstanceMetadata,\n        Environment: fromEnv,\n    };\n    if (credentialSource in sourceProvidersMap) {\n        return sourceProvidersMap[credentialSource]();\n    }\n    else {\n        throw new CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` +\n            `expected EcsContainer or Ec2InstanceMetadata or Environment.`);\n    }\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"child_process\");","export const getValidatedProcessCredentials = (profileName, data) => {\n    if (data.Version !== 1) {\n        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);\n    }\n    if (data.AccessKeyId === undefined || data.SecretAccessKey === undefined) {\n        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);\n    }\n    if (data.Expiration) {\n        const currentTime = new Date();\n        const expireTime = new Date(data.Expiration);\n        if (expireTime < currentTime) {\n            throw Error(`Profile ${profileName} credential_process returned expired credentials.`);\n        }\n    }\n    return {\n        accessKeyId: data.AccessKeyId,\n        secretAccessKey: data.SecretAccessKey,\n        ...(data.SessionToken && { sessionToken: data.SessionToken }),\n        ...(data.Expiration && { expiration: new Date(data.Expiration) }),\n    };\n};\n","import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport { getValidatedProcessCredentials } from \"./getValidatedProcessCredentials\";\nexport const resolveProcessCredentials = async (profileName, profiles) => {\n    const profile = profiles[profileName];\n    if (profiles[profileName]) {\n        const credentialProcess = profile[\"credential_process\"];\n        if (credentialProcess !== undefined) {\n            const execPromise = promisify(exec);\n            try {\n                const { stdout } = await execPromise(credentialProcess);\n                let data;\n                try {\n                    data = JSON.parse(stdout.trim());\n                }\n                catch {\n                    throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);\n                }\n                return getValidatedProcessCredentials(profileName, data);\n            }\n            catch (error) {\n                throw new CredentialsProviderError(error.message);\n            }\n        }\n        else {\n            throw new CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);\n        }\n    }\n    else {\n        throw new CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);\n    }\n};\n","import { getProfileName, parseKnownFiles } from \"@aws-sdk/shared-ini-file-loader\";\nimport { resolveProcessCredentials } from \"./resolveProcessCredentials\";\nexport const fromProcess = (init = {}) => async () => {\n    const profiles = await parseKnownFiles(init);\n    return resolveProcessCredentials(getProfileName(init), profiles);\n};\n","export const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","import { fromArrayBuffer, fromString } from \"@aws-sdk/util-buffer-from\";\nimport { toUint8Array } from \"@aws-sdk/util-utf8\";\nimport { Buffer } from \"buffer\";\nimport { createHash, createHmac } from \"crypto\";\nexport class Hash {\n    constructor(algorithmIdentifier, secret) {\n        this.algorithmIdentifier = algorithmIdentifier;\n        this.secret = secret;\n        this.reset();\n    }\n    update(toHash, encoding) {\n        this.hash.update(toUint8Array(castSourceData(toHash, encoding)));\n    }\n    digest() {\n        return Promise.resolve(this.hash.digest());\n    }\n    reset() {\n        this.hash = this.secret\n            ? createHmac(this.algorithmIdentifier, castSourceData(this.secret))\n            : createHash(this.algorithmIdentifier);\n    }\n}\nfunction castSourceData(toCast, encoding) {\n    if (Buffer.isBuffer(toCast)) {\n        return toCast;\n    }\n    if (typeof toCast === \"string\") {\n        return fromString(toCast, encoding);\n    }\n    if (ArrayBuffer.isView(toCast)) {\n        return fromArrayBuffer(toCast.buffer, toCast.byteOffset, toCast.byteLength);\n    }\n    return fromArrayBuffer(toCast);\n}\n","export const NODEJS_TIMEOUT_ERROR_CODES = [\"ECONNRESET\", \"EPIPE\", \"ETIMEDOUT\"];\n","const getTransformedHeaders = (headers) => {\n    const transformedHeaders = {};\n    for (const name of Object.keys(headers)) {\n        const headerValues = headers[name];\n        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(\",\") : headerValues;\n    }\n    return transformedHeaders;\n};\nexport { getTransformedHeaders };\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"stream\");","import { Readable } from \"stream\";\nexport function writeRequestBody(httpRequest, request) {\n    const expect = request.headers[\"Expect\"] || request.headers[\"expect\"];\n    if (expect === \"100-continue\") {\n        httpRequest.on(\"continue\", () => {\n            writeBody(httpRequest, request.body);\n        });\n    }\n    else {\n        writeBody(httpRequest, request.body);\n    }\n}\nfunction writeBody(httpRequest, body) {\n    if (body instanceof Readable) {\n        body.pipe(httpRequest);\n    }\n    else if (body) {\n        httpRequest.end(Buffer.from(body));\n    }\n    else {\n        httpRequest.end();\n    }\n}\n","import { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { buildQueryString } from \"@aws-sdk/querystring-builder\";\nimport { Agent as hAgent, request as hRequest } from \"http\";\nimport { Agent as hsAgent, request as hsRequest } from \"https\";\nimport { NODEJS_TIMEOUT_ERROR_CODES } from \"./constants\";\nimport { getTransformedHeaders } from \"./get-transformed-headers\";\nimport { setConnectionTimeout } from \"./set-connection-timeout\";\nimport { setSocketTimeout } from \"./set-socket-timeout\";\nimport { writeRequestBody } from \"./write-request-body\";\nimport { setSocketKeepAlive } from \"./set-socket-keep-alive\";\nexport const DEFAULT_REQUEST_TIMEOUT = 0;\nexport class NodeHttpHandler {\n    constructor(options) {\n        this.metadata = { handlerProtocol: \"http/1.1\" };\n        this.configProvider = new Promise((resolve, reject) => {\n            if (typeof options === \"function\") {\n                options()\n                    .then((_options) => {\n                    resolve(this.resolveDefaultConfig(_options));\n                })\n                    .catch(reject);\n            }\n            else {\n                resolve(this.resolveDefaultConfig(options));\n            }\n        });\n    }\n    resolveDefaultConfig(options) {\n        const { requestTimeout, connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};\n        const keepAlive = true;\n        const maxSockets = 50;\n        return {\n            connectionTimeout,\n            requestTimeout: requestTimeout ?? socketTimeout,\n            httpAgent: httpAgent || new hAgent({ keepAlive, maxSockets }),\n            httpsAgent: httpsAgent || new hsAgent({ keepAlive, maxSockets }),\n        };\n    }\n    destroy() {\n        this.config?.httpAgent?.destroy();\n        this.config?.httpsAgent?.destroy();\n    }\n    async handle(request, { abortSignal } = {}) {\n        if (!this.config) {\n            this.config = await this.configProvider;\n        }\n        return new Promise((resolve, reject) => {\n            if (!this.config) {\n                throw new Error(\"Node HTTP request handler config is not resolved\");\n            }\n            if (abortSignal?.aborted) {\n                const abortError = new Error(\"Request aborted\");\n                abortError.name = \"AbortError\";\n                reject(abortError);\n                return;\n            }\n            const isSSL = request.protocol === \"https:\";\n            const queryString = buildQueryString(request.query || {});\n            const nodeHttpsOptions = {\n                headers: request.headers,\n                host: request.hostname,\n                method: request.method,\n                path: queryString ? `${request.path}?${queryString}` : request.path,\n                port: request.port,\n                agent: isSSL ? this.config.httpsAgent : this.config.httpAgent,\n            };\n            const requestFunc = isSSL ? hsRequest : hRequest;\n            const req = requestFunc(nodeHttpsOptions, (res) => {\n                const httpResponse = new HttpResponse({\n                    statusCode: res.statusCode || -1,\n                    headers: getTransformedHeaders(res.headers),\n                    body: res,\n                });\n                resolve({ response: httpResponse });\n            });\n            req.on(\"error\", (err) => {\n                if (NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {\n                    reject(Object.assign(err, { name: \"TimeoutError\" }));\n                }\n                else {\n                    reject(err);\n                }\n            });\n            setConnectionTimeout(req, reject, this.config.connectionTimeout);\n            setSocketTimeout(req, reject, this.config.requestTimeout);\n            if (abortSignal) {\n                abortSignal.onabort = () => {\n                    req.abort();\n                    const abortError = new Error(\"Request aborted\");\n                    abortError.name = \"AbortError\";\n                    reject(abortError);\n                };\n            }\n            const httpAgent = nodeHttpsOptions.agent;\n            if (typeof httpAgent === \"object\" && \"keepAlive\" in httpAgent) {\n                setSocketKeepAlive(req, {\n                    keepAlive: httpAgent.keepAlive,\n                    keepAliveMsecs: httpAgent.keepAliveMsecs,\n                });\n            }\n            writeRequestBody(req, request);\n        });\n    }\n}\n","import { escapeUri } from \"@aws-sdk/util-uri-escape\";\nexport function buildQueryString(query) {\n    const parts = [];\n    for (let key of Object.keys(query).sort()) {\n        const value = query[key];\n        key = escapeUri(key);\n        if (Array.isArray(value)) {\n            for (let i = 0, iLen = value.length; i < iLen; i++) {\n                parts.push(`${key}=${escapeUri(value[i])}`);\n            }\n        }\n        else {\n            let qsEntry = key;\n            if (value || typeof value === \"string\") {\n                qsEntry += `=${escapeUri(value)}`;\n            }\n            parts.push(qsEntry);\n        }\n    }\n    return parts.join(\"&\");\n}\n","export const setConnectionTimeout = (request, reject, timeoutInMs = 0) => {\n    if (!timeoutInMs) {\n        return;\n    }\n    request.on(\"socket\", (socket) => {\n        if (socket.connecting) {\n            const timeoutId = setTimeout(() => {\n                request.destroy();\n                reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {\n                    name: \"TimeoutError\",\n                }));\n            }, timeoutInMs);\n            socket.on(\"connect\", () => {\n                clearTimeout(timeoutId);\n            });\n        }\n    });\n};\n","export const setSocketTimeout = (request, reject, timeoutInMs = 0) => {\n    request.setTimeout(timeoutInMs, () => {\n        request.destroy();\n        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: \"TimeoutError\" }));\n    });\n};\n","export const setSocketKeepAlive = (request, { keepAlive, keepAliveMsecs }) => {\n    if (keepAlive !== true) {\n        return;\n    }\n    request.on(\"socket\", (socket) => {\n        socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);\n    });\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"http2\");","export class NodeHttp2ConnectionPool {\n    constructor(sessions) {\n        this.sessions = [];\n        this.sessions = sessions ?? [];\n    }\n    poll() {\n        if (this.sessions.length > 0) {\n            return this.sessions.shift();\n        }\n    }\n    offerLast(session) {\n        this.sessions.push(session);\n    }\n    contains(session) {\n        return this.sessions.includes(session);\n    }\n    remove(session) {\n        this.sessions = this.sessions.filter((s) => s !== session);\n    }\n    [Symbol.iterator]() {\n        return this.sessions[Symbol.iterator]();\n    }\n    destroy(connection) {\n        for (const session of this.sessions) {\n            if (session === connection) {\n                if (!session.destroyed) {\n                    session.destroy();\n                }\n            }\n        }\n    }\n}\n","import { Writable } from \"stream\";\nexport class Collector extends Writable {\n    constructor() {\n        super(...arguments);\n        this.bufferedBytes = [];\n    }\n    _write(chunk, encoding, callback) {\n        this.bufferedBytes.push(chunk);\n        callback();\n    }\n}\n","import { Collector } from \"./collector\";\nexport const streamCollector = (stream) => new Promise((resolve, reject) => {\n    const collector = new Collector();\n    stream.pipe(collector);\n    stream.on(\"error\", (err) => {\n        collector.end();\n        reject(err);\n    });\n    collector.on(\"error\", reject);\n    collector.on(\"finish\", function () {\n        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));\n        resolve(bytes);\n    });\n});\n","import { fstatSync, lstatSync } from \"fs\";\nexport const calculateBodyLength = (body) => {\n    if (!body) {\n        return 0;\n    }\n    if (typeof body === \"string\") {\n        return Buffer.from(body).length;\n    }\n    else if (typeof body.byteLength === \"number\") {\n        return body.byteLength;\n    }\n    else if (typeof body.size === \"number\") {\n        return body.size;\n    }\n    else if (typeof body.path === \"string\" || Buffer.isBuffer(body.path)) {\n        return lstatSync(body.path).size;\n    }\n    else if (typeof body.fd === \"number\") {\n        return fstatSync(body.fd).size;\n    }\n    throw new Error(`Body Length computation failed for ${body}`);\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"process\");","import { loadConfig } from \"@aws-sdk/node-config-provider\";\nimport { platform, release } from \"os\";\nimport { env, versions } from \"process\";\nimport { isCrtAvailable } from \"./is-crt-available\";\nexport const UA_APP_ID_ENV_NAME = \"AWS_SDK_UA_APP_ID\";\nexport const UA_APP_ID_INI_NAME = \"sdk-ua-app-id\";\nexport const defaultUserAgent = ({ serviceId, clientVersion }) => {\n    const sections = [\n        [\"aws-sdk-js\", clientVersion],\n        [`os/${platform()}`, release()],\n        [\"lang/js\"],\n        [\"md/nodejs\", `${versions.node}`],\n    ];\n    const crtAvailable = isCrtAvailable();\n    if (crtAvailable) {\n        sections.push(crtAvailable);\n    }\n    if (serviceId) {\n        sections.push([`api/${serviceId}`, clientVersion]);\n    }\n    if (env.AWS_EXECUTION_ENV) {\n        sections.push([`exec-env/${env.AWS_EXECUTION_ENV}`]);\n    }\n    const appIdPromise = loadConfig({\n        environmentVariableSelector: (env) => env[UA_APP_ID_ENV_NAME],\n        configFileSelector: (profile) => profile[UA_APP_ID_INI_NAME],\n        default: undefined,\n    })();\n    let resolvedUserAgent = undefined;\n    return async () => {\n        if (!resolvedUserAgent) {\n            const appId = await appIdPromise;\n            resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];\n        }\n        return resolvedUserAgent;\n    };\n};\n","export const isCrtAvailable = () => {\n    try {\n        if (typeof require === \"function\" && typeof module !== \"undefined\" && require(\"aws-crt\")) {\n            return [\"md/crt-avail\"];\n        }\n        return null;\n    }\n    catch (e) {\n        return null;\n    }\n};\n","import { fromString } from \"@aws-sdk/util-buffer-from\";\nconst BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;\nexport const fromBase64 = (input) => {\n    if ((input.length * 3) % 4 !== 0) {\n        throw new TypeError(`Incorrect padding on base64 string.`);\n    }\n    if (!BASE64_REGEX.exec(input)) {\n        throw new TypeError(`Invalid base64 string.`);\n    }\n    const buffer = fromString(input, \"base64\");\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n};\n","import { fromArrayBuffer } from \"@aws-sdk/util-buffer-from\";\nexport const toBase64 = (input) => fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString(\"base64\");\n","const p = \"required\", q = \"fn\", r = \"argv\", s = \"ref\";\nconst a = \"PartitionResult\", b = \"tree\", c = \"error\", d = \"endpoint\", e = { [p]: false, \"type\": \"String\" }, f = { [p]: true, \"default\": false, \"type\": \"Boolean\" }, g = { [s]: \"Endpoint\" }, h = { [q]: \"booleanEquals\", [r]: [{ [s]: \"UseFIPS\" }, true] }, i = { [q]: \"booleanEquals\", [r]: [{ [s]: \"UseDualStack\" }, true] }, j = {}, k = { [q]: \"booleanEquals\", [r]: [true, { [q]: \"getAttr\", [r]: [{ [s]: a }, \"supportsFIPS\"] }] }, l = { [q]: \"booleanEquals\", [r]: [true, { [q]: \"getAttr\", [r]: [{ [s]: a }, \"supportsDualStack\"] }] }, m = [g], n = [h], o = [i];\nconst _data = { version: \"1.0\", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: \"aws.partition\", [r]: [{ [s]: \"Region\" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: \"isSet\", [r]: m }, { [q]: \"parseURL\", [r]: m, assign: \"url\" }], type: b, rules: [{ conditions: n, error: \"Invalid Configuration: FIPS and custom endpoint are not supported\", type: c }, { type: b, rules: [{ conditions: o, error: \"Invalid Configuration: Dualstack and custom endpoint are not supported\", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: \"https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: j, headers: j }, type: d }] }, { error: \"FIPS and DualStack are enabled, but this partition does not support one or both\", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: \"https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}\", properties: j, headers: j }, type: d }] }] }, { error: \"FIPS is enabled but this partition does not support FIPS\", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: \"https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: j, headers: j }, type: d }] }, { error: \"DualStack is enabled but this partition does not support DualStack\", type: c }] }, { endpoint: { url: \"https://portal.sso.{Region}.{PartitionResult#dnsSuffix}\", properties: j, headers: j }, type: d }] }] };\nexport const ruleSet = _data;\n","import { resolveEndpoint } from \"@aws-sdk/util-endpoints\";\nimport { ruleSet } from \"./ruleset\";\nexport const defaultEndpointResolver = (endpointParams, context = {}) => {\n    return resolveEndpoint(ruleSet, {\n        endpointParams: endpointParams,\n        logger: context.logger,\n    });\n};\n","export const AWS_EXECUTION_ENV = \"AWS_EXECUTION_ENV\";\nexport const AWS_REGION_ENV = \"AWS_REGION\";\nexport const AWS_DEFAULT_REGION_ENV = \"AWS_DEFAULT_REGION\";\nexport const ENV_IMDS_DISABLED = \"AWS_EC2_METADATA_DISABLED\";\nexport const DEFAULTS_MODE_OPTIONS = [\"in-region\", \"cross-region\", \"mobile\", \"standard\", \"legacy\"];\nexport const IMDS_REGION_PATH = \"/latest/meta-data/placement/region\";\n","const AWS_DEFAULTS_MODE_ENV = \"AWS_DEFAULTS_MODE\";\nconst AWS_DEFAULTS_MODE_CONFIG = \"defaults_mode\";\nexport const NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => {\n        return env[AWS_DEFAULTS_MODE_ENV];\n    },\n    configFileSelector: (profile) => {\n        return profile[AWS_DEFAULTS_MODE_CONFIG];\n    },\n    default: \"legacy\",\n};\n","import { NODE_REGION_CONFIG_OPTIONS } from \"@aws-sdk/config-resolver\";\nimport { getInstanceMetadataEndpoint, httpRequest } from \"@aws-sdk/credential-provider-imds\";\nimport { loadConfig } from \"@aws-sdk/node-config-provider\";\nimport { memoize } from \"@aws-sdk/property-provider\";\nimport { AWS_DEFAULT_REGION_ENV, AWS_EXECUTION_ENV, AWS_REGION_ENV, DEFAULTS_MODE_OPTIONS, ENV_IMDS_DISABLED, IMDS_REGION_PATH, } from \"./constants\";\nimport { NODE_DEFAULTS_MODE_CONFIG_OPTIONS } from \"./defaultsModeConfig\";\nexport const resolveDefaultsModeConfig = ({ region = loadConfig(NODE_REGION_CONFIG_OPTIONS), defaultsMode = loadConfig(NODE_DEFAULTS_MODE_CONFIG_OPTIONS), } = {}) => memoize(async () => {\n    const mode = typeof defaultsMode === \"function\" ? await defaultsMode() : defaultsMode;\n    switch (mode?.toLowerCase()) {\n        case \"auto\":\n            return resolveNodeDefaultsModeAuto(region);\n        case \"in-region\":\n        case \"cross-region\":\n        case \"mobile\":\n        case \"standard\":\n        case \"legacy\":\n            return Promise.resolve(mode?.toLocaleLowerCase());\n        case undefined:\n            return Promise.resolve(\"legacy\");\n        default:\n            throw new Error(`Invalid parameter for \"defaultsMode\", expect ${DEFAULTS_MODE_OPTIONS.join(\", \")}, got ${mode}`);\n    }\n});\nconst resolveNodeDefaultsModeAuto = async (clientRegion) => {\n    if (clientRegion) {\n        const resolvedRegion = typeof clientRegion === \"function\" ? await clientRegion() : clientRegion;\n        const inferredRegion = await inferPhysicalRegion();\n        if (!inferredRegion) {\n            return \"standard\";\n        }\n        if (resolvedRegion === inferredRegion) {\n            return \"in-region\";\n        }\n        else {\n            return \"cross-region\";\n        }\n    }\n    return \"standard\";\n};\nconst inferPhysicalRegion = async () => {\n    if (process.env[AWS_EXECUTION_ENV] && (process.env[AWS_REGION_ENV] || process.env[AWS_DEFAULT_REGION_ENV])) {\n        return process.env[AWS_REGION_ENV] ?? process.env[AWS_DEFAULT_REGION_ENV];\n    }\n    if (!process.env[ENV_IMDS_DISABLED]) {\n        try {\n            const endpoint = await getInstanceMetadataEndpoint();\n            return (await httpRequest({ ...endpoint, path: IMDS_REGION_PATH })).toString();\n        }\n        catch (e) {\n        }\n    }\n};\n","import packageInfo from \"../package.json\";\nimport { NODE_REGION_CONFIG_FILE_OPTIONS, NODE_REGION_CONFIG_OPTIONS, NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, } from \"@aws-sdk/config-resolver\";\nimport { Hash } from \"@aws-sdk/hash-node\";\nimport { NODE_MAX_ATTEMPT_CONFIG_OPTIONS, NODE_RETRY_MODE_CONFIG_OPTIONS } from \"@aws-sdk/middleware-retry\";\nimport { loadConfig as loadNodeConfig } from \"@aws-sdk/node-config-provider\";\nimport { NodeHttpHandler as RequestHandler, streamCollector } from \"@aws-sdk/node-http-handler\";\nimport { calculateBodyLength } from \"@aws-sdk/util-body-length-node\";\nimport { DEFAULT_RETRY_MODE } from \"@aws-sdk/util-retry\";\nimport { defaultUserAgent } from \"@aws-sdk/util-user-agent-node\";\nimport { getRuntimeConfig as getSharedRuntimeConfig } from \"./runtimeConfig.shared\";\nimport { loadConfigsForDefaultMode } from \"@aws-sdk/smithy-client\";\nimport { resolveDefaultsModeConfig } from \"@aws-sdk/util-defaults-mode-node\";\nimport { emitWarningIfUnsupportedVersion } from \"@aws-sdk/smithy-client\";\nexport const getRuntimeConfig = (config) => {\n    emitWarningIfUnsupportedVersion(process.version);\n    const defaultsMode = resolveDefaultsModeConfig(config);\n    const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);\n    const clientSharedValues = getSharedRuntimeConfig(config);\n    return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"node\",\n        defaultsMode,\n        bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,\n        defaultUserAgentProvider: config?.defaultUserAgentProvider ??\n            defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: packageInfo.version }),\n        maxAttempts: config?.maxAttempts ?? loadNodeConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),\n        region: config?.region ?? loadNodeConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),\n        requestHandler: config?.requestHandler ?? new RequestHandler(defaultConfigProvider),\n        retryMode: config?.retryMode ??\n            loadNodeConfig({\n                ...NODE_RETRY_MODE_CONFIG_OPTIONS,\n                default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE,\n            }),\n        sha256: config?.sha256 ?? Hash.bind(null, \"sha256\"),\n        streamCollector: config?.streamCollector ?? streamCollector,\n        useDualstackEndpoint: config?.useDualstackEndpoint ?? loadNodeConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),\n        useFipsEndpoint: config?.useFipsEndpoint ?? loadNodeConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),\n    };\n};\n","import { NoOpLogger } from \"@aws-sdk/smithy-client\";\nimport { parseUrl } from \"@aws-sdk/url-parser\";\nimport { fromBase64, toBase64 } from \"@aws-sdk/util-base64\";\nimport { fromUtf8, toUtf8 } from \"@aws-sdk/util-utf8\";\nimport { defaultEndpointResolver } from \"./endpoint/endpointResolver\";\nexport const getRuntimeConfig = (config) => ({\n    apiVersion: \"2019-06-10\",\n    base64Decoder: config?.base64Decoder ?? fromBase64,\n    base64Encoder: config?.base64Encoder ?? toBase64,\n    disableHostPrefix: config?.disableHostPrefix ?? false,\n    endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,\n    logger: config?.logger ?? new NoOpLogger(),\n    serviceId: config?.serviceId ?? \"SSO\",\n    urlParser: config?.urlParser ?? parseUrl,\n    utf8Decoder: config?.utf8Decoder ?? fromUtf8,\n    utf8Encoder: config?.utf8Encoder ?? toUtf8,\n});\n","import { resolveRegionConfig } from \"@aws-sdk/config-resolver\";\nimport { getContentLengthPlugin } from \"@aws-sdk/middleware-content-length\";\nimport { resolveEndpointConfig } from \"@aws-sdk/middleware-endpoint\";\nimport { getHostHeaderPlugin, resolveHostHeaderConfig, } from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { getRecursionDetectionPlugin } from \"@aws-sdk/middleware-recursion-detection\";\nimport { getRetryPlugin, resolveRetryConfig } from \"@aws-sdk/middleware-retry\";\nimport { getUserAgentPlugin, resolveUserAgentConfig, } from \"@aws-sdk/middleware-user-agent\";\nimport { Client as __Client, } from \"@aws-sdk/smithy-client\";\nimport { resolveClientEndpointParameters, } from \"./endpoint/EndpointParameters\";\nimport { getRuntimeConfig as __getRuntimeConfig } from \"./runtimeConfig\";\nexport class SSOClient extends __Client {\n    constructor(configuration) {\n        const _config_0 = __getRuntimeConfig(configuration);\n        const _config_1 = resolveClientEndpointParameters(_config_0);\n        const _config_2 = resolveRegionConfig(_config_1);\n        const _config_3 = resolveEndpointConfig(_config_2);\n        const _config_4 = resolveRetryConfig(_config_3);\n        const _config_5 = resolveHostHeaderConfig(_config_4);\n        const _config_6 = resolveUserAgentConfig(_config_5);\n        super(_config_6);\n        this.config = _config_6;\n        this.middlewareStack.use(getRetryPlugin(this.config));\n        this.middlewareStack.use(getContentLengthPlugin(this.config));\n        this.middlewareStack.use(getHostHeaderPlugin(this.config));\n        this.middlewareStack.use(getLoggerPlugin(this.config));\n        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));\n        this.middlewareStack.use(getUserAgentPlugin(this.config));\n    }\n    destroy() {\n        super.destroy();\n    }\n}\n","export const resolveClientEndpointParameters = (options) => {\n    return {\n        ...options,\n        useDualstackEndpoint: options.useDualstackEndpoint ?? false,\n        useFipsEndpoint: options.useFipsEndpoint ?? false,\n        defaultSigningName: \"awsssoportal\",\n    };\n};\n","import { ServiceException as __ServiceException, } from \"@aws-sdk/smithy-client\";\nexport class SSOServiceException extends __ServiceException {\n    constructor(options) {\n        super(options);\n        Object.setPrototypeOf(this, SSOServiceException.prototype);\n    }\n}\n","import { SENSITIVE_STRING } from \"@aws-sdk/smithy-client\";\nimport { SSOServiceException as __BaseException } from \"./SSOServiceException\";\nexport class InvalidRequestException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidRequestException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidRequestException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidRequestException.prototype);\n    }\n}\nexport class ResourceNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourceNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourceNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);\n    }\n}\nexport class TooManyRequestsException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"TooManyRequestsException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"TooManyRequestsException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, TooManyRequestsException.prototype);\n    }\n}\nexport class UnauthorizedException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnauthorizedException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnauthorizedException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnauthorizedException.prototype);\n    }\n}\nexport const GetRoleCredentialsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.accessToken && { accessToken: SENSITIVE_STRING }),\n});\nexport const RoleCredentialsFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.secretAccessKey && { secretAccessKey: SENSITIVE_STRING }),\n    ...(obj.sessionToken && { sessionToken: SENSITIVE_STRING }),\n});\nexport const GetRoleCredentialsResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.roleCredentials && { roleCredentials: RoleCredentialsFilterSensitiveLog(obj.roleCredentials) }),\n});\nexport const ListAccountRolesRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.accessToken && { accessToken: SENSITIVE_STRING }),\n});\nexport const ListAccountsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.accessToken && { accessToken: SENSITIVE_STRING }),\n});\nexport const LogoutRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.accessToken && { accessToken: SENSITIVE_STRING }),\n});\n","import { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { _json, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, map, take, withBaseException, } from \"@aws-sdk/smithy-client\";\nimport { InvalidRequestException, ResourceNotFoundException, TooManyRequestsException, UnauthorizedException, } from \"../models/models_0\";\nimport { SSOServiceException as __BaseException } from \"../models/SSOServiceException\";\nexport const se_GetRoleCredentialsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-sso_bearer_token\": input.accessToken,\n    });\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/federation/credentials\";\n    const query = map({\n        role_name: [, __expectNonNull(input.roleName, `roleName`)],\n        account_id: [, __expectNonNull(input.accountId, `accountId`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_ListAccountRolesCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-sso_bearer_token\": input.accessToken,\n    });\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/assignment/roles\";\n    const query = map({\n        next_token: [, input.nextToken],\n        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],\n        account_id: [, __expectNonNull(input.accountId, `accountId`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_ListAccountsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-sso_bearer_token\": input.accessToken,\n    });\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/assignment/accounts\";\n    const query = map({\n        next_token: [, input.nextToken],\n        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_LogoutCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-sso_bearer_token\": input.accessToken,\n    });\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/logout\";\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexport const de_GetRoleCredentialsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetRoleCredentialsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        roleCredentials: _json,\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nconst de_GetRoleCredentialsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.sso#InvalidRequestException\":\n            throw await de_InvalidRequestExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.sso#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"TooManyRequestsException\":\n        case \"com.amazonaws.sso#TooManyRequestsException\":\n            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);\n        case \"UnauthorizedException\":\n        case \"com.amazonaws.sso#UnauthorizedException\":\n            throw await de_UnauthorizedExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListAccountRolesCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_ListAccountRolesCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        nextToken: __expectString,\n        roleList: _json,\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nconst de_ListAccountRolesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.sso#InvalidRequestException\":\n            throw await de_InvalidRequestExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.sso#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"TooManyRequestsException\":\n        case \"com.amazonaws.sso#TooManyRequestsException\":\n            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);\n        case \"UnauthorizedException\":\n        case \"com.amazonaws.sso#UnauthorizedException\":\n            throw await de_UnauthorizedExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListAccountsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_ListAccountsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        accountList: _json,\n        nextToken: __expectString,\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nconst de_ListAccountsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.sso#InvalidRequestException\":\n            throw await de_InvalidRequestExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.sso#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"TooManyRequestsException\":\n        case \"com.amazonaws.sso#TooManyRequestsException\":\n            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);\n        case \"UnauthorizedException\":\n        case \"com.amazonaws.sso#UnauthorizedException\":\n            throw await de_UnauthorizedExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_LogoutCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_LogoutCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_LogoutCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.sso#InvalidRequestException\":\n            throw await de_InvalidRequestExceptionRes(parsedOutput, context);\n        case \"TooManyRequestsException\":\n        case \"com.amazonaws.sso#TooManyRequestsException\":\n            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);\n        case \"UnauthorizedException\":\n        case \"com.amazonaws.sso#UnauthorizedException\":\n            throw await de_UnauthorizedExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nconst throwDefaultError = withBaseException(__BaseException);\nconst de_InvalidRequestExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new InvalidRequestException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new ResourceNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new TooManyRequestsException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_UnauthorizedExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new UnauthorizedException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst isSerializableHeaderValue = (value) => value !== undefined &&\n    value !== null &&\n    value !== \"\" &&\n    (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n    (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        return JSON.parse(encoded);\n    }\n    return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n    const value = await parseBody(errorBody, context);\n    value.message = value.message ?? value.Message;\n    return value;\n};\nconst loadRestJsonErrorCode = (output, data) => {\n    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n    const sanitizeErrorCode = (rawValue) => {\n        let cleanValue = rawValue;\n        if (typeof cleanValue === \"number\") {\n            cleanValue = cleanValue.toString();\n        }\n        if (cleanValue.indexOf(\",\") >= 0) {\n            cleanValue = cleanValue.split(\",\")[0];\n        }\n        if (cleanValue.indexOf(\":\") >= 0) {\n            cleanValue = cleanValue.split(\":\")[0];\n        }\n        if (cleanValue.indexOf(\"#\") >= 0) {\n            cleanValue = cleanValue.split(\"#\")[1];\n        }\n        return cleanValue;\n    };\n    const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n    if (headerKey !== undefined) {\n        return sanitizeErrorCode(output.headers[headerKey]);\n    }\n    if (data.code !== undefined) {\n        return sanitizeErrorCode(data.code);\n    }\n    if (data[\"__type\"] !== undefined) {\n        return sanitizeErrorCode(data[\"__type\"]);\n    }\n};\n","import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { GetRoleCredentialsRequestFilterSensitiveLog, GetRoleCredentialsResponseFilterSensitiveLog, } from \"../models/models_0\";\nimport { de_GetRoleCredentialsCommand, se_GetRoleCredentialsCommand } from \"../protocols/Aws_restJson1\";\nexport class GetRoleCredentialsCommand extends $Command {\n    static getEndpointParameterInstructions() {\n        return {\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getEndpointPlugin(configuration, GetRoleCredentialsCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"SSOClient\";\n        const commandName = \"GetRoleCredentialsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: GetRoleCredentialsRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: GetRoleCredentialsResponseFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return se_GetRoleCredentialsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return de_GetRoleCredentialsCommand(output, context);\n    }\n}\n","export const EXPIRE_WINDOW_MS = 5 * 60 * 1000;\nexport const REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;\n","import { ServiceException as __ServiceException, } from \"@aws-sdk/smithy-client\";\nexport class SSOOIDCServiceException extends __ServiceException {\n    constructor(options) {\n        super(options);\n        Object.setPrototypeOf(this, SSOOIDCServiceException.prototype);\n    }\n}\n","import { SSOOIDCServiceException as __BaseException } from \"./SSOOIDCServiceException\";\nexport class AccessDeniedException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AccessDeniedException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AccessDeniedException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AccessDeniedException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class AuthorizationPendingException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AuthorizationPendingException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AuthorizationPendingException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AuthorizationPendingException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class ExpiredTokenException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ExpiredTokenException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ExpiredTokenException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ExpiredTokenException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class InternalServerException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InternalServerException\",\n            $fault: \"server\",\n            ...opts,\n        });\n        this.name = \"InternalServerException\";\n        this.$fault = \"server\";\n        Object.setPrototypeOf(this, InternalServerException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class InvalidClientException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidClientException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidClientException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidClientException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class InvalidGrantException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidGrantException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidGrantException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidGrantException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class InvalidRequestException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidRequestException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidRequestException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidRequestException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class InvalidScopeException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidScopeException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidScopeException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidScopeException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class SlowDownException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"SlowDownException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"SlowDownException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, SlowDownException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class UnauthorizedClientException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnauthorizedClientException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnauthorizedClientException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnauthorizedClientException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class UnsupportedGrantTypeException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnsupportedGrantTypeException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnsupportedGrantTypeException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnsupportedGrantTypeException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class InvalidClientMetadataException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidClientMetadataException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidClientMetadataException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidClientMetadataException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\n","import { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { _json, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, map, take, withBaseException, } from \"@aws-sdk/smithy-client\";\nimport { AccessDeniedException, AuthorizationPendingException, ExpiredTokenException, InternalServerException, InvalidClientException, InvalidClientMetadataException, InvalidGrantException, InvalidRequestException, InvalidScopeException, SlowDownException, UnauthorizedClientException, UnsupportedGrantTypeException, } from \"../models/models_0\";\nimport { SSOOIDCServiceException as __BaseException } from \"../models/SSOOIDCServiceException\";\nexport const se_CreateTokenCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/json\",\n    };\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/token\";\n    let body;\n    body = JSON.stringify(take(input, {\n        clientId: [],\n        clientSecret: [],\n        code: [],\n        deviceCode: [],\n        grantType: [],\n        redirectUri: [],\n        refreshToken: [],\n        scope: (_) => _json(_),\n    }));\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexport const se_RegisterClientCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/json\",\n    };\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/client/register\";\n    let body;\n    body = JSON.stringify(take(input, {\n        clientName: [],\n        clientType: [],\n        scopes: (_) => _json(_),\n    }));\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexport const se_StartDeviceAuthorizationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/json\",\n    };\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/device_authorization\";\n    let body;\n    body = JSON.stringify(take(input, {\n        clientId: [],\n        clientSecret: [],\n        startUrl: [],\n    }));\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexport const de_CreateTokenCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CreateTokenCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        accessToken: __expectString,\n        expiresIn: __expectInt32,\n        idToken: __expectString,\n        refreshToken: __expectString,\n        tokenType: __expectString,\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nconst de_CreateTokenCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDeniedException\":\n        case \"com.amazonaws.ssooidc#AccessDeniedException\":\n            throw await de_AccessDeniedExceptionRes(parsedOutput, context);\n        case \"AuthorizationPendingException\":\n        case \"com.amazonaws.ssooidc#AuthorizationPendingException\":\n            throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.ssooidc#ExpiredTokenException\":\n            throw await de_ExpiredTokenExceptionRes(parsedOutput, context);\n        case \"InternalServerException\":\n        case \"com.amazonaws.ssooidc#InternalServerException\":\n            throw await de_InternalServerExceptionRes(parsedOutput, context);\n        case \"InvalidClientException\":\n        case \"com.amazonaws.ssooidc#InvalidClientException\":\n            throw await de_InvalidClientExceptionRes(parsedOutput, context);\n        case \"InvalidGrantException\":\n        case \"com.amazonaws.ssooidc#InvalidGrantException\":\n            throw await de_InvalidGrantExceptionRes(parsedOutput, context);\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.ssooidc#InvalidRequestException\":\n            throw await de_InvalidRequestExceptionRes(parsedOutput, context);\n        case \"InvalidScopeException\":\n        case \"com.amazonaws.ssooidc#InvalidScopeException\":\n            throw await de_InvalidScopeExceptionRes(parsedOutput, context);\n        case \"SlowDownException\":\n        case \"com.amazonaws.ssooidc#SlowDownException\":\n            throw await de_SlowDownExceptionRes(parsedOutput, context);\n        case \"UnauthorizedClientException\":\n        case \"com.amazonaws.ssooidc#UnauthorizedClientException\":\n            throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);\n        case \"UnsupportedGrantTypeException\":\n        case \"com.amazonaws.ssooidc#UnsupportedGrantTypeException\":\n            throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_RegisterClientCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_RegisterClientCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        authorizationEndpoint: __expectString,\n        clientId: __expectString,\n        clientIdIssuedAt: __expectLong,\n        clientSecret: __expectString,\n        clientSecretExpiresAt: __expectLong,\n        tokenEndpoint: __expectString,\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nconst de_RegisterClientCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerException\":\n        case \"com.amazonaws.ssooidc#InternalServerException\":\n            throw await de_InternalServerExceptionRes(parsedOutput, context);\n        case \"InvalidClientMetadataException\":\n        case \"com.amazonaws.ssooidc#InvalidClientMetadataException\":\n            throw await de_InvalidClientMetadataExceptionRes(parsedOutput, context);\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.ssooidc#InvalidRequestException\":\n            throw await de_InvalidRequestExceptionRes(parsedOutput, context);\n        case \"InvalidScopeException\":\n        case \"com.amazonaws.ssooidc#InvalidScopeException\":\n            throw await de_InvalidScopeExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_StartDeviceAuthorizationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_StartDeviceAuthorizationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        deviceCode: __expectString,\n        expiresIn: __expectInt32,\n        interval: __expectInt32,\n        userCode: __expectString,\n        verificationUri: __expectString,\n        verificationUriComplete: __expectString,\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nconst de_StartDeviceAuthorizationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerException\":\n        case \"com.amazonaws.ssooidc#InternalServerException\":\n            throw await de_InternalServerExceptionRes(parsedOutput, context);\n        case \"InvalidClientException\":\n        case \"com.amazonaws.ssooidc#InvalidClientException\":\n            throw await de_InvalidClientExceptionRes(parsedOutput, context);\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.ssooidc#InvalidRequestException\":\n            throw await de_InvalidRequestExceptionRes(parsedOutput, context);\n        case \"SlowDownException\":\n        case \"com.amazonaws.ssooidc#SlowDownException\":\n            throw await de_SlowDownExceptionRes(parsedOutput, context);\n        case \"UnauthorizedClientException\":\n        case \"com.amazonaws.ssooidc#UnauthorizedClientException\":\n            throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nconst throwDefaultError = withBaseException(__BaseException);\nconst de_AccessDeniedExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new AccessDeniedException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_AuthorizationPendingExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new AuthorizationPendingException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new ExpiredTokenException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_InternalServerExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new InternalServerException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_InvalidClientExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new InvalidClientException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_InvalidClientMetadataExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new InvalidClientMetadataException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_InvalidGrantExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new InvalidGrantException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_InvalidRequestExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new InvalidRequestException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_InvalidScopeExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new InvalidScopeException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_SlowDownExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new SlowDownException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_UnauthorizedClientExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new UnauthorizedClientException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_UnsupportedGrantTypeExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new UnsupportedGrantTypeException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst isSerializableHeaderValue = (value) => value !== undefined &&\n    value !== null &&\n    value !== \"\" &&\n    (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n    (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        return JSON.parse(encoded);\n    }\n    return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n    const value = await parseBody(errorBody, context);\n    value.message = value.message ?? value.Message;\n    return value;\n};\nconst loadRestJsonErrorCode = (output, data) => {\n    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n    const sanitizeErrorCode = (rawValue) => {\n        let cleanValue = rawValue;\n        if (typeof cleanValue === \"number\") {\n            cleanValue = cleanValue.toString();\n        }\n        if (cleanValue.indexOf(\",\") >= 0) {\n            cleanValue = cleanValue.split(\",\")[0];\n        }\n        if (cleanValue.indexOf(\":\") >= 0) {\n            cleanValue = cleanValue.split(\":\")[0];\n        }\n        if (cleanValue.indexOf(\"#\") >= 0) {\n            cleanValue = cleanValue.split(\"#\")[1];\n        }\n        return cleanValue;\n    };\n    const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n    if (headerKey !== undefined) {\n        return sanitizeErrorCode(output.headers[headerKey]);\n    }\n    if (data.code !== undefined) {\n        return sanitizeErrorCode(data.code);\n    }\n    if (data[\"__type\"] !== undefined) {\n        return sanitizeErrorCode(data[\"__type\"]);\n    }\n};\n","import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { de_CreateTokenCommand, se_CreateTokenCommand } from \"../protocols/Aws_restJson1\";\nexport class CreateTokenCommand extends $Command {\n    static getEndpointParameterInstructions() {\n        return {\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getEndpointPlugin(configuration, CreateTokenCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"SSOOIDCClient\";\n        const commandName = \"CreateTokenCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: (_) => _,\n            outputFilterSensitiveLog: (_) => _,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return se_CreateTokenCommand(input, context);\n    }\n    deserialize(output, context) {\n        return de_CreateTokenCommand(output, context);\n    }\n}\n","export const resolveClientEndpointParameters = (options) => {\n    return {\n        ...options,\n        useDualstackEndpoint: options.useDualstackEndpoint ?? false,\n        useFipsEndpoint: options.useFipsEndpoint ?? false,\n        defaultSigningName: \"awsssooidc\",\n    };\n};\n","const p = \"required\", q = \"fn\", r = \"argv\", s = \"ref\";\nconst a = \"PartitionResult\", b = \"tree\", c = \"error\", d = \"endpoint\", e = { [p]: false, \"type\": \"String\" }, f = { [p]: true, \"default\": false, \"type\": \"Boolean\" }, g = { [s]: \"Endpoint\" }, h = { [q]: \"booleanEquals\", [r]: [{ [s]: \"UseFIPS\" }, true] }, i = { [q]: \"booleanEquals\", [r]: [{ [s]: \"UseDualStack\" }, true] }, j = {}, k = { [q]: \"booleanEquals\", [r]: [true, { [q]: \"getAttr\", [r]: [{ [s]: a }, \"supportsFIPS\"] }] }, l = { [q]: \"booleanEquals\", [r]: [true, { [q]: \"getAttr\", [r]: [{ [s]: a }, \"supportsDualStack\"] }] }, m = [g], n = [h], o = [i];\nconst _data = { version: \"1.0\", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: \"aws.partition\", [r]: [{ [s]: \"Region\" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: \"isSet\", [r]: m }, { [q]: \"parseURL\", [r]: m, assign: \"url\" }], type: b, rules: [{ conditions: n, error: \"Invalid Configuration: FIPS and custom endpoint are not supported\", type: c }, { type: b, rules: [{ conditions: o, error: \"Invalid Configuration: Dualstack and custom endpoint are not supported\", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: \"https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: j, headers: j }, type: d }] }, { error: \"FIPS and DualStack are enabled, but this partition does not support one or both\", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: \"https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}\", properties: j, headers: j }, type: d }] }] }, { error: \"FIPS is enabled but this partition does not support FIPS\", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: \"https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: j, headers: j }, type: d }] }, { error: \"DualStack is enabled but this partition does not support DualStack\", type: c }] }, { endpoint: { url: \"https://oidc.{Region}.{PartitionResult#dnsSuffix}\", properties: j, headers: j }, type: d }] }] };\nexport const ruleSet = _data;\n","import { resolveEndpoint } from \"@aws-sdk/util-endpoints\";\nimport { ruleSet } from \"./ruleset\";\nexport const defaultEndpointResolver = (endpointParams, context = {}) => {\n    return resolveEndpoint(ruleSet, {\n        endpointParams: endpointParams,\n        logger: context.logger,\n    });\n};\n","import packageInfo from \"../package.json\";\nimport { NODE_REGION_CONFIG_FILE_OPTIONS, NODE_REGION_CONFIG_OPTIONS, NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, } from \"@aws-sdk/config-resolver\";\nimport { Hash } from \"@aws-sdk/hash-node\";\nimport { NODE_MAX_ATTEMPT_CONFIG_OPTIONS, NODE_RETRY_MODE_CONFIG_OPTIONS } from \"@aws-sdk/middleware-retry\";\nimport { loadConfig as loadNodeConfig } from \"@aws-sdk/node-config-provider\";\nimport { NodeHttpHandler as RequestHandler, streamCollector } from \"@aws-sdk/node-http-handler\";\nimport { calculateBodyLength } from \"@aws-sdk/util-body-length-node\";\nimport { DEFAULT_RETRY_MODE } from \"@aws-sdk/util-retry\";\nimport { defaultUserAgent } from \"@aws-sdk/util-user-agent-node\";\nimport { getRuntimeConfig as getSharedRuntimeConfig } from \"./runtimeConfig.shared\";\nimport { loadConfigsForDefaultMode } from \"@aws-sdk/smithy-client\";\nimport { resolveDefaultsModeConfig } from \"@aws-sdk/util-defaults-mode-node\";\nimport { emitWarningIfUnsupportedVersion } from \"@aws-sdk/smithy-client\";\nexport const getRuntimeConfig = (config) => {\n    emitWarningIfUnsupportedVersion(process.version);\n    const defaultsMode = resolveDefaultsModeConfig(config);\n    const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);\n    const clientSharedValues = getSharedRuntimeConfig(config);\n    return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"node\",\n        defaultsMode,\n        bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,\n        defaultUserAgentProvider: config?.defaultUserAgentProvider ??\n            defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: packageInfo.version }),\n        maxAttempts: config?.maxAttempts ?? loadNodeConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),\n        region: config?.region ?? loadNodeConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),\n        requestHandler: config?.requestHandler ?? new RequestHandler(defaultConfigProvider),\n        retryMode: config?.retryMode ??\n            loadNodeConfig({\n                ...NODE_RETRY_MODE_CONFIG_OPTIONS,\n                default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE,\n            }),\n        sha256: config?.sha256 ?? Hash.bind(null, \"sha256\"),\n        streamCollector: config?.streamCollector ?? streamCollector,\n        useDualstackEndpoint: config?.useDualstackEndpoint ?? loadNodeConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),\n        useFipsEndpoint: config?.useFipsEndpoint ?? loadNodeConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),\n    };\n};\n","import { NoOpLogger } from \"@aws-sdk/smithy-client\";\nimport { parseUrl } from \"@aws-sdk/url-parser\";\nimport { fromBase64, toBase64 } from \"@aws-sdk/util-base64\";\nimport { fromUtf8, toUtf8 } from \"@aws-sdk/util-utf8\";\nimport { defaultEndpointResolver } from \"./endpoint/endpointResolver\";\nexport const getRuntimeConfig = (config) => ({\n    apiVersion: \"2019-06-10\",\n    base64Decoder: config?.base64Decoder ?? fromBase64,\n    base64Encoder: config?.base64Encoder ?? toBase64,\n    disableHostPrefix: config?.disableHostPrefix ?? false,\n    endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,\n    logger: config?.logger ?? new NoOpLogger(),\n    serviceId: config?.serviceId ?? \"SSO OIDC\",\n    urlParser: config?.urlParser ?? parseUrl,\n    utf8Decoder: config?.utf8Decoder ?? fromUtf8,\n    utf8Encoder: config?.utf8Encoder ?? toUtf8,\n});\n","import { resolveRegionConfig } from \"@aws-sdk/config-resolver\";\nimport { getContentLengthPlugin } from \"@aws-sdk/middleware-content-length\";\nimport { resolveEndpointConfig } from \"@aws-sdk/middleware-endpoint\";\nimport { getHostHeaderPlugin, resolveHostHeaderConfig, } from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { getRecursionDetectionPlugin } from \"@aws-sdk/middleware-recursion-detection\";\nimport { getRetryPlugin, resolveRetryConfig } from \"@aws-sdk/middleware-retry\";\nimport { getUserAgentPlugin, resolveUserAgentConfig, } from \"@aws-sdk/middleware-user-agent\";\nimport { Client as __Client, } from \"@aws-sdk/smithy-client\";\nimport { resolveClientEndpointParameters, } from \"./endpoint/EndpointParameters\";\nimport { getRuntimeConfig as __getRuntimeConfig } from \"./runtimeConfig\";\nexport class SSOOIDCClient extends __Client {\n    constructor(configuration) {\n        const _config_0 = __getRuntimeConfig(configuration);\n        const _config_1 = resolveClientEndpointParameters(_config_0);\n        const _config_2 = resolveRegionConfig(_config_1);\n        const _config_3 = resolveEndpointConfig(_config_2);\n        const _config_4 = resolveRetryConfig(_config_3);\n        const _config_5 = resolveHostHeaderConfig(_config_4);\n        const _config_6 = resolveUserAgentConfig(_config_5);\n        super(_config_6);\n        this.config = _config_6;\n        this.middlewareStack.use(getRetryPlugin(this.config));\n        this.middlewareStack.use(getContentLengthPlugin(this.config));\n        this.middlewareStack.use(getHostHeaderPlugin(this.config));\n        this.middlewareStack.use(getLoggerPlugin(this.config));\n        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));\n        this.middlewareStack.use(getUserAgentPlugin(this.config));\n    }\n    destroy() {\n        super.destroy();\n    }\n}\n","import { SSOOIDCClient } from \"@aws-sdk/client-sso-oidc\";\nconst ssoOidcClientsHash = {};\nexport const getSsoOidcClient = (ssoRegion) => {\n    if (ssoOidcClientsHash[ssoRegion]) {\n        return ssoOidcClientsHash[ssoRegion];\n    }\n    const ssoOidcClient = new SSOOIDCClient({ region: ssoRegion });\n    ssoOidcClientsHash[ssoRegion] = ssoOidcClient;\n    return ssoOidcClient;\n};\n","import { CreateTokenCommand } from \"@aws-sdk/client-sso-oidc\";\nimport { getSsoOidcClient } from \"./getSsoOidcClient\";\nexport const getNewSsoOidcToken = (ssoToken, ssoRegion) => {\n    const ssoOidcClient = getSsoOidcClient(ssoRegion);\n    return ssoOidcClient.send(new CreateTokenCommand({\n        clientId: ssoToken.clientId,\n        clientSecret: ssoToken.clientSecret,\n        refreshToken: ssoToken.refreshToken,\n        grantType: \"refresh_token\",\n    }));\n};\n","import { TokenProviderError } from \"@aws-sdk/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenExpiry = (token) => {\n    if (token.expiration && token.expiration.getTime() < Date.now()) {\n        throw new TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);\n    }\n};\n","import { TokenProviderError } from \"@aws-sdk/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenKey = (key, value, forRefresh = false) => {\n    if (typeof value === \"undefined\") {\n        throw new TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? \". Cannot refresh\" : \"\"}. ${REFRESH_MESSAGE}`, false);\n    }\n};\n","import { getSSOTokenFilepath } from \"@aws-sdk/shared-ini-file-loader\";\nimport { promises as fsPromises } from \"fs\";\nconst { writeFile } = fsPromises;\nexport const writeSSOTokenToFile = (id, ssoToken) => {\n    const tokenFilepath = getSSOTokenFilepath(id);\n    const tokenString = JSON.stringify(ssoToken, null, 2);\n    return writeFile(tokenFilepath, tokenString);\n};\n","import { TokenProviderError } from \"@aws-sdk/property-provider\";\nimport { getProfileName, getSSOTokenFromFile, loadSsoSessionData, parseKnownFiles, } from \"@aws-sdk/shared-ini-file-loader\";\nimport { EXPIRE_WINDOW_MS, REFRESH_MESSAGE } from \"./constants\";\nimport { getNewSsoOidcToken } from \"./getNewSsoOidcToken\";\nimport { validateTokenExpiry } from \"./validateTokenExpiry\";\nimport { validateTokenKey } from \"./validateTokenKey\";\nimport { writeSSOTokenToFile } from \"./writeSSOTokenToFile\";\nconst lastRefreshAttemptTime = new Date(0);\nexport const fromSso = (init = {}) => async () => {\n    const profiles = await parseKnownFiles(init);\n    const profileName = getProfileName(init);\n    const profile = profiles[profileName];\n    if (!profile) {\n        throw new TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);\n    }\n    else if (!profile[\"sso_session\"]) {\n        throw new TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);\n    }\n    const ssoSessionName = profile[\"sso_session\"];\n    const ssoSessions = await loadSsoSessionData(init);\n    const ssoSession = ssoSessions[ssoSessionName];\n    if (!ssoSession) {\n        throw new TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);\n    }\n    for (const ssoSessionRequiredKey of [\"sso_start_url\", \"sso_region\"]) {\n        if (!ssoSession[ssoSessionRequiredKey]) {\n            throw new TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);\n        }\n    }\n    const ssoStartUrl = ssoSession[\"sso_start_url\"];\n    const ssoRegion = ssoSession[\"sso_region\"];\n    let ssoToken;\n    try {\n        ssoToken = await getSSOTokenFromFile(ssoSessionName);\n    }\n    catch (e) {\n        throw new TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);\n    }\n    validateTokenKey(\"accessToken\", ssoToken.accessToken);\n    validateTokenKey(\"expiresAt\", ssoToken.expiresAt);\n    const { accessToken, expiresAt } = ssoToken;\n    const existingToken = { token: accessToken, expiration: new Date(expiresAt) };\n    if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {\n        return existingToken;\n    }\n    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n    validateTokenKey(\"clientId\", ssoToken.clientId, true);\n    validateTokenKey(\"clientSecret\", ssoToken.clientSecret, true);\n    validateTokenKey(\"refreshToken\", ssoToken.refreshToken, true);\n    try {\n        lastRefreshAttemptTime.setTime(Date.now());\n        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion);\n        validateTokenKey(\"accessToken\", newSsoOidcToken.accessToken);\n        validateTokenKey(\"expiresIn\", newSsoOidcToken.expiresIn);\n        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);\n        try {\n            await writeSSOTokenToFile(ssoSessionName, {\n                ...ssoToken,\n                accessToken: newSsoOidcToken.accessToken,\n                expiresAt: newTokenExpiration.toISOString(),\n                refreshToken: newSsoOidcToken.refreshToken,\n            });\n        }\n        catch (error) {\n        }\n        return {\n            token: newSsoOidcToken.accessToken,\n            expiration: newTokenExpiration,\n        };\n    }\n    catch (error) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n};\n","import { GetRoleCredentialsCommand, SSOClient } from \"@aws-sdk/client-sso\";\nimport { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { getSSOTokenFromFile } from \"@aws-sdk/shared-ini-file-loader\";\nimport { fromSso as getSsoTokenProvider } from \"@aws-sdk/token-providers\";\nconst EXPIRE_WINDOW_MS = 15 * 60 * 1000;\nconst SHOULD_FAIL_CREDENTIAL_CHAIN = false;\nexport const resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, profile, }) => {\n    let token;\n    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;\n    if (ssoSession) {\n        try {\n            const _token = await getSsoTokenProvider({ profile })();\n            token = {\n                accessToken: _token.token,\n                expiresAt: new Date(_token.expiration).toISOString(),\n            };\n        }\n        catch (e) {\n            throw new CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);\n        }\n    }\n    else {\n        try {\n            token = await getSSOTokenFromFile(ssoStartUrl);\n        }\n        catch (e) {\n            throw new CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);\n        }\n    }\n    if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {\n        throw new CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    const { accessToken } = token;\n    const sso = ssoClient || new SSOClient({ region: ssoRegion });\n    let ssoResp;\n    try {\n        ssoResp = await sso.send(new GetRoleCredentialsCommand({\n            accountId: ssoAccountId,\n            roleName: ssoRoleName,\n            accessToken,\n        }));\n    }\n    catch (e) {\n        throw CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;\n    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {\n        throw new CredentialsProviderError(\"SSO returns an invalid temporary credential.\", SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };\n};\n","import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nexport const validateSsoProfile = (profile) => {\n    const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;\n    if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {\n        throw new CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters \"sso_account_id\", ` +\n            `\"sso_region\", \"sso_role_name\", \"sso_start_url\". Got ${Object.keys(profile).join(\", \")}\\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);\n    }\n    return profile;\n};\n","import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { getProfileName, loadSsoSessionData, parseKnownFiles, } from \"@aws-sdk/shared-ini-file-loader\";\nimport { isSsoProfile } from \"./isSsoProfile\";\nimport { resolveSSOCredentials } from \"./resolveSSOCredentials\";\nimport { validateSsoProfile } from \"./validateSsoProfile\";\nexport const fromSSO = (init = {}) => async () => {\n    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, ssoSession } = init;\n    const profileName = getProfileName(init);\n    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {\n        const profiles = await parseKnownFiles(init);\n        const profile = profiles[profileName];\n        if (!profile) {\n            throw new CredentialsProviderError(`Profile ${profileName} was not found.`);\n        }\n        if (!isSsoProfile(profile)) {\n            throw new CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);\n        }\n        if (profile?.sso_session) {\n            const ssoSessions = await loadSsoSessionData(init);\n            const session = ssoSessions[profile.sso_session];\n            const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;\n            if (ssoRegion && ssoRegion !== session.sso_region) {\n                throw new CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);\n            }\n            if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {\n                throw new CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);\n            }\n            profile.sso_region = session.sso_region;\n            profile.sso_start_url = session.sso_start_url;\n        }\n        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(profile);\n        return resolveSSOCredentials({\n            ssoStartUrl: sso_start_url,\n            ssoSession: sso_session,\n            ssoAccountId: sso_account_id,\n            ssoRegion: sso_region,\n            ssoRoleName: sso_role_name,\n            ssoClient: ssoClient,\n            profile: profileName,\n        });\n    }\n    else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {\n        throw new CredentialsProviderError(\"Incomplete configuration. The fromSSO() argument hash must include \" +\n            '\"ssoStartUrl\", \"ssoAccountId\", \"ssoRegion\", \"ssoRoleName\"');\n    }\n    else {\n        return resolveSSOCredentials({\n            ssoStartUrl,\n            ssoSession,\n            ssoAccountId,\n            ssoRegion,\n            ssoRoleName,\n            ssoClient,\n            profile: profileName,\n        });\n    }\n};\n","export const isStaticCredsProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.aws_access_key_id === \"string\" &&\n    typeof arg.aws_secret_access_key === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_session_token) > -1;\nexport const resolveStaticCredentials = (profile) => Promise.resolve({\n    accessKeyId: profile.aws_access_key_id,\n    secretAccessKey: profile.aws_secret_access_key,\n    sessionToken: profile.aws_session_token,\n});\n","import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { readFileSync } from \"fs\";\nimport { fromWebToken } from \"./fromWebToken\";\nconst ENV_TOKEN_FILE = \"AWS_WEB_IDENTITY_TOKEN_FILE\";\nconst ENV_ROLE_ARN = \"AWS_ROLE_ARN\";\nconst ENV_ROLE_SESSION_NAME = \"AWS_ROLE_SESSION_NAME\";\nexport const fromTokenFile = (init = {}) => async () => {\n    return resolveTokenFile(init);\n};\nconst resolveTokenFile = (init) => {\n    const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];\n    const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];\n    const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];\n    if (!webIdentityTokenFile || !roleArn) {\n        throw new CredentialsProviderError(\"Web identity configuration not specified\");\n    }\n    return fromWebToken({\n        ...init,\n        webIdentityToken: readFileSync(webIdentityTokenFile, { encoding: \"ascii\" }),\n        roleArn,\n        roleSessionName,\n    })();\n};\n","import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nexport const fromWebToken = (init) => () => {\n    const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity, } = init;\n    if (!roleAssumerWithWebIdentity) {\n        throw new CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity,` +\n            ` but no role assumption callback was provided.`, false);\n    }\n    return roleAssumerWithWebIdentity({\n        RoleArn: roleArn,\n        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,\n        WebIdentityToken: webIdentityToken,\n        ProviderId: providerId,\n        PolicyArns: policyArns,\n        Policy: policy,\n        DurationSeconds: durationSeconds,\n    });\n};\n","import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { isAssumeRoleProfile, resolveAssumeRoleCredentials } from \"./resolveAssumeRoleCredentials\";\nimport { isProcessProfile, resolveProcessCredentials } from \"./resolveProcessCredentials\";\nimport { isSsoProfile, resolveSsoCredentials } from \"./resolveSsoCredentials\";\nimport { isStaticCredsProfile, resolveStaticCredentials } from \"./resolveStaticCredentials\";\nimport { isWebIdentityProfile, resolveWebIdentityCredentials } from \"./resolveWebIdentityCredentials\";\nexport const resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {\n    const data = profiles[profileName];\n    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data);\n    }\n    if (isAssumeRoleProfile(data)) {\n        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);\n    }\n    if (isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data);\n    }\n    if (isWebIdentityProfile(data)) {\n        return resolveWebIdentityCredentials(data, options);\n    }\n    if (isProcessProfile(data)) {\n        return resolveProcessCredentials(options, profileName);\n    }\n    if (isSsoProfile(data)) {\n        return resolveSsoCredentials(data);\n    }\n    throw new CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);\n};\n","import { fromTokenFile } from \"@aws-sdk/credential-provider-web-identity\";\nexport const isWebIdentityProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.web_identity_token_file === \"string\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1;\nexport const resolveWebIdentityCredentials = async (profile, options) => fromTokenFile({\n    webIdentityTokenFile: profile.web_identity_token_file,\n    roleArn: profile.role_arn,\n    roleSessionName: profile.role_session_name,\n    roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,\n})();\n","import { fromProcess } from \"@aws-sdk/credential-provider-process\";\nexport const isProcessProfile = (arg) => Boolean(arg) && typeof arg === \"object\" && typeof arg.credential_process === \"string\";\nexport const resolveProcessCredentials = async (options, profile) => fromProcess({\n    ...options,\n    profile,\n})();\n","import { fromSSO, validateSsoProfile } from \"@aws-sdk/credential-provider-sso\";\nexport { isSsoProfile } from \"@aws-sdk/credential-provider-sso\";\nexport const resolveSsoCredentials = (data) => {\n    const { sso_start_url, sso_account_id, sso_session, sso_region, sso_role_name } = validateSsoProfile(data);\n    return fromSSO({\n        ssoStartUrl: sso_start_url,\n        ssoAccountId: sso_account_id,\n        ssoSession: sso_session,\n        ssoRegion: sso_region,\n        ssoRoleName: sso_role_name,\n    })();\n};\n","import { fromEnv } from \"@aws-sdk/credential-provider-env\";\nimport { fromIni } from \"@aws-sdk/credential-provider-ini\";\nimport { fromProcess } from \"@aws-sdk/credential-provider-process\";\nimport { fromSSO } from \"@aws-sdk/credential-provider-sso\";\nimport { fromTokenFile } from \"@aws-sdk/credential-provider-web-identity\";\nimport { chain, CredentialsProviderError, memoize } from \"@aws-sdk/property-provider\";\nimport { ENV_PROFILE } from \"@aws-sdk/shared-ini-file-loader\";\nimport { remoteProvider } from \"./remoteProvider\";\nexport const defaultProvider = (init = {}) => memoize(chain(...(init.profile || process.env[ENV_PROFILE] ? [] : [fromEnv()]), fromSSO(init), fromIni(init), fromProcess(init), fromTokenFile(init), remoteProvider(init), async () => {\n    throw new CredentialsProviderError(\"Could not load credentials from any providers\", false);\n}), (credentials) => credentials.expiration !== undefined && credentials.expiration.getTime() - Date.now() < 300000, (credentials) => credentials.expiration !== undefined);\n","import { getProfileName, parseKnownFiles } from \"@aws-sdk/shared-ini-file-loader\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const fromIni = (init = {}) => async () => {\n    const profiles = await parseKnownFiles(init);\n    return resolveProfileData(getProfileName(init), profiles, init);\n};\n","import { ENV_CMDS_FULL_URI, ENV_CMDS_RELATIVE_URI, fromContainerMetadata, fromInstanceMetadata, } from \"@aws-sdk/credential-provider-imds\";\nimport { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nexport const ENV_IMDS_DISABLED = \"AWS_EC2_METADATA_DISABLED\";\nexport const remoteProvider = (init) => {\n    if (process.env[ENV_CMDS_RELATIVE_URI] || process.env[ENV_CMDS_FULL_URI]) {\n        return fromContainerMetadata(init);\n    }\n    if (process.env[ENV_IMDS_DISABLED]) {\n        return async () => {\n            throw new CredentialsProviderError(\"EC2 Instance Metadata Service access disabled\");\n        };\n    }\n    return fromInstanceMetadata(init);\n};\n","const F = \"required\", G = \"type\", H = \"fn\", I = \"argv\", J = \"ref\";\nconst a = false, b = true, c = \"booleanEquals\", d = \"tree\", e = \"stringEquals\", f = \"sigv4\", g = \"sts\", h = \"us-east-1\", i = \"endpoint\", j = \"https://sts.{Region}.{PartitionResult#dnsSuffix}\", k = \"error\", l = \"getAttr\", m = { [F]: false, [G]: \"String\" }, n = { [F]: true, \"default\": false, [G]: \"Boolean\" }, o = { [J]: \"Endpoint\" }, p = { [H]: \"isSet\", [I]: [{ [J]: \"Region\" }] }, q = { [J]: \"Region\" }, r = { [H]: \"aws.partition\", [I]: [q], \"assign\": \"PartitionResult\" }, s = { [J]: \"UseFIPS\" }, t = { [J]: \"UseDualStack\" }, u = { \"url\": \"https://sts.amazonaws.com\", \"properties\": { \"authSchemes\": [{ \"name\": f, \"signingName\": g, \"signingRegion\": h }] }, \"headers\": {} }, v = {}, w = { \"conditions\": [{ [H]: e, [I]: [q, \"aws-global\"] }], [i]: u, [G]: i }, x = { [H]: c, [I]: [s, true] }, y = { [H]: c, [I]: [t, true] }, z = { [H]: c, [I]: [true, { [H]: l, [I]: [{ [J]: \"PartitionResult\" }, \"supportsFIPS\"] }] }, A = { [J]: \"PartitionResult\" }, B = { [H]: c, [I]: [true, { [H]: l, [I]: [A, \"supportsDualStack\"] }] }, C = [{ [H]: \"isSet\", [I]: [o] }], D = [x], E = [y];\nconst _data = { version: \"1.0\", parameters: { Region: m, UseDualStack: n, UseFIPS: n, Endpoint: m, UseGlobalEndpoint: n }, rules: [{ conditions: [{ [H]: c, [I]: [{ [J]: \"UseGlobalEndpoint\" }, b] }, { [H]: \"not\", [I]: C }, p, r, { [H]: c, [I]: [s, a] }, { [H]: c, [I]: [t, a] }], [G]: d, rules: [{ conditions: [{ [H]: e, [I]: [q, \"ap-northeast-1\"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, \"ap-south-1\"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, \"ap-southeast-1\"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, \"ap-southeast-2\"] }], endpoint: u, [G]: i }, w, { conditions: [{ [H]: e, [I]: [q, \"ca-central-1\"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, \"eu-central-1\"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, \"eu-north-1\"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, \"eu-west-1\"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, \"eu-west-2\"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, \"eu-west-3\"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, \"sa-east-1\"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, h] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, \"us-east-2\"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, \"us-west-1\"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, \"us-west-2\"] }], endpoint: u, [G]: i }, { endpoint: { url: j, properties: { authSchemes: [{ name: f, signingName: g, signingRegion: \"{Region}\" }] }, headers: v }, [G]: i }] }, { conditions: C, [G]: d, rules: [{ conditions: D, error: \"Invalid Configuration: FIPS and custom endpoint are not supported\", [G]: k }, { [G]: d, rules: [{ conditions: E, error: \"Invalid Configuration: Dualstack and custom endpoint are not supported\", [G]: k }, { endpoint: { url: o, properties: v, headers: v }, [G]: i }] }] }, { [G]: d, rules: [{ conditions: [p], [G]: d, rules: [{ conditions: [r], [G]: d, rules: [{ conditions: [x, y], [G]: d, rules: [{ conditions: [z, B], [G]: d, rules: [{ [G]: d, rules: [{ endpoint: { url: \"https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: v, headers: v }, [G]: i }] }] }, { error: \"FIPS and DualStack are enabled, but this partition does not support one or both\", [G]: k }] }, { conditions: D, [G]: d, rules: [{ conditions: [z], [G]: d, rules: [{ [G]: d, rules: [{ conditions: [{ [H]: e, [I]: [\"aws-us-gov\", { [H]: l, [I]: [A, \"name\"] }] }], endpoint: { url: \"https://sts.{Region}.amazonaws.com\", properties: v, headers: v }, [G]: i }, { endpoint: { url: \"https://sts-fips.{Region}.{PartitionResult#dnsSuffix}\", properties: v, headers: v }, [G]: i }] }] }, { error: \"FIPS is enabled but this partition does not support FIPS\", [G]: k }] }, { conditions: E, [G]: d, rules: [{ conditions: [B], [G]: d, rules: [{ [G]: d, rules: [{ endpoint: { url: \"https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: v, headers: v }, [G]: i }] }] }, { error: \"DualStack is enabled but this partition does not support DualStack\", [G]: k }] }, { [G]: d, rules: [w, { endpoint: { url: j, properties: v, headers: v }, [G]: i }] }] }] }, { error: \"Invalid Configuration: Missing Region\", [G]: k }] }] };\nexport const ruleSet = _data;\n","import { resolveEndpoint } from \"@aws-sdk/util-endpoints\";\nimport { ruleSet } from \"./ruleset\";\nexport const defaultEndpointResolver = (endpointParams, context = {}) => {\n    return resolveEndpoint(ruleSet, {\n        endpointParams: endpointParams,\n        logger: context.logger,\n    });\n};\n","import packageInfo from \"../package.json\";\nimport { decorateDefaultCredentialProvider } from \"./defaultStsRoleAssumers\";\nimport { NODE_REGION_CONFIG_FILE_OPTIONS, NODE_REGION_CONFIG_OPTIONS, NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, } from \"@aws-sdk/config-resolver\";\nimport { defaultProvider as credentialDefaultProvider } from \"@aws-sdk/credential-provider-node\";\nimport { Hash } from \"@aws-sdk/hash-node\";\nimport { NODE_MAX_ATTEMPT_CONFIG_OPTIONS, NODE_RETRY_MODE_CONFIG_OPTIONS } from \"@aws-sdk/middleware-retry\";\nimport { loadConfig as loadNodeConfig } from \"@aws-sdk/node-config-provider\";\nimport { NodeHttpHandler as RequestHandler, streamCollector } from \"@aws-sdk/node-http-handler\";\nimport { calculateBodyLength } from \"@aws-sdk/util-body-length-node\";\nimport { DEFAULT_RETRY_MODE } from \"@aws-sdk/util-retry\";\nimport { defaultUserAgent } from \"@aws-sdk/util-user-agent-node\";\nimport { getRuntimeConfig as getSharedRuntimeConfig } from \"./runtimeConfig.shared\";\nimport { loadConfigsForDefaultMode } from \"@aws-sdk/smithy-client\";\nimport { resolveDefaultsModeConfig } from \"@aws-sdk/util-defaults-mode-node\";\nimport { emitWarningIfUnsupportedVersion } from \"@aws-sdk/smithy-client\";\nexport const getRuntimeConfig = (config) => {\n    emitWarningIfUnsupportedVersion(process.version);\n    const defaultsMode = resolveDefaultsModeConfig(config);\n    const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);\n    const clientSharedValues = getSharedRuntimeConfig(config);\n    return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"node\",\n        defaultsMode,\n        bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,\n        credentialDefaultProvider: config?.credentialDefaultProvider ?? decorateDefaultCredentialProvider(credentialDefaultProvider),\n        defaultUserAgentProvider: config?.defaultUserAgentProvider ??\n            defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: packageInfo.version }),\n        maxAttempts: config?.maxAttempts ?? loadNodeConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),\n        region: config?.region ?? loadNodeConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),\n        requestHandler: config?.requestHandler ?? new RequestHandler(defaultConfigProvider),\n        retryMode: config?.retryMode ??\n            loadNodeConfig({\n                ...NODE_RETRY_MODE_CONFIG_OPTIONS,\n                default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE,\n            }),\n        sha256: config?.sha256 ?? Hash.bind(null, \"sha256\"),\n        streamCollector: config?.streamCollector ?? streamCollector,\n        useDualstackEndpoint: config?.useDualstackEndpoint ?? loadNodeConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),\n        useFipsEndpoint: config?.useFipsEndpoint ?? loadNodeConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),\n    };\n};\n","import { NoOpLogger } from \"@aws-sdk/smithy-client\";\nimport { parseUrl } from \"@aws-sdk/url-parser\";\nimport { fromBase64, toBase64 } from \"@aws-sdk/util-base64\";\nimport { fromUtf8, toUtf8 } from \"@aws-sdk/util-utf8\";\nimport { defaultEndpointResolver } from \"./endpoint/endpointResolver\";\nexport const getRuntimeConfig = (config) => ({\n    apiVersion: \"2011-06-15\",\n    base64Decoder: config?.base64Decoder ?? fromBase64,\n    base64Encoder: config?.base64Encoder ?? toBase64,\n    disableHostPrefix: config?.disableHostPrefix ?? false,\n    endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,\n    logger: config?.logger ?? new NoOpLogger(),\n    serviceId: config?.serviceId ?? \"STS\",\n    urlParser: config?.urlParser ?? parseUrl,\n    utf8Decoder: config?.utf8Decoder ?? fromUtf8,\n    utf8Encoder: config?.utf8Encoder ?? toUtf8,\n});\n","import { resolveRegionConfig } from \"@aws-sdk/config-resolver\";\nimport { getContentLengthPlugin } from \"@aws-sdk/middleware-content-length\";\nimport { resolveEndpointConfig } from \"@aws-sdk/middleware-endpoint\";\nimport { getHostHeaderPlugin, resolveHostHeaderConfig, } from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { getRecursionDetectionPlugin } from \"@aws-sdk/middleware-recursion-detection\";\nimport { getRetryPlugin, resolveRetryConfig } from \"@aws-sdk/middleware-retry\";\nimport { resolveStsAuthConfig } from \"@aws-sdk/middleware-sdk-sts\";\nimport { getUserAgentPlugin, resolveUserAgentConfig, } from \"@aws-sdk/middleware-user-agent\";\nimport { Client as __Client, } from \"@aws-sdk/smithy-client\";\nimport { resolveClientEndpointParameters, } from \"./endpoint/EndpointParameters\";\nimport { getRuntimeConfig as __getRuntimeConfig } from \"./runtimeConfig\";\nexport class STSClient extends __Client {\n    constructor(configuration) {\n        const _config_0 = __getRuntimeConfig(configuration);\n        const _config_1 = resolveClientEndpointParameters(_config_0);\n        const _config_2 = resolveRegionConfig(_config_1);\n        const _config_3 = resolveEndpointConfig(_config_2);\n        const _config_4 = resolveRetryConfig(_config_3);\n        const _config_5 = resolveHostHeaderConfig(_config_4);\n        const _config_6 = resolveStsAuthConfig(_config_5, { stsClientCtor: STSClient });\n        const _config_7 = resolveUserAgentConfig(_config_6);\n        super(_config_7);\n        this.config = _config_7;\n        this.middlewareStack.use(getRetryPlugin(this.config));\n        this.middlewareStack.use(getContentLengthPlugin(this.config));\n        this.middlewareStack.use(getHostHeaderPlugin(this.config));\n        this.middlewareStack.use(getLoggerPlugin(this.config));\n        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));\n        this.middlewareStack.use(getUserAgentPlugin(this.config));\n    }\n    destroy() {\n        super.destroy();\n    }\n}\n","export const resolveClientEndpointParameters = (options) => {\n    return {\n        ...options,\n        useDualstackEndpoint: options.useDualstackEndpoint ?? false,\n        useFipsEndpoint: options.useFipsEndpoint ?? false,\n        useGlobalEndpoint: options.useGlobalEndpoint ?? false,\n        defaultSigningName: \"sts\",\n    };\n};\n","import { resolveAwsAuthConfig } from \"@aws-sdk/middleware-signing\";\nexport const resolveStsAuthConfig = (input, { stsClientCtor }) => resolveAwsAuthConfig({\n    ...input,\n    stsClientCtor,\n});\n","import { getDefaultRoleAssumer as StsGetDefaultRoleAssumer, getDefaultRoleAssumerWithWebIdentity as StsGetDefaultRoleAssumerWithWebIdentity, } from \"./defaultStsRoleAssumers\";\nimport { STSClient } from \"./STSClient\";\nconst getCustomizableStsClientCtor = (baseCtor, customizations) => {\n    if (!customizations)\n        return baseCtor;\n    else\n        return class CustomizableSTSClient extends baseCtor {\n            constructor(config) {\n                super(config);\n                for (const customization of customizations) {\n                    this.middlewareStack.use(customization);\n                }\n            }\n        };\n};\nexport const getDefaultRoleAssumer = (stsOptions = {}, stsPlugins) => StsGetDefaultRoleAssumer(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins) => StsGetDefaultRoleAssumerWithWebIdentity(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));\nexport const decorateDefaultCredentialProvider = (provider) => (input) => provider({\n    roleAssumer: getDefaultRoleAssumer(input),\n    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input),\n    ...input,\n});\n","const s = \"required\", t = \"fn\", u = \"argv\", v = \"ref\";\nconst a = \"isSet\", b = \"tree\", c = \"error\", d = \"endpoint\", e = \"PartitionResult\", f = \"getAttr\", g = { [s]: false, \"type\": \"String\" }, h = { [s]: true, \"default\": false, \"type\": \"Boolean\" }, i = { [v]: \"Endpoint\" }, j = { [t]: \"booleanEquals\", [u]: [{ [v]: \"UseFIPS\" }, true] }, k = { [t]: \"booleanEquals\", [u]: [{ [v]: \"UseDualStack\" }, true] }, l = {}, m = { [t]: \"booleanEquals\", [u]: [true, { [t]: f, [u]: [{ [v]: e }, \"supportsFIPS\"] }] }, n = { [v]: e }, o = { [t]: \"booleanEquals\", [u]: [true, { [t]: f, [u]: [n, \"supportsDualStack\"] }] }, p = [j], q = [k], r = [{ [v]: \"Region\" }];\nconst _data = { version: \"1.0\", parameters: { Region: g, UseDualStack: h, UseFIPS: h, Endpoint: g }, rules: [{ conditions: [{ [t]: a, [u]: [i] }], type: b, rules: [{ conditions: p, error: \"Invalid Configuration: FIPS and custom endpoint are not supported\", type: c }, { type: b, rules: [{ conditions: q, error: \"Invalid Configuration: Dualstack and custom endpoint are not supported\", type: c }, { endpoint: { url: i, properties: l, headers: l }, type: d }] }] }, { type: b, rules: [{ conditions: [{ [t]: a, [u]: r }], type: b, rules: [{ conditions: [{ [t]: \"aws.partition\", [u]: r, assign: e }], type: b, rules: [{ conditions: [j, k], type: b, rules: [{ conditions: [m, o], type: b, rules: [{ type: b, rules: [{ endpoint: { url: \"https://ssm-fips.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: l, headers: l }, type: d }] }] }, { error: \"FIPS and DualStack are enabled, but this partition does not support one or both\", type: c }] }, { conditions: p, type: b, rules: [{ conditions: [m], type: b, rules: [{ type: b, rules: [{ conditions: [{ [t]: \"stringEquals\", [u]: [\"aws-us-gov\", { [t]: f, [u]: [n, \"name\"] }] }], endpoint: { url: \"https://ssm.{Region}.amazonaws.com\", properties: l, headers: l }, type: d }, { endpoint: { url: \"https://ssm-fips.{Region}.{PartitionResult#dnsSuffix}\", properties: l, headers: l }, type: d }] }] }, { error: \"FIPS is enabled but this partition does not support FIPS\", type: c }] }, { conditions: q, type: b, rules: [{ conditions: [o], type: b, rules: [{ type: b, rules: [{ endpoint: { url: \"https://ssm.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: l, headers: l }, type: d }] }] }, { error: \"DualStack is enabled but this partition does not support DualStack\", type: c }] }, { type: b, rules: [{ endpoint: { url: \"https://ssm.{Region}.{PartitionResult#dnsSuffix}\", properties: l, headers: l }, type: d }] }] }] }, { error: \"Invalid Configuration: Missing Region\", type: c }] }] };\nexport const ruleSet = _data;\n","import { resolveEndpoint } from \"@aws-sdk/util-endpoints\";\nimport { ruleSet } from \"./ruleset\";\nexport const defaultEndpointResolver = (endpointParams, context = {}) => {\n    return resolveEndpoint(ruleSet, {\n        endpointParams: endpointParams,\n        logger: context.logger,\n    });\n};\n","import packageInfo from \"../package.json\";\nimport { decorateDefaultCredentialProvider } from \"@aws-sdk/client-sts\";\nimport { NODE_REGION_CONFIG_FILE_OPTIONS, NODE_REGION_CONFIG_OPTIONS, NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, } from \"@aws-sdk/config-resolver\";\nimport { defaultProvider as credentialDefaultProvider } from \"@aws-sdk/credential-provider-node\";\nimport { Hash } from \"@aws-sdk/hash-node\";\nimport { NODE_MAX_ATTEMPT_CONFIG_OPTIONS, NODE_RETRY_MODE_CONFIG_OPTIONS } from \"@aws-sdk/middleware-retry\";\nimport { loadConfig as loadNodeConfig } from \"@aws-sdk/node-config-provider\";\nimport { NodeHttpHandler as RequestHandler, streamCollector } from \"@aws-sdk/node-http-handler\";\nimport { calculateBodyLength } from \"@aws-sdk/util-body-length-node\";\nimport { DEFAULT_RETRY_MODE } from \"@aws-sdk/util-retry\";\nimport { defaultUserAgent } from \"@aws-sdk/util-user-agent-node\";\nimport { getRuntimeConfig as getSharedRuntimeConfig } from \"./runtimeConfig.shared\";\nimport { loadConfigsForDefaultMode } from \"@aws-sdk/smithy-client\";\nimport { resolveDefaultsModeConfig } from \"@aws-sdk/util-defaults-mode-node\";\nimport { emitWarningIfUnsupportedVersion } from \"@aws-sdk/smithy-client\";\nexport const getRuntimeConfig = (config) => {\n    emitWarningIfUnsupportedVersion(process.version);\n    const defaultsMode = resolveDefaultsModeConfig(config);\n    const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);\n    const clientSharedValues = getSharedRuntimeConfig(config);\n    return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"node\",\n        defaultsMode,\n        bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,\n        credentialDefaultProvider: config?.credentialDefaultProvider ?? decorateDefaultCredentialProvider(credentialDefaultProvider),\n        defaultUserAgentProvider: config?.defaultUserAgentProvider ??\n            defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: packageInfo.version }),\n        maxAttempts: config?.maxAttempts ?? loadNodeConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),\n        region: config?.region ?? loadNodeConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),\n        requestHandler: config?.requestHandler ?? new RequestHandler(defaultConfigProvider),\n        retryMode: config?.retryMode ??\n            loadNodeConfig({\n                ...NODE_RETRY_MODE_CONFIG_OPTIONS,\n                default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE,\n            }),\n        sha256: config?.sha256 ?? Hash.bind(null, \"sha256\"),\n        streamCollector: config?.streamCollector ?? streamCollector,\n        useDualstackEndpoint: config?.useDualstackEndpoint ?? loadNodeConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),\n        useFipsEndpoint: config?.useFipsEndpoint ?? loadNodeConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),\n    };\n};\n","import { NoOpLogger } from \"@aws-sdk/smithy-client\";\nimport { parseUrl } from \"@aws-sdk/url-parser\";\nimport { fromBase64, toBase64 } from \"@aws-sdk/util-base64\";\nimport { fromUtf8, toUtf8 } from \"@aws-sdk/util-utf8\";\nimport { defaultEndpointResolver } from \"./endpoint/endpointResolver\";\nexport const getRuntimeConfig = (config) => ({\n    apiVersion: \"2014-11-06\",\n    base64Decoder: config?.base64Decoder ?? fromBase64,\n    base64Encoder: config?.base64Encoder ?? toBase64,\n    disableHostPrefix: config?.disableHostPrefix ?? false,\n    endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,\n    logger: config?.logger ?? new NoOpLogger(),\n    serviceId: config?.serviceId ?? \"SSM\",\n    urlParser: config?.urlParser ?? parseUrl,\n    utf8Decoder: config?.utf8Decoder ?? fromUtf8,\n    utf8Encoder: config?.utf8Encoder ?? toUtf8,\n});\n","import { resolveRegionConfig } from \"@aws-sdk/config-resolver\";\nimport { getContentLengthPlugin } from \"@aws-sdk/middleware-content-length\";\nimport { resolveEndpointConfig } from \"@aws-sdk/middleware-endpoint\";\nimport { getHostHeaderPlugin, resolveHostHeaderConfig, } from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { getRecursionDetectionPlugin } from \"@aws-sdk/middleware-recursion-detection\";\nimport { getRetryPlugin, resolveRetryConfig } from \"@aws-sdk/middleware-retry\";\nimport { getAwsAuthPlugin, resolveAwsAuthConfig, } from \"@aws-sdk/middleware-signing\";\nimport { getUserAgentPlugin, resolveUserAgentConfig, } from \"@aws-sdk/middleware-user-agent\";\nimport { Client as __Client, } from \"@aws-sdk/smithy-client\";\nimport { resolveClientEndpointParameters, } from \"./endpoint/EndpointParameters\";\nimport { getRuntimeConfig as __getRuntimeConfig } from \"./runtimeConfig\";\nexport class SSMClient extends __Client {\n    constructor(configuration) {\n        const _config_0 = __getRuntimeConfig(configuration);\n        const _config_1 = resolveClientEndpointParameters(_config_0);\n        const _config_2 = resolveRegionConfig(_config_1);\n        const _config_3 = resolveEndpointConfig(_config_2);\n        const _config_4 = resolveRetryConfig(_config_3);\n        const _config_5 = resolveHostHeaderConfig(_config_4);\n        const _config_6 = resolveAwsAuthConfig(_config_5);\n        const _config_7 = resolveUserAgentConfig(_config_6);\n        super(_config_7);\n        this.config = _config_7;\n        this.middlewareStack.use(getRetryPlugin(this.config));\n        this.middlewareStack.use(getContentLengthPlugin(this.config));\n        this.middlewareStack.use(getHostHeaderPlugin(this.config));\n        this.middlewareStack.use(getLoggerPlugin(this.config));\n        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));\n        this.middlewareStack.use(getAwsAuthPlugin(this.config));\n        this.middlewareStack.use(getUserAgentPlugin(this.config));\n    }\n    destroy() {\n        super.destroy();\n    }\n}\n","export const resolveClientEndpointParameters = (options) => {\n    return {\n        ...options,\n        useDualstackEndpoint: options.useDualstackEndpoint ?? false,\n        useFipsEndpoint: options.useFipsEndpoint ?? false,\n        defaultSigningName: \"ssm\",\n    };\n};\n","import { ServiceException as __ServiceException, } from \"@aws-sdk/smithy-client\";\nexport class SSMServiceException extends __ServiceException {\n    constructor(options) {\n        super(options);\n        Object.setPrototypeOf(this, SSMServiceException.prototype);\n    }\n}\n","import { SENSITIVE_STRING } from \"@aws-sdk/smithy-client\";\nimport { PatchSourceFilterSensitiveLog, } from \"./models_0\";\nimport { SSMServiceException as __BaseException } from \"./SSMServiceException\";\nexport const OpsItemStatus = {\n    APPROVED: \"Approved\",\n    CANCELLED: \"Cancelled\",\n    CANCELLING: \"Cancelling\",\n    CHANGE_CALENDAR_OVERRIDE_APPROVED: \"ChangeCalendarOverrideApproved\",\n    CHANGE_CALENDAR_OVERRIDE_REJECTED: \"ChangeCalendarOverrideRejected\",\n    CLOSED: \"Closed\",\n    COMPLETED_WITH_FAILURE: \"CompletedWithFailure\",\n    COMPLETED_WITH_SUCCESS: \"CompletedWithSuccess\",\n    FAILED: \"Failed\",\n    IN_PROGRESS: \"InProgress\",\n    OPEN: \"Open\",\n    PENDING: \"Pending\",\n    PENDING_APPROVAL: \"PendingApproval\",\n    PENDING_CHANGE_CALENDAR_OVERRIDE: \"PendingChangeCalendarOverride\",\n    REJECTED: \"Rejected\",\n    RESOLVED: \"Resolved\",\n    RUNBOOK_IN_PROGRESS: \"RunbookInProgress\",\n    SCHEDULED: \"Scheduled\",\n    TIMED_OUT: \"TimedOut\",\n};\nexport const ParametersFilterKey = {\n    KEY_ID: \"KeyId\",\n    NAME: \"Name\",\n    TYPE: \"Type\",\n};\nexport const ParameterTier = {\n    ADVANCED: \"Advanced\",\n    INTELLIGENT_TIERING: \"Intelligent-Tiering\",\n    STANDARD: \"Standard\",\n};\nexport const ParameterType = {\n    SECURE_STRING: \"SecureString\",\n    STRING: \"String\",\n    STRING_LIST: \"StringList\",\n};\nexport class InvalidFilterOption extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidFilterOption\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidFilterOption\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidFilterOption.prototype);\n    }\n}\nexport const PatchSet = {\n    Application: \"APPLICATION\",\n    Os: \"OS\",\n};\nexport const PatchProperty = {\n    PatchClassification: \"CLASSIFICATION\",\n    PatchMsrcSeverity: \"MSRC_SEVERITY\",\n    PatchPriority: \"PRIORITY\",\n    PatchProductFamily: \"PRODUCT_FAMILY\",\n    PatchSeverity: \"SEVERITY\",\n    Product: \"PRODUCT\",\n};\nexport const SessionFilterKey = {\n    INVOKED_AFTER: \"InvokedAfter\",\n    INVOKED_BEFORE: \"InvokedBefore\",\n    OWNER: \"Owner\",\n    SESSION_ID: \"SessionId\",\n    STATUS: \"Status\",\n    TARGET_ID: \"Target\",\n};\nexport const SessionState = {\n    ACTIVE: \"Active\",\n    HISTORY: \"History\",\n};\nexport const SessionStatus = {\n    CONNECTED: \"Connected\",\n    CONNECTING: \"Connecting\",\n    DISCONNECTED: \"Disconnected\",\n    FAILED: \"Failed\",\n    TERMINATED: \"Terminated\",\n    TERMINATING: \"Terminating\",\n};\nexport class OpsItemRelatedItemAssociationNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsItemRelatedItemAssociationNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsItemRelatedItemAssociationNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsItemRelatedItemAssociationNotFoundException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const CalendarState = {\n    CLOSED: \"CLOSED\",\n    OPEN: \"OPEN\",\n};\nexport class InvalidDocumentType extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidDocumentType\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidDocumentType\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidDocumentType.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class UnsupportedCalendarException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnsupportedCalendarException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnsupportedCalendarException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnsupportedCalendarException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const CommandInvocationStatus = {\n    CANCELLED: \"Cancelled\",\n    CANCELLING: \"Cancelling\",\n    DELAYED: \"Delayed\",\n    FAILED: \"Failed\",\n    IN_PROGRESS: \"InProgress\",\n    PENDING: \"Pending\",\n    SUCCESS: \"Success\",\n    TIMED_OUT: \"TimedOut\",\n};\nexport class InvalidPluginName extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidPluginName\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidPluginName\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidPluginName.prototype);\n    }\n}\nexport class InvocationDoesNotExist extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvocationDoesNotExist\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvocationDoesNotExist\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvocationDoesNotExist.prototype);\n    }\n}\nexport const ConnectionStatus = {\n    CONNECTED: \"Connected\",\n    NOT_CONNECTED: \"NotConnected\",\n};\nexport class UnsupportedFeatureRequiredException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnsupportedFeatureRequiredException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnsupportedFeatureRequiredException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnsupportedFeatureRequiredException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const AttachmentHashType = {\n    SHA256: \"Sha256\",\n};\nexport const InventoryQueryOperatorType = {\n    BEGIN_WITH: \"BeginWith\",\n    EQUAL: \"Equal\",\n    EXISTS: \"Exists\",\n    GREATER_THAN: \"GreaterThan\",\n    LESS_THAN: \"LessThan\",\n    NOT_EQUAL: \"NotEqual\",\n};\nexport class InvalidAggregatorException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidAggregatorException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidAggregatorException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidAggregatorException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidInventoryGroupException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidInventoryGroupException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidInventoryGroupException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidInventoryGroupException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidResultAttributeException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidResultAttributeException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidResultAttributeException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidResultAttributeException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const InventoryAttributeDataType = {\n    NUMBER: \"number\",\n    STRING: \"string\",\n};\nexport const NotificationEvent = {\n    ALL: \"All\",\n    CANCELLED: \"Cancelled\",\n    FAILED: \"Failed\",\n    IN_PROGRESS: \"InProgress\",\n    SUCCESS: \"Success\",\n    TIMED_OUT: \"TimedOut\",\n};\nexport const NotificationType = {\n    Command: \"Command\",\n    Invocation: \"Invocation\",\n};\nexport const OpsFilterOperatorType = {\n    BEGIN_WITH: \"BeginWith\",\n    EQUAL: \"Equal\",\n    EXISTS: \"Exists\",\n    GREATER_THAN: \"GreaterThan\",\n    LESS_THAN: \"LessThan\",\n    NOT_EQUAL: \"NotEqual\",\n};\nexport class InvalidKeyId extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidKeyId\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidKeyId\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidKeyId.prototype);\n    }\n}\nexport class ParameterVersionNotFound extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ParameterVersionNotFound\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ParameterVersionNotFound\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ParameterVersionNotFound.prototype);\n    }\n}\nexport class ServiceSettingNotFound extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ServiceSettingNotFound\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ServiceSettingNotFound\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ServiceSettingNotFound.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class ParameterVersionLabelLimitExceeded extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ParameterVersionLabelLimitExceeded\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ParameterVersionLabelLimitExceeded\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ParameterVersionLabelLimitExceeded.prototype);\n    }\n}\nexport const AssociationFilterKey = {\n    AssociationId: \"AssociationId\",\n    AssociationName: \"AssociationName\",\n    InstanceId: \"InstanceId\",\n    LastExecutedAfter: \"LastExecutedAfter\",\n    LastExecutedBefore: \"LastExecutedBefore\",\n    Name: \"Name\",\n    ResourceGroupName: \"ResourceGroupName\",\n    Status: \"AssociationStatusName\",\n};\nexport const CommandFilterKey = {\n    DOCUMENT_NAME: \"DocumentName\",\n    EXECUTION_STAGE: \"ExecutionStage\",\n    INVOKED_AFTER: \"InvokedAfter\",\n    INVOKED_BEFORE: \"InvokedBefore\",\n    STATUS: \"Status\",\n};\nexport const CommandPluginStatus = {\n    CANCELLED: \"Cancelled\",\n    FAILED: \"Failed\",\n    IN_PROGRESS: \"InProgress\",\n    PENDING: \"Pending\",\n    SUCCESS: \"Success\",\n    TIMED_OUT: \"TimedOut\",\n};\nexport const CommandStatus = {\n    CANCELLED: \"Cancelled\",\n    CANCELLING: \"Cancelling\",\n    FAILED: \"Failed\",\n    IN_PROGRESS: \"InProgress\",\n    PENDING: \"Pending\",\n    SUCCESS: \"Success\",\n    TIMED_OUT: \"TimedOut\",\n};\nexport const ComplianceQueryOperatorType = {\n    BeginWith: \"BEGIN_WITH\",\n    Equal: \"EQUAL\",\n    GreaterThan: \"GREATER_THAN\",\n    LessThan: \"LESS_THAN\",\n    NotEqual: \"NOT_EQUAL\",\n};\nexport const ComplianceSeverity = {\n    Critical: \"CRITICAL\",\n    High: \"HIGH\",\n    Informational: \"INFORMATIONAL\",\n    Low: \"LOW\",\n    Medium: \"MEDIUM\",\n    Unspecified: \"UNSPECIFIED\",\n};\nexport const ComplianceStatus = {\n    Compliant: \"COMPLIANT\",\n    NonCompliant: \"NON_COMPLIANT\",\n};\nexport const DocumentMetadataEnum = {\n    DocumentReviews: \"DocumentReviews\",\n};\nexport const DocumentReviewCommentType = {\n    Comment: \"Comment\",\n};\nexport const DocumentFilterKey = {\n    DocumentType: \"DocumentType\",\n    Name: \"Name\",\n    Owner: \"Owner\",\n    PlatformTypes: \"PlatformTypes\",\n};\nexport const OpsItemEventFilterKey = {\n    OPSITEM_ID: \"OpsItemId\",\n};\nexport const OpsItemEventFilterOperator = {\n    EQUAL: \"Equal\",\n};\nexport const OpsItemRelatedItemsFilterKey = {\n    ASSOCIATION_ID: \"AssociationId\",\n    RESOURCE_TYPE: \"ResourceType\",\n    RESOURCE_URI: \"ResourceUri\",\n};\nexport const OpsItemRelatedItemsFilterOperator = {\n    EQUAL: \"Equal\",\n};\nexport const LastResourceDataSyncStatus = {\n    FAILED: \"Failed\",\n    INPROGRESS: \"InProgress\",\n    SUCCESSFUL: \"Successful\",\n};\nexport class DocumentPermissionLimit extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"DocumentPermissionLimit\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"DocumentPermissionLimit\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, DocumentPermissionLimit.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class ComplianceTypeCountLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ComplianceTypeCountLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ComplianceTypeCountLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ComplianceTypeCountLimitExceededException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidItemContentException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidItemContentException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidItemContentException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidItemContentException.prototype);\n        this.TypeName = opts.TypeName;\n        this.Message = opts.Message;\n    }\n}\nexport class ItemSizeLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ItemSizeLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ItemSizeLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ItemSizeLimitExceededException.prototype);\n        this.TypeName = opts.TypeName;\n        this.Message = opts.Message;\n    }\n}\nexport const ComplianceUploadType = {\n    Complete: \"COMPLETE\",\n    Partial: \"PARTIAL\",\n};\nexport class TotalSizeLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"TotalSizeLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"TotalSizeLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, TotalSizeLimitExceededException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class CustomSchemaCountLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"CustomSchemaCountLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"CustomSchemaCountLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, CustomSchemaCountLimitExceededException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidInventoryItemContextException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidInventoryItemContextException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidInventoryItemContextException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidInventoryItemContextException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class ItemContentMismatchException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ItemContentMismatchException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ItemContentMismatchException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ItemContentMismatchException.prototype);\n        this.TypeName = opts.TypeName;\n        this.Message = opts.Message;\n    }\n}\nexport class SubTypeCountLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"SubTypeCountLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"SubTypeCountLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, SubTypeCountLimitExceededException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class UnsupportedInventoryItemContextException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnsupportedInventoryItemContextException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnsupportedInventoryItemContextException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnsupportedInventoryItemContextException.prototype);\n        this.TypeName = opts.TypeName;\n        this.Message = opts.Message;\n    }\n}\nexport class UnsupportedInventorySchemaVersionException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnsupportedInventorySchemaVersionException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnsupportedInventorySchemaVersionException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnsupportedInventorySchemaVersionException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class HierarchyLevelLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"HierarchyLevelLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"HierarchyLevelLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, HierarchyLevelLimitExceededException.prototype);\n    }\n}\nexport class HierarchyTypeMismatchException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"HierarchyTypeMismatchException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"HierarchyTypeMismatchException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, HierarchyTypeMismatchException.prototype);\n    }\n}\nexport class IncompatiblePolicyException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"IncompatiblePolicyException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"IncompatiblePolicyException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, IncompatiblePolicyException.prototype);\n    }\n}\nexport class InvalidAllowedPatternException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidAllowedPatternException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidAllowedPatternException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidAllowedPatternException.prototype);\n    }\n}\nexport class InvalidPolicyAttributeException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidPolicyAttributeException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidPolicyAttributeException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidPolicyAttributeException.prototype);\n    }\n}\nexport class InvalidPolicyTypeException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidPolicyTypeException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidPolicyTypeException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidPolicyTypeException.prototype);\n    }\n}\nexport class ParameterAlreadyExists extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ParameterAlreadyExists\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ParameterAlreadyExists\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ParameterAlreadyExists.prototype);\n    }\n}\nexport class ParameterLimitExceeded extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ParameterLimitExceeded\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ParameterLimitExceeded\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ParameterLimitExceeded.prototype);\n    }\n}\nexport class ParameterMaxVersionLimitExceeded extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ParameterMaxVersionLimitExceeded\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ParameterMaxVersionLimitExceeded\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ParameterMaxVersionLimitExceeded.prototype);\n    }\n}\nexport class ParameterPatternMismatchException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ParameterPatternMismatchException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ParameterPatternMismatchException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ParameterPatternMismatchException.prototype);\n    }\n}\nexport class PoliciesLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"PoliciesLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"PoliciesLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, PoliciesLimitExceededException.prototype);\n    }\n}\nexport class UnsupportedParameterType extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnsupportedParameterType\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnsupportedParameterType\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnsupportedParameterType.prototype);\n    }\n}\nexport class ResourcePolicyLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourcePolicyLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourcePolicyLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourcePolicyLimitExceededException.prototype);\n        this.Limit = opts.Limit;\n        this.LimitType = opts.LimitType;\n        this.Message = opts.Message;\n    }\n}\nexport class FeatureNotAvailableException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"FeatureNotAvailableException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"FeatureNotAvailableException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, FeatureNotAvailableException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class AutomationStepNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AutomationStepNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AutomationStepNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AutomationStepNotFoundException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidAutomationSignalException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidAutomationSignalException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidAutomationSignalException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidAutomationSignalException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const SignalType = {\n    APPROVE: \"Approve\",\n    REJECT: \"Reject\",\n    RESUME: \"Resume\",\n    START_STEP: \"StartStep\",\n    STOP_STEP: \"StopStep\",\n};\nexport class InvalidNotificationConfig extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidNotificationConfig\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidNotificationConfig\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidNotificationConfig.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidOutputFolder extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidOutputFolder\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidOutputFolder\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidOutputFolder.prototype);\n    }\n}\nexport class InvalidRole extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidRole\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidRole\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidRole.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidAssociation extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidAssociation\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidAssociation\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidAssociation.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class AutomationDefinitionNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AutomationDefinitionNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AutomationDefinitionNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AutomationDefinitionNotFoundException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class AutomationDefinitionVersionNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AutomationDefinitionVersionNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AutomationDefinitionVersionNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AutomationDefinitionVersionNotFoundException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class AutomationExecutionLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AutomationExecutionLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AutomationExecutionLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AutomationExecutionLimitExceededException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidAutomationExecutionParametersException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidAutomationExecutionParametersException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidAutomationExecutionParametersException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidAutomationExecutionParametersException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class AutomationDefinitionNotApprovedException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AutomationDefinitionNotApprovedException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AutomationDefinitionNotApprovedException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AutomationDefinitionNotApprovedException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class TargetNotConnected extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"TargetNotConnected\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"TargetNotConnected\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, TargetNotConnected.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidAutomationStatusUpdateException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidAutomationStatusUpdateException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidAutomationStatusUpdateException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidAutomationStatusUpdateException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const StopType = {\n    CANCEL: \"Cancel\",\n    COMPLETE: \"Complete\",\n};\nexport class AssociationVersionLimitExceeded extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AssociationVersionLimitExceeded\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AssociationVersionLimitExceeded\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AssociationVersionLimitExceeded.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const BaselineOverrideFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Sources && { Sources: obj.Sources.map((item) => PatchSourceFilterSensitiveLog(item)) }),\n});\nexport const GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nexport const GetMaintenanceWindowResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Description && { Description: SENSITIVE_STRING }),\n});\nexport const GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.TaskParameters && { TaskParameters: SENSITIVE_STRING }),\n});\nexport const GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: SENSITIVE_STRING }),\n    ...(obj.OwnerInformation && { OwnerInformation: SENSITIVE_STRING }),\n});\nexport const MaintenanceWindowLambdaParametersFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Payload && { Payload: SENSITIVE_STRING }),\n});\nexport const MaintenanceWindowRunCommandParametersFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: SENSITIVE_STRING }),\n});\nexport const MaintenanceWindowStepFunctionsParametersFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Input && { Input: SENSITIVE_STRING }),\n});\nexport const MaintenanceWindowTaskInvocationParametersFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.RunCommand && { RunCommand: MaintenanceWindowRunCommandParametersFilterSensitiveLog(obj.RunCommand) }),\n    ...(obj.StepFunctions && {\n        StepFunctions: MaintenanceWindowStepFunctionsParametersFilterSensitiveLog(obj.StepFunctions),\n    }),\n    ...(obj.Lambda && { Lambda: MaintenanceWindowLambdaParametersFilterSensitiveLog(obj.Lambda) }),\n});\nexport const GetMaintenanceWindowTaskResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.TaskParameters && { TaskParameters: SENSITIVE_STRING }),\n    ...(obj.TaskInvocationParameters && {\n        TaskInvocationParameters: MaintenanceWindowTaskInvocationParametersFilterSensitiveLog(obj.TaskInvocationParameters),\n    }),\n    ...(obj.Description && { Description: SENSITIVE_STRING }),\n});\nexport const ParameterFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Value && { Value: SENSITIVE_STRING }),\n});\nexport const GetParameterResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameter && { Parameter: ParameterFilterSensitiveLog(obj.Parameter) }),\n});\nexport const ParameterHistoryFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Value && { Value: SENSITIVE_STRING }),\n});\nexport const GetParameterHistoryResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: obj.Parameters.map((item) => ParameterHistoryFilterSensitiveLog(item)) }),\n});\nexport const GetParametersResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: obj.Parameters.map((item) => ParameterFilterSensitiveLog(item)) }),\n});\nexport const GetParametersByPathResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: obj.Parameters.map((item) => ParameterFilterSensitiveLog(item)) }),\n});\nexport const GetPatchBaselineResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Sources && { Sources: obj.Sources.map((item) => PatchSourceFilterSensitiveLog(item)) }),\n});\nexport const AssociationVersionInfoFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: SENSITIVE_STRING }),\n});\nexport const ListAssociationVersionsResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.AssociationVersions && {\n        AssociationVersions: obj.AssociationVersions.map((item) => AssociationVersionInfoFilterSensitiveLog(item)),\n    }),\n});\nexport const CommandFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: SENSITIVE_STRING }),\n});\nexport const ListCommandsResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Commands && { Commands: obj.Commands.map((item) => CommandFilterSensitiveLog(item)) }),\n});\nexport const PutParameterRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Value && { Value: SENSITIVE_STRING }),\n});\nexport const RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.OwnerInformation && { OwnerInformation: SENSITIVE_STRING }),\n    ...(obj.Description && { Description: SENSITIVE_STRING }),\n});\nexport const RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.TaskParameters && { TaskParameters: SENSITIVE_STRING }),\n    ...(obj.TaskInvocationParameters && {\n        TaskInvocationParameters: MaintenanceWindowTaskInvocationParametersFilterSensitiveLog(obj.TaskInvocationParameters),\n    }),\n    ...(obj.Description && { Description: SENSITIVE_STRING }),\n});\nexport const SendCommandRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: SENSITIVE_STRING }),\n});\nexport const SendCommandResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Command && { Command: CommandFilterSensitiveLog(obj.Command) }),\n});\n","import { SENSITIVE_STRING } from \"@aws-sdk/smithy-client\";\nimport { SSMServiceException as __BaseException } from \"./SSMServiceException\";\nexport const ResourceTypeForTagging = {\n    ASSOCIATION: \"Association\",\n    AUTOMATION: \"Automation\",\n    DOCUMENT: \"Document\",\n    MAINTENANCE_WINDOW: \"MaintenanceWindow\",\n    MANAGED_INSTANCE: \"ManagedInstance\",\n    OPSMETADATA: \"OpsMetadata\",\n    OPS_ITEM: \"OpsItem\",\n    PARAMETER: \"Parameter\",\n    PATCH_BASELINE: \"PatchBaseline\",\n};\nexport class InternalServerError extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InternalServerError\",\n            $fault: \"server\",\n            ...opts,\n        });\n        this.name = \"InternalServerError\";\n        this.$fault = \"server\";\n        Object.setPrototypeOf(this, InternalServerError.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidResourceId extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidResourceId\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidResourceId\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidResourceId.prototype);\n    }\n}\nexport class InvalidResourceType extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidResourceType\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidResourceType\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidResourceType.prototype);\n    }\n}\nexport class TooManyTagsError extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"TooManyTagsError\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"TooManyTagsError\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, TooManyTagsError.prototype);\n    }\n}\nexport class TooManyUpdates extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"TooManyUpdates\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"TooManyUpdates\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, TooManyUpdates.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const ExternalAlarmState = {\n    ALARM: \"ALARM\",\n    UNKNOWN: \"UNKNOWN\",\n};\nexport class AlreadyExistsException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AlreadyExistsException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AlreadyExistsException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AlreadyExistsException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class OpsItemInvalidParameterException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsItemInvalidParameterException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsItemInvalidParameterException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsItemInvalidParameterException.prototype);\n        this.ParameterNames = opts.ParameterNames;\n        this.Message = opts.Message;\n    }\n}\nexport class OpsItemLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsItemLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsItemLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsItemLimitExceededException.prototype);\n        this.ResourceTypes = opts.ResourceTypes;\n        this.Limit = opts.Limit;\n        this.LimitType = opts.LimitType;\n        this.Message = opts.Message;\n    }\n}\nexport class OpsItemNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsItemNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsItemNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsItemNotFoundException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class OpsItemRelatedItemAlreadyExistsException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsItemRelatedItemAlreadyExistsException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsItemRelatedItemAlreadyExistsException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsItemRelatedItemAlreadyExistsException.prototype);\n        this.Message = opts.Message;\n        this.ResourceUri = opts.ResourceUri;\n        this.OpsItemId = opts.OpsItemId;\n    }\n}\nexport class DuplicateInstanceId extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"DuplicateInstanceId\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"DuplicateInstanceId\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, DuplicateInstanceId.prototype);\n    }\n}\nexport class InvalidCommandId extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidCommandId\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidCommandId\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidCommandId.prototype);\n    }\n}\nexport class InvalidInstanceId extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidInstanceId\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidInstanceId\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidInstanceId.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class DoesNotExistException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"DoesNotExistException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"DoesNotExistException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, DoesNotExistException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidParameters extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidParameters\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidParameters\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidParameters.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class AssociationAlreadyExists extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AssociationAlreadyExists\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AssociationAlreadyExists\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AssociationAlreadyExists.prototype);\n    }\n}\nexport class AssociationLimitExceeded extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AssociationLimitExceeded\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AssociationLimitExceeded\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AssociationLimitExceeded.prototype);\n    }\n}\nexport const AssociationComplianceSeverity = {\n    Critical: \"CRITICAL\",\n    High: \"HIGH\",\n    Low: \"LOW\",\n    Medium: \"MEDIUM\",\n    Unspecified: \"UNSPECIFIED\",\n};\nexport const AssociationSyncCompliance = {\n    Auto: \"AUTO\",\n    Manual: \"MANUAL\",\n};\nexport const AssociationStatusName = {\n    Failed: \"Failed\",\n    Pending: \"Pending\",\n    Success: \"Success\",\n};\nexport class InvalidDocument extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidDocument\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidDocument\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidDocument.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidDocumentVersion extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidDocumentVersion\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidDocumentVersion\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidDocumentVersion.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidOutputLocation extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidOutputLocation\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidOutputLocation\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidOutputLocation.prototype);\n    }\n}\nexport class InvalidSchedule extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidSchedule\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidSchedule\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidSchedule.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidTag extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidTag\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidTag\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidTag.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidTarget extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidTarget\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidTarget\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidTarget.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidTargetMaps extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidTargetMaps\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidTargetMaps\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidTargetMaps.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class UnsupportedPlatformType extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnsupportedPlatformType\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnsupportedPlatformType\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnsupportedPlatformType.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const Fault = {\n    Client: \"Client\",\n    Server: \"Server\",\n    Unknown: \"Unknown\",\n};\nexport const AttachmentsSourceKey = {\n    AttachmentReference: \"AttachmentReference\",\n    S3FileUrl: \"S3FileUrl\",\n    SourceUrl: \"SourceUrl\",\n};\nexport const DocumentFormat = {\n    JSON: \"JSON\",\n    TEXT: \"TEXT\",\n    YAML: \"YAML\",\n};\nexport const DocumentType = {\n    ApplicationConfiguration: \"ApplicationConfiguration\",\n    ApplicationConfigurationSchema: \"ApplicationConfigurationSchema\",\n    Automation: \"Automation\",\n    ChangeCalendar: \"ChangeCalendar\",\n    ChangeTemplate: \"Automation.ChangeTemplate\",\n    CloudFormation: \"CloudFormation\",\n    Command: \"Command\",\n    ConformancePackTemplate: \"ConformancePackTemplate\",\n    DeploymentStrategy: \"DeploymentStrategy\",\n    Package: \"Package\",\n    Policy: \"Policy\",\n    ProblemAnalysis: \"ProblemAnalysis\",\n    ProblemAnalysisTemplate: \"ProblemAnalysisTemplate\",\n    QuickSetup: \"QuickSetup\",\n    Session: \"Session\",\n};\nexport const DocumentHashType = {\n    SHA1: \"Sha1\",\n    SHA256: \"Sha256\",\n};\nexport const DocumentParameterType = {\n    String: \"String\",\n    StringList: \"StringList\",\n};\nexport const PlatformType = {\n    LINUX: \"Linux\",\n    MACOS: \"MacOS\",\n    WINDOWS: \"Windows\",\n};\nexport const ReviewStatus = {\n    APPROVED: \"APPROVED\",\n    NOT_REVIEWED: \"NOT_REVIEWED\",\n    PENDING: \"PENDING\",\n    REJECTED: \"REJECTED\",\n};\nexport const DocumentStatus = {\n    Active: \"Active\",\n    Creating: \"Creating\",\n    Deleting: \"Deleting\",\n    Failed: \"Failed\",\n    Updating: \"Updating\",\n};\nexport class DocumentAlreadyExists extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"DocumentAlreadyExists\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"DocumentAlreadyExists\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, DocumentAlreadyExists.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class DocumentLimitExceeded extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"DocumentLimitExceeded\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"DocumentLimitExceeded\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, DocumentLimitExceeded.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidDocumentContent extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidDocumentContent\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidDocumentContent\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidDocumentContent.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidDocumentSchemaVersion extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidDocumentSchemaVersion\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidDocumentSchemaVersion\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidDocumentSchemaVersion.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class MaxDocumentSizeExceeded extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"MaxDocumentSizeExceeded\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"MaxDocumentSizeExceeded\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, MaxDocumentSizeExceeded.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class IdempotentParameterMismatch extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"IdempotentParameterMismatch\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"IdempotentParameterMismatch\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, IdempotentParameterMismatch.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class ResourceLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourceLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourceLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourceLimitExceededException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const OpsItemDataType = {\n    SEARCHABLE_STRING: \"SearchableString\",\n    STRING: \"String\",\n};\nexport class OpsItemAccessDeniedException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsItemAccessDeniedException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsItemAccessDeniedException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsItemAccessDeniedException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class OpsItemAlreadyExistsException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsItemAlreadyExistsException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsItemAlreadyExistsException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsItemAlreadyExistsException.prototype);\n        this.Message = opts.Message;\n        this.OpsItemId = opts.OpsItemId;\n    }\n}\nexport class OpsMetadataAlreadyExistsException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsMetadataAlreadyExistsException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsMetadataAlreadyExistsException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsMetadataAlreadyExistsException.prototype);\n    }\n}\nexport class OpsMetadataInvalidArgumentException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsMetadataInvalidArgumentException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsMetadataInvalidArgumentException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsMetadataInvalidArgumentException.prototype);\n    }\n}\nexport class OpsMetadataLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsMetadataLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsMetadataLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsMetadataLimitExceededException.prototype);\n    }\n}\nexport class OpsMetadataTooManyUpdatesException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsMetadataTooManyUpdatesException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsMetadataTooManyUpdatesException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsMetadataTooManyUpdatesException.prototype);\n    }\n}\nexport const PatchComplianceLevel = {\n    Critical: \"CRITICAL\",\n    High: \"HIGH\",\n    Informational: \"INFORMATIONAL\",\n    Low: \"LOW\",\n    Medium: \"MEDIUM\",\n    Unspecified: \"UNSPECIFIED\",\n};\nexport const PatchFilterKey = {\n    AdvisoryId: \"ADVISORY_ID\",\n    Arch: \"ARCH\",\n    BugzillaId: \"BUGZILLA_ID\",\n    CVEId: \"CVE_ID\",\n    Classification: \"CLASSIFICATION\",\n    Epoch: \"EPOCH\",\n    MsrcSeverity: \"MSRC_SEVERITY\",\n    Name: \"NAME\",\n    PatchId: \"PATCH_ID\",\n    PatchSet: \"PATCH_SET\",\n    Priority: \"PRIORITY\",\n    Product: \"PRODUCT\",\n    ProductFamily: \"PRODUCT_FAMILY\",\n    Release: \"RELEASE\",\n    Repository: \"REPOSITORY\",\n    Section: \"SECTION\",\n    Security: \"SECURITY\",\n    Severity: \"SEVERITY\",\n    Version: \"VERSION\",\n};\nexport const OperatingSystem = {\n    AlmaLinux: \"ALMA_LINUX\",\n    AmazonLinux: \"AMAZON_LINUX\",\n    AmazonLinux2: \"AMAZON_LINUX_2\",\n    AmazonLinux2022: \"AMAZON_LINUX_2022\",\n    AmazonLinux2023: \"AMAZON_LINUX_2023\",\n    CentOS: \"CENTOS\",\n    Debian: \"DEBIAN\",\n    MacOS: \"MACOS\",\n    OracleLinux: \"ORACLE_LINUX\",\n    Raspbian: \"RASPBIAN\",\n    RedhatEnterpriseLinux: \"REDHAT_ENTERPRISE_LINUX\",\n    Rocky_Linux: \"ROCKY_LINUX\",\n    Suse: \"SUSE\",\n    Ubuntu: \"UBUNTU\",\n    Windows: \"WINDOWS\",\n};\nexport const PatchAction = {\n    AllowAsDependency: \"ALLOW_AS_DEPENDENCY\",\n    Block: \"BLOCK\",\n};\nexport const ResourceDataSyncS3Format = {\n    JSON_SERDE: \"JsonSerDe\",\n};\nexport class ResourceDataSyncAlreadyExistsException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourceDataSyncAlreadyExistsException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourceDataSyncAlreadyExistsException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourceDataSyncAlreadyExistsException.prototype);\n        this.SyncName = opts.SyncName;\n    }\n}\nexport class ResourceDataSyncCountExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourceDataSyncCountExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourceDataSyncCountExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourceDataSyncCountExceededException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class ResourceDataSyncInvalidConfigurationException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourceDataSyncInvalidConfigurationException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourceDataSyncInvalidConfigurationException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourceDataSyncInvalidConfigurationException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidActivation extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidActivation\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidActivation\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidActivation.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidActivationId extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidActivationId\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidActivationId\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidActivationId.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class AssociationDoesNotExist extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AssociationDoesNotExist\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AssociationDoesNotExist\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AssociationDoesNotExist.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class AssociatedInstances extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AssociatedInstances\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AssociatedInstances\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AssociatedInstances.prototype);\n    }\n}\nexport class InvalidDocumentOperation extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidDocumentOperation\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidDocumentOperation\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidDocumentOperation.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const InventorySchemaDeleteOption = {\n    DELETE_SCHEMA: \"DeleteSchema\",\n    DISABLE_SCHEMA: \"DisableSchema\",\n};\nexport class InvalidDeleteInventoryParametersException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidDeleteInventoryParametersException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidDeleteInventoryParametersException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidDeleteInventoryParametersException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidInventoryRequestException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidInventoryRequestException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidInventoryRequestException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidInventoryRequestException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidOptionException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidOptionException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidOptionException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidOptionException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidTypeNameException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidTypeNameException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidTypeNameException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidTypeNameException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class OpsMetadataNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsMetadataNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsMetadataNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsMetadataNotFoundException.prototype);\n    }\n}\nexport class ParameterNotFound extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ParameterNotFound\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ParameterNotFound\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ParameterNotFound.prototype);\n    }\n}\nexport class ResourceInUseException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourceInUseException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourceInUseException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourceInUseException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class ResourceDataSyncNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourceDataSyncNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourceDataSyncNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourceDataSyncNotFoundException.prototype);\n        this.SyncName = opts.SyncName;\n        this.SyncType = opts.SyncType;\n        this.Message = opts.Message;\n    }\n}\nexport class ResourcePolicyConflictException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourcePolicyConflictException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourcePolicyConflictException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourcePolicyConflictException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class ResourcePolicyInvalidParameterException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourcePolicyInvalidParameterException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourcePolicyInvalidParameterException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourcePolicyInvalidParameterException.prototype);\n        this.ParameterNames = opts.ParameterNames;\n        this.Message = opts.Message;\n    }\n}\nexport class TargetInUseException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"TargetInUseException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"TargetInUseException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, TargetInUseException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const DescribeActivationsFilterKeys = {\n    ACTIVATION_IDS: \"ActivationIds\",\n    DEFAULT_INSTANCE_NAME: \"DefaultInstanceName\",\n    IAM_ROLE: \"IamRole\",\n};\nexport class InvalidFilter extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidFilter\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidFilter\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidFilter.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidNextToken extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidNextToken\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidNextToken\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidNextToken.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidAssociationVersion extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidAssociationVersion\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidAssociationVersion\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidAssociationVersion.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const AssociationExecutionFilterKey = {\n    CreatedTime: \"CreatedTime\",\n    ExecutionId: \"ExecutionId\",\n    Status: \"Status\",\n};\nexport const AssociationFilterOperatorType = {\n    Equal: \"EQUAL\",\n    GreaterThan: \"GREATER_THAN\",\n    LessThan: \"LESS_THAN\",\n};\nexport class AssociationExecutionDoesNotExist extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AssociationExecutionDoesNotExist\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AssociationExecutionDoesNotExist\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AssociationExecutionDoesNotExist.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const AssociationExecutionTargetsFilterKey = {\n    ResourceId: \"ResourceId\",\n    ResourceType: \"ResourceType\",\n    Status: \"Status\",\n};\nexport const AutomationExecutionFilterKey = {\n    AUTOMATION_SUBTYPE: \"AutomationSubtype\",\n    AUTOMATION_TYPE: \"AutomationType\",\n    CURRENT_ACTION: \"CurrentAction\",\n    DOCUMENT_NAME_PREFIX: \"DocumentNamePrefix\",\n    EXECUTION_ID: \"ExecutionId\",\n    EXECUTION_STATUS: \"ExecutionStatus\",\n    OPS_ITEM_ID: \"OpsItemId\",\n    PARENT_EXECUTION_ID: \"ParentExecutionId\",\n    START_TIME_AFTER: \"StartTimeAfter\",\n    START_TIME_BEFORE: \"StartTimeBefore\",\n    TAG_KEY: \"TagKey\",\n    TARGET_RESOURCE_GROUP: \"TargetResourceGroup\",\n};\nexport const AutomationExecutionStatus = {\n    APPROVED: \"Approved\",\n    CANCELLED: \"Cancelled\",\n    CANCELLING: \"Cancelling\",\n    CHANGE_CALENDAR_OVERRIDE_APPROVED: \"ChangeCalendarOverrideApproved\",\n    CHANGE_CALENDAR_OVERRIDE_REJECTED: \"ChangeCalendarOverrideRejected\",\n    COMPLETED_WITH_FAILURE: \"CompletedWithFailure\",\n    COMPLETED_WITH_SUCCESS: \"CompletedWithSuccess\",\n    FAILED: \"Failed\",\n    INPROGRESS: \"InProgress\",\n    PENDING: \"Pending\",\n    PENDING_APPROVAL: \"PendingApproval\",\n    PENDING_CHANGE_CALENDAR_OVERRIDE: \"PendingChangeCalendarOverride\",\n    REJECTED: \"Rejected\",\n    RUNBOOK_INPROGRESS: \"RunbookInProgress\",\n    SCHEDULED: \"Scheduled\",\n    SUCCESS: \"Success\",\n    TIMEDOUT: \"TimedOut\",\n    WAITING: \"Waiting\",\n};\nexport const AutomationSubtype = {\n    ChangeRequest: \"ChangeRequest\",\n};\nexport const AutomationType = {\n    CrossAccount: \"CrossAccount\",\n    Local: \"Local\",\n};\nexport const ExecutionMode = {\n    Auto: \"Auto\",\n    Interactive: \"Interactive\",\n};\nexport class InvalidFilterKey extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidFilterKey\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidFilterKey\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidFilterKey.prototype);\n    }\n}\nexport class InvalidFilterValue extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidFilterValue\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidFilterValue\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidFilterValue.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class AutomationExecutionNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AutomationExecutionNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AutomationExecutionNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AutomationExecutionNotFoundException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const StepExecutionFilterKey = {\n    ACTION: \"Action\",\n    START_TIME_AFTER: \"StartTimeAfter\",\n    START_TIME_BEFORE: \"StartTimeBefore\",\n    STEP_EXECUTION_ID: \"StepExecutionId\",\n    STEP_EXECUTION_STATUS: \"StepExecutionStatus\",\n    STEP_NAME: \"StepName\",\n};\nexport const DocumentPermissionType = {\n    SHARE: \"Share\",\n};\nexport class InvalidPermissionType extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidPermissionType\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidPermissionType\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidPermissionType.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const PatchDeploymentStatus = {\n    Approved: \"APPROVED\",\n    ExplicitApproved: \"EXPLICIT_APPROVED\",\n    ExplicitRejected: \"EXPLICIT_REJECTED\",\n    PendingApproval: \"PENDING_APPROVAL\",\n};\nexport class UnsupportedOperatingSystem extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnsupportedOperatingSystem\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnsupportedOperatingSystem\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnsupportedOperatingSystem.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const InstanceInformationFilterKey = {\n    ACTIVATION_IDS: \"ActivationIds\",\n    AGENT_VERSION: \"AgentVersion\",\n    ASSOCIATION_STATUS: \"AssociationStatus\",\n    IAM_ROLE: \"IamRole\",\n    INSTANCE_IDS: \"InstanceIds\",\n    PING_STATUS: \"PingStatus\",\n    PLATFORM_TYPES: \"PlatformTypes\",\n    RESOURCE_TYPE: \"ResourceType\",\n};\nexport const PingStatus = {\n    CONNECTION_LOST: \"ConnectionLost\",\n    INACTIVE: \"Inactive\",\n    ONLINE: \"Online\",\n};\nexport const ResourceType = {\n    DOCUMENT: \"Document\",\n    EC2_INSTANCE: \"EC2Instance\",\n    MANAGED_INSTANCE: \"ManagedInstance\",\n};\nexport const SourceType = {\n    AWS_EC2_INSTANCE: \"AWS::EC2::Instance\",\n    AWS_IOT_THING: \"AWS::IoT::Thing\",\n    AWS_SSM_MANAGEDINSTANCE: \"AWS::SSM::ManagedInstance\",\n};\nexport class InvalidInstanceInformationFilterValue extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidInstanceInformationFilterValue\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidInstanceInformationFilterValue\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidInstanceInformationFilterValue.prototype);\n    }\n}\nexport const PatchComplianceDataState = {\n    Failed: \"FAILED\",\n    Installed: \"INSTALLED\",\n    InstalledOther: \"INSTALLED_OTHER\",\n    InstalledPendingReboot: \"INSTALLED_PENDING_REBOOT\",\n    InstalledRejected: \"INSTALLED_REJECTED\",\n    Missing: \"MISSING\",\n    NotApplicable: \"NOT_APPLICABLE\",\n};\nexport const PatchOperationType = {\n    INSTALL: \"Install\",\n    SCAN: \"Scan\",\n};\nexport const RebootOption = {\n    NO_REBOOT: \"NoReboot\",\n    REBOOT_IF_NEEDED: \"RebootIfNeeded\",\n};\nexport const InstancePatchStateOperatorType = {\n    EQUAL: \"Equal\",\n    GREATER_THAN: \"GreaterThan\",\n    LESS_THAN: \"LessThan\",\n    NOT_EQUAL: \"NotEqual\",\n};\nexport const InventoryDeletionStatus = {\n    COMPLETE: \"Complete\",\n    IN_PROGRESS: \"InProgress\",\n};\nexport class InvalidDeletionIdException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidDeletionIdException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidDeletionIdException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidDeletionIdException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const MaintenanceWindowExecutionStatus = {\n    Cancelled: \"CANCELLED\",\n    Cancelling: \"CANCELLING\",\n    Failed: \"FAILED\",\n    InProgress: \"IN_PROGRESS\",\n    Pending: \"PENDING\",\n    SkippedOverlapping: \"SKIPPED_OVERLAPPING\",\n    Success: \"SUCCESS\",\n    TimedOut: \"TIMED_OUT\",\n};\nexport const MaintenanceWindowTaskType = {\n    Automation: \"AUTOMATION\",\n    Lambda: \"LAMBDA\",\n    RunCommand: \"RUN_COMMAND\",\n    StepFunctions: \"STEP_FUNCTIONS\",\n};\nexport const MaintenanceWindowResourceType = {\n    Instance: \"INSTANCE\",\n    ResourceGroup: \"RESOURCE_GROUP\",\n};\nexport const MaintenanceWindowTaskCutoffBehavior = {\n    CancelTask: \"CANCEL_TASK\",\n    ContinueTask: \"CONTINUE_TASK\",\n};\nexport const OpsItemFilterKey = {\n    ACCOUNT_ID: \"AccountId\",\n    ACTUAL_END_TIME: \"ActualEndTime\",\n    ACTUAL_START_TIME: \"ActualStartTime\",\n    AUTOMATION_ID: \"AutomationId\",\n    CATEGORY: \"Category\",\n    CHANGE_REQUEST_APPROVER_ARN: \"ChangeRequestByApproverArn\",\n    CHANGE_REQUEST_APPROVER_NAME: \"ChangeRequestByApproverName\",\n    CHANGE_REQUEST_REQUESTER_ARN: \"ChangeRequestByRequesterArn\",\n    CHANGE_REQUEST_REQUESTER_NAME: \"ChangeRequestByRequesterName\",\n    CHANGE_REQUEST_TARGETS_RESOURCE_GROUP: \"ChangeRequestByTargetsResourceGroup\",\n    CHANGE_REQUEST_TEMPLATE: \"ChangeRequestByTemplate\",\n    CREATED_BY: \"CreatedBy\",\n    CREATED_TIME: \"CreatedTime\",\n    INSIGHT_TYPE: \"InsightByType\",\n    LAST_MODIFIED_TIME: \"LastModifiedTime\",\n    OPERATIONAL_DATA: \"OperationalData\",\n    OPERATIONAL_DATA_KEY: \"OperationalDataKey\",\n    OPERATIONAL_DATA_VALUE: \"OperationalDataValue\",\n    OPSITEM_ID: \"OpsItemId\",\n    OPSITEM_TYPE: \"OpsItemType\",\n    PLANNED_END_TIME: \"PlannedEndTime\",\n    PLANNED_START_TIME: \"PlannedStartTime\",\n    PRIORITY: \"Priority\",\n    RESOURCE_ID: \"ResourceId\",\n    SEVERITY: \"Severity\",\n    SOURCE: \"Source\",\n    STATUS: \"Status\",\n    TITLE: \"Title\",\n};\nexport const OpsItemFilterOperator = {\n    CONTAINS: \"Contains\",\n    EQUAL: \"Equal\",\n    GREATER_THAN: \"GreaterThan\",\n    LESS_THAN: \"LessThan\",\n};\nexport const CreateAssociationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: SENSITIVE_STRING }),\n});\nexport const AssociationDescriptionFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: SENSITIVE_STRING }),\n});\nexport const CreateAssociationResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.AssociationDescription && {\n        AssociationDescription: AssociationDescriptionFilterSensitiveLog(obj.AssociationDescription),\n    }),\n});\nexport const CreateAssociationBatchRequestEntryFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: SENSITIVE_STRING }),\n});\nexport const CreateAssociationBatchRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Entries && {\n        Entries: obj.Entries.map((item) => CreateAssociationBatchRequestEntryFilterSensitiveLog(item)),\n    }),\n});\nexport const FailedCreateAssociationFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Entry && { Entry: CreateAssociationBatchRequestEntryFilterSensitiveLog(obj.Entry) }),\n});\nexport const CreateAssociationBatchResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Successful && { Successful: obj.Successful.map((item) => AssociationDescriptionFilterSensitiveLog(item)) }),\n    ...(obj.Failed && { Failed: obj.Failed.map((item) => FailedCreateAssociationFilterSensitiveLog(item)) }),\n});\nexport const CreateMaintenanceWindowRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Description && { Description: SENSITIVE_STRING }),\n});\nexport const PatchSourceFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Configuration && { Configuration: SENSITIVE_STRING }),\n});\nexport const CreatePatchBaselineRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Sources && { Sources: obj.Sources.map((item) => PatchSourceFilterSensitiveLog(item)) }),\n});\nexport const DescribeAssociationResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.AssociationDescription && {\n        AssociationDescription: AssociationDescriptionFilterSensitiveLog(obj.AssociationDescription),\n    }),\n});\nexport const InstancePatchStateFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.OwnerInformation && { OwnerInformation: SENSITIVE_STRING }),\n});\nexport const DescribeInstancePatchStatesResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.InstancePatchStates && {\n        InstancePatchStates: obj.InstancePatchStates.map((item) => InstancePatchStateFilterSensitiveLog(item)),\n    }),\n});\nexport const DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.InstancePatchStates && {\n        InstancePatchStates: obj.InstancePatchStates.map((item) => InstancePatchStateFilterSensitiveLog(item)),\n    }),\n});\nexport const MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: SENSITIVE_STRING }),\n    ...(obj.OwnerInformation && { OwnerInformation: SENSITIVE_STRING }),\n});\nexport const DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.WindowExecutionTaskInvocationIdentities && {\n        WindowExecutionTaskInvocationIdentities: obj.WindowExecutionTaskInvocationIdentities.map((item) => MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog(item)),\n    }),\n});\nexport const MaintenanceWindowIdentityFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Description && { Description: SENSITIVE_STRING }),\n});\nexport const DescribeMaintenanceWindowsResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.WindowIdentities && {\n        WindowIdentities: obj.WindowIdentities.map((item) => MaintenanceWindowIdentityFilterSensitiveLog(item)),\n    }),\n});\nexport const MaintenanceWindowTargetFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.OwnerInformation && { OwnerInformation: SENSITIVE_STRING }),\n    ...(obj.Description && { Description: SENSITIVE_STRING }),\n});\nexport const DescribeMaintenanceWindowTargetsResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Targets && { Targets: obj.Targets.map((item) => MaintenanceWindowTargetFilterSensitiveLog(item)) }),\n});\nexport const MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Values && { Values: SENSITIVE_STRING }),\n});\nexport const MaintenanceWindowTaskFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.TaskParameters && { TaskParameters: SENSITIVE_STRING }),\n    ...(obj.Description && { Description: SENSITIVE_STRING }),\n});\nexport const DescribeMaintenanceWindowTasksResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Tasks && { Tasks: obj.Tasks.map((item) => MaintenanceWindowTaskFilterSensitiveLog(item)) }),\n});\n","import { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { _json, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from \"@aws-sdk/smithy-client\";\nimport { v4 as generateIdempotencyToken } from \"uuid\";\nimport { AlreadyExistsException, AssociatedInstances, AssociationAlreadyExists, AssociationDoesNotExist, AssociationExecutionDoesNotExist, AssociationLimitExceeded, AutomationExecutionNotFoundException, DocumentAlreadyExists, DocumentLimitExceeded, DoesNotExistException, DuplicateInstanceId, IdempotentParameterMismatch, InternalServerError, InvalidActivation, InvalidActivationId, InvalidAssociationVersion, InvalidCommandId, InvalidDeleteInventoryParametersException, InvalidDeletionIdException, InvalidDocument, InvalidDocumentContent, InvalidDocumentOperation, InvalidDocumentSchemaVersion, InvalidDocumentVersion, InvalidFilter, InvalidFilterKey, InvalidFilterValue, InvalidInstanceId, InvalidInstanceInformationFilterValue, InvalidInventoryRequestException, InvalidNextToken, InvalidOptionException, InvalidOutputLocation, InvalidParameters, InvalidPermissionType, InvalidResourceId, InvalidResourceType, InvalidSchedule, InvalidTag, InvalidTarget, InvalidTargetMaps, InvalidTypeNameException, MaxDocumentSizeExceeded, OpsItemAccessDeniedException, OpsItemAlreadyExistsException, OpsItemInvalidParameterException, OpsItemLimitExceededException, OpsItemNotFoundException, OpsItemRelatedItemAlreadyExistsException, OpsMetadataAlreadyExistsException, OpsMetadataInvalidArgumentException, OpsMetadataLimitExceededException, OpsMetadataNotFoundException, OpsMetadataTooManyUpdatesException, ParameterNotFound, ResourceDataSyncAlreadyExistsException, ResourceDataSyncCountExceededException, ResourceDataSyncInvalidConfigurationException, ResourceDataSyncNotFoundException, ResourceInUseException, ResourceLimitExceededException, ResourcePolicyConflictException, ResourcePolicyInvalidParameterException, TargetInUseException, TooManyTagsError, TooManyUpdates, UnsupportedOperatingSystem, UnsupportedPlatformType, } from \"../models/models_0\";\nimport { AssociationVersionLimitExceeded, AutomationDefinitionNotApprovedException, AutomationDefinitionNotFoundException, AutomationDefinitionVersionNotFoundException, AutomationExecutionLimitExceededException, AutomationStepNotFoundException, ComplianceTypeCountLimitExceededException, CustomSchemaCountLimitExceededException, DocumentPermissionLimit, FeatureNotAvailableException, HierarchyLevelLimitExceededException, HierarchyTypeMismatchException, IncompatiblePolicyException, InvalidAggregatorException, InvalidAllowedPatternException, InvalidAssociation, InvalidAutomationExecutionParametersException, InvalidAutomationSignalException, InvalidAutomationStatusUpdateException, InvalidDocumentType, InvalidFilterOption, InvalidInventoryGroupException, InvalidInventoryItemContextException, InvalidItemContentException, InvalidKeyId, InvalidNotificationConfig, InvalidOutputFolder, InvalidPluginName, InvalidPolicyAttributeException, InvalidPolicyTypeException, InvalidResultAttributeException, InvalidRole, InvocationDoesNotExist, ItemContentMismatchException, ItemSizeLimitExceededException, OpsItemRelatedItemAssociationNotFoundException, ParameterAlreadyExists, ParameterLimitExceeded, ParameterMaxVersionLimitExceeded, ParameterPatternMismatchException, ParameterVersionLabelLimitExceeded, ParameterVersionNotFound, PoliciesLimitExceededException, ResourcePolicyLimitExceededException, ServiceSettingNotFound, SubTypeCountLimitExceededException, TargetNotConnected, TotalSizeLimitExceededException, UnsupportedCalendarException, UnsupportedFeatureRequiredException, UnsupportedInventoryItemContextException, UnsupportedInventorySchemaVersionException, UnsupportedParameterType, } from \"../models/models_1\";\nimport { DocumentVersionLimitExceeded, DuplicateDocumentContent, DuplicateDocumentVersionName, InvalidUpdate, OpsMetadataKeyLimitExceededException, ResourceDataSyncConflictException, StatusUnchanged, } from \"../models/models_2\";\nimport { SSMServiceException as __BaseException } from \"../models/SSMServiceException\";\nexport const se_AddTagsToResourceCommand = async (input, context) => {\n    const headers = sharedHeaders(\"AddTagsToResource\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_AssociateOpsItemRelatedItemCommand = async (input, context) => {\n    const headers = sharedHeaders(\"AssociateOpsItemRelatedItem\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CancelCommandCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CancelCommand\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CancelMaintenanceWindowExecutionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CancelMaintenanceWindowExecution\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateActivationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateActivation\");\n    let body;\n    body = JSON.stringify(se_CreateActivationRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateAssociationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateAssociation\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateAssociationBatchCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateAssociationBatch\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateDocumentCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateDocument\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateMaintenanceWindowCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateMaintenanceWindow\");\n    let body;\n    body = JSON.stringify(se_CreateMaintenanceWindowRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateOpsItemCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateOpsItem\");\n    let body;\n    body = JSON.stringify(se_CreateOpsItemRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateOpsMetadataCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateOpsMetadata\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreatePatchBaselineCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreatePatchBaseline\");\n    let body;\n    body = JSON.stringify(se_CreatePatchBaselineRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateResourceDataSyncCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateResourceDataSync\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteActivationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteActivation\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteAssociationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteAssociation\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteDocumentCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteDocument\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteInventoryCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteInventory\");\n    let body;\n    body = JSON.stringify(se_DeleteInventoryRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteMaintenanceWindowCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteMaintenanceWindow\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteOpsMetadataCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteOpsMetadata\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteParameterCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteParameter\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteParametersCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteParameters\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeletePatchBaselineCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeletePatchBaseline\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteResourceDataSyncCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteResourceDataSync\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteResourcePolicyCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteResourcePolicy\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeregisterManagedInstanceCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeregisterManagedInstance\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeregisterPatchBaselineForPatchGroupCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeregisterPatchBaselineForPatchGroup\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeregisterTargetFromMaintenanceWindowCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeregisterTargetFromMaintenanceWindow\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeregisterTaskFromMaintenanceWindowCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeregisterTaskFromMaintenanceWindow\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeActivationsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeActivations\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeAssociationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeAssociation\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeAssociationExecutionsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeAssociationExecutions\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeAssociationExecutionTargetsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeAssociationExecutionTargets\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeAutomationExecutionsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeAutomationExecutions\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeAutomationStepExecutionsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeAutomationStepExecutions\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeAvailablePatchesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeAvailablePatches\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeDocumentCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeDocument\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeDocumentPermissionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeDocumentPermission\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeEffectiveInstanceAssociationsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeEffectiveInstanceAssociations\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeEffectivePatchesForPatchBaselineCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeEffectivePatchesForPatchBaseline\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeInstanceAssociationsStatusCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeInstanceAssociationsStatus\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeInstanceInformationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeInstanceInformation\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeInstancePatchesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeInstancePatches\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeInstancePatchStatesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeInstancePatchStates\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeInstancePatchStatesForPatchGroupCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeInstancePatchStatesForPatchGroup\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeInventoryDeletionsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeInventoryDeletions\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeMaintenanceWindowExecutionsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeMaintenanceWindowExecutions\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeMaintenanceWindowExecutionTaskInvocations\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeMaintenanceWindowExecutionTasksCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeMaintenanceWindowExecutionTasks\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeMaintenanceWindowsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeMaintenanceWindows\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeMaintenanceWindowScheduleCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeMaintenanceWindowSchedule\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeMaintenanceWindowsForTargetCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeMaintenanceWindowsForTarget\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeMaintenanceWindowTargetsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeMaintenanceWindowTargets\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeMaintenanceWindowTasksCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeMaintenanceWindowTasks\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeOpsItemsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeOpsItems\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeParametersCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeParameters\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribePatchBaselinesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribePatchBaselines\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribePatchGroupsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribePatchGroups\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribePatchGroupStateCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribePatchGroupState\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribePatchPropertiesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribePatchProperties\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeSessionsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeSessions\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DisassociateOpsItemRelatedItemCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DisassociateOpsItemRelatedItem\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetAutomationExecutionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetAutomationExecution\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetCalendarStateCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetCalendarState\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetCommandInvocationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetCommandInvocation\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetConnectionStatusCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetConnectionStatus\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetDefaultPatchBaselineCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetDefaultPatchBaseline\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetDeployablePatchSnapshotForInstanceCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetDeployablePatchSnapshotForInstance\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetDocumentCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetDocument\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetInventoryCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetInventory\");\n    let body;\n    body = JSON.stringify(se_GetInventoryRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetInventorySchemaCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetInventorySchema\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetMaintenanceWindowCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetMaintenanceWindow\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetMaintenanceWindowExecutionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetMaintenanceWindowExecution\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetMaintenanceWindowExecutionTaskCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetMaintenanceWindowExecutionTask\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetMaintenanceWindowExecutionTaskInvocationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetMaintenanceWindowExecutionTaskInvocation\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetMaintenanceWindowTaskCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetMaintenanceWindowTask\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetOpsItemCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetOpsItem\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetOpsMetadataCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetOpsMetadata\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetOpsSummaryCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetOpsSummary\");\n    let body;\n    body = JSON.stringify(se_GetOpsSummaryRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetParameterCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetParameter\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetParameterHistoryCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetParameterHistory\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetParametersCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetParameters\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetParametersByPathCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetParametersByPath\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetPatchBaselineCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetPatchBaseline\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetPatchBaselineForPatchGroupCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetPatchBaselineForPatchGroup\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetResourcePoliciesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetResourcePolicies\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetServiceSettingCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetServiceSetting\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_LabelParameterVersionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"LabelParameterVersion\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListAssociationsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListAssociations\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListAssociationVersionsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListAssociationVersions\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListCommandInvocationsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListCommandInvocations\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListCommandsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListCommands\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListComplianceItemsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListComplianceItems\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListComplianceSummariesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListComplianceSummaries\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListDocumentMetadataHistoryCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListDocumentMetadataHistory\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListDocumentsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListDocuments\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListDocumentVersionsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListDocumentVersions\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListInventoryEntriesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListInventoryEntries\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListOpsItemEventsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListOpsItemEvents\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListOpsItemRelatedItemsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListOpsItemRelatedItems\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListOpsMetadataCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListOpsMetadata\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListResourceComplianceSummariesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListResourceComplianceSummaries\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListResourceDataSyncCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListResourceDataSync\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListTagsForResourceCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListTagsForResource\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ModifyDocumentPermissionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ModifyDocumentPermission\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PutComplianceItemsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"PutComplianceItems\");\n    let body;\n    body = JSON.stringify(se_PutComplianceItemsRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PutInventoryCommand = async (input, context) => {\n    const headers = sharedHeaders(\"PutInventory\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PutParameterCommand = async (input, context) => {\n    const headers = sharedHeaders(\"PutParameter\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PutResourcePolicyCommand = async (input, context) => {\n    const headers = sharedHeaders(\"PutResourcePolicy\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_RegisterDefaultPatchBaselineCommand = async (input, context) => {\n    const headers = sharedHeaders(\"RegisterDefaultPatchBaseline\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_RegisterPatchBaselineForPatchGroupCommand = async (input, context) => {\n    const headers = sharedHeaders(\"RegisterPatchBaselineForPatchGroup\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_RegisterTargetWithMaintenanceWindowCommand = async (input, context) => {\n    const headers = sharedHeaders(\"RegisterTargetWithMaintenanceWindow\");\n    let body;\n    body = JSON.stringify(se_RegisterTargetWithMaintenanceWindowRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_RegisterTaskWithMaintenanceWindowCommand = async (input, context) => {\n    const headers = sharedHeaders(\"RegisterTaskWithMaintenanceWindow\");\n    let body;\n    body = JSON.stringify(se_RegisterTaskWithMaintenanceWindowRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_RemoveTagsFromResourceCommand = async (input, context) => {\n    const headers = sharedHeaders(\"RemoveTagsFromResource\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ResetServiceSettingCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ResetServiceSetting\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ResumeSessionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ResumeSession\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_SendAutomationSignalCommand = async (input, context) => {\n    const headers = sharedHeaders(\"SendAutomationSignal\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_SendCommandCommand = async (input, context) => {\n    const headers = sharedHeaders(\"SendCommand\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_StartAssociationsOnceCommand = async (input, context) => {\n    const headers = sharedHeaders(\"StartAssociationsOnce\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_StartAutomationExecutionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"StartAutomationExecution\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_StartChangeRequestExecutionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"StartChangeRequestExecution\");\n    let body;\n    body = JSON.stringify(se_StartChangeRequestExecutionRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_StartSessionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"StartSession\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_StopAutomationExecutionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"StopAutomationExecution\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_TerminateSessionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"TerminateSession\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UnlabelParameterVersionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UnlabelParameterVersion\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateAssociationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateAssociation\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateAssociationStatusCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateAssociationStatus\");\n    let body;\n    body = JSON.stringify(se_UpdateAssociationStatusRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateDocumentCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateDocument\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateDocumentDefaultVersionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateDocumentDefaultVersion\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateDocumentMetadataCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateDocumentMetadata\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateMaintenanceWindowCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateMaintenanceWindow\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateMaintenanceWindowTargetCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateMaintenanceWindowTarget\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateMaintenanceWindowTaskCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateMaintenanceWindowTask\");\n    let body;\n    body = JSON.stringify(se_UpdateMaintenanceWindowTaskRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateManagedInstanceRoleCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateManagedInstanceRole\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateOpsItemCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateOpsItem\");\n    let body;\n    body = JSON.stringify(se_UpdateOpsItemRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateOpsMetadataCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateOpsMetadata\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdatePatchBaselineCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdatePatchBaseline\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateResourceDataSyncCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateResourceDataSync\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateServiceSettingCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateServiceSetting\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const de_AddTagsToResourceCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_AddTagsToResourceCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_AddTagsToResourceCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        case \"InvalidResourceType\":\n        case \"com.amazonaws.ssm#InvalidResourceType\":\n            throw await de_InvalidResourceTypeRes(parsedOutput, context);\n        case \"TooManyTagsError\":\n        case \"com.amazonaws.ssm#TooManyTagsError\":\n            throw await de_TooManyTagsErrorRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_AssociateOpsItemRelatedItemCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_AssociateOpsItemRelatedItemCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_AssociateOpsItemRelatedItemCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsItemInvalidParameterException\":\n        case \"com.amazonaws.ssm#OpsItemInvalidParameterException\":\n            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);\n        case \"OpsItemLimitExceededException\":\n        case \"com.amazonaws.ssm#OpsItemLimitExceededException\":\n            throw await de_OpsItemLimitExceededExceptionRes(parsedOutput, context);\n        case \"OpsItemNotFoundException\":\n        case \"com.amazonaws.ssm#OpsItemNotFoundException\":\n            throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);\n        case \"OpsItemRelatedItemAlreadyExistsException\":\n        case \"com.amazonaws.ssm#OpsItemRelatedItemAlreadyExistsException\":\n            throw await de_OpsItemRelatedItemAlreadyExistsExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CancelCommandCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CancelCommandCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CancelCommandCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DuplicateInstanceId\":\n        case \"com.amazonaws.ssm#DuplicateInstanceId\":\n            throw await de_DuplicateInstanceIdRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidCommandId\":\n        case \"com.amazonaws.ssm#InvalidCommandId\":\n            throw await de_InvalidCommandIdRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CancelMaintenanceWindowExecutionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CancelMaintenanceWindowExecutionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CancelMaintenanceWindowExecutionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateActivationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateActivationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreateActivationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidParameters\":\n        case \"com.amazonaws.ssm#InvalidParameters\":\n            throw await de_InvalidParametersRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateAssociationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateAssociationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_CreateAssociationResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreateAssociationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationAlreadyExists\":\n        case \"com.amazonaws.ssm#AssociationAlreadyExists\":\n            throw await de_AssociationAlreadyExistsRes(parsedOutput, context);\n        case \"AssociationLimitExceeded\":\n        case \"com.amazonaws.ssm#AssociationLimitExceeded\":\n            throw await de_AssociationLimitExceededRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidOutputLocation\":\n        case \"com.amazonaws.ssm#InvalidOutputLocation\":\n            throw await de_InvalidOutputLocationRes(parsedOutput, context);\n        case \"InvalidParameters\":\n        case \"com.amazonaws.ssm#InvalidParameters\":\n            throw await de_InvalidParametersRes(parsedOutput, context);\n        case \"InvalidSchedule\":\n        case \"com.amazonaws.ssm#InvalidSchedule\":\n            throw await de_InvalidScheduleRes(parsedOutput, context);\n        case \"InvalidTag\":\n        case \"com.amazonaws.ssm#InvalidTag\":\n            throw await de_InvalidTagRes(parsedOutput, context);\n        case \"InvalidTarget\":\n        case \"com.amazonaws.ssm#InvalidTarget\":\n            throw await de_InvalidTargetRes(parsedOutput, context);\n        case \"InvalidTargetMaps\":\n        case \"com.amazonaws.ssm#InvalidTargetMaps\":\n            throw await de_InvalidTargetMapsRes(parsedOutput, context);\n        case \"UnsupportedPlatformType\":\n        case \"com.amazonaws.ssm#UnsupportedPlatformType\":\n            throw await de_UnsupportedPlatformTypeRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateAssociationBatchCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateAssociationBatchCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_CreateAssociationBatchResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreateAssociationBatchCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationLimitExceeded\":\n        case \"com.amazonaws.ssm#AssociationLimitExceeded\":\n            throw await de_AssociationLimitExceededRes(parsedOutput, context);\n        case \"DuplicateInstanceId\":\n        case \"com.amazonaws.ssm#DuplicateInstanceId\":\n            throw await de_DuplicateInstanceIdRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidOutputLocation\":\n        case \"com.amazonaws.ssm#InvalidOutputLocation\":\n            throw await de_InvalidOutputLocationRes(parsedOutput, context);\n        case \"InvalidParameters\":\n        case \"com.amazonaws.ssm#InvalidParameters\":\n            throw await de_InvalidParametersRes(parsedOutput, context);\n        case \"InvalidSchedule\":\n        case \"com.amazonaws.ssm#InvalidSchedule\":\n            throw await de_InvalidScheduleRes(parsedOutput, context);\n        case \"InvalidTarget\":\n        case \"com.amazonaws.ssm#InvalidTarget\":\n            throw await de_InvalidTargetRes(parsedOutput, context);\n        case \"InvalidTargetMaps\":\n        case \"com.amazonaws.ssm#InvalidTargetMaps\":\n            throw await de_InvalidTargetMapsRes(parsedOutput, context);\n        case \"UnsupportedPlatformType\":\n        case \"com.amazonaws.ssm#UnsupportedPlatformType\":\n            throw await de_UnsupportedPlatformTypeRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateDocumentCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateDocumentCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_CreateDocumentResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreateDocumentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DocumentAlreadyExists\":\n        case \"com.amazonaws.ssm#DocumentAlreadyExists\":\n            throw await de_DocumentAlreadyExistsRes(parsedOutput, context);\n        case \"DocumentLimitExceeded\":\n        case \"com.amazonaws.ssm#DocumentLimitExceeded\":\n            throw await de_DocumentLimitExceededRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocumentContent\":\n        case \"com.amazonaws.ssm#InvalidDocumentContent\":\n            throw await de_InvalidDocumentContentRes(parsedOutput, context);\n        case \"InvalidDocumentSchemaVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentSchemaVersion\":\n            throw await de_InvalidDocumentSchemaVersionRes(parsedOutput, context);\n        case \"MaxDocumentSizeExceeded\":\n        case \"com.amazonaws.ssm#MaxDocumentSizeExceeded\":\n            throw await de_MaxDocumentSizeExceededRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateMaintenanceWindowCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateMaintenanceWindowCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreateMaintenanceWindowCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"IdempotentParameterMismatch\":\n        case \"com.amazonaws.ssm#IdempotentParameterMismatch\":\n            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourceLimitExceededException\":\n        case \"com.amazonaws.ssm#ResourceLimitExceededException\":\n            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateOpsItemCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateOpsItemCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreateOpsItemCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsItemAccessDeniedException\":\n        case \"com.amazonaws.ssm#OpsItemAccessDeniedException\":\n            throw await de_OpsItemAccessDeniedExceptionRes(parsedOutput, context);\n        case \"OpsItemAlreadyExistsException\":\n        case \"com.amazonaws.ssm#OpsItemAlreadyExistsException\":\n            throw await de_OpsItemAlreadyExistsExceptionRes(parsedOutput, context);\n        case \"OpsItemInvalidParameterException\":\n        case \"com.amazonaws.ssm#OpsItemInvalidParameterException\":\n            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);\n        case \"OpsItemLimitExceededException\":\n        case \"com.amazonaws.ssm#OpsItemLimitExceededException\":\n            throw await de_OpsItemLimitExceededExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateOpsMetadataCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateOpsMetadataCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreateOpsMetadataCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsMetadataAlreadyExistsException\":\n        case \"com.amazonaws.ssm#OpsMetadataAlreadyExistsException\":\n            throw await de_OpsMetadataAlreadyExistsExceptionRes(parsedOutput, context);\n        case \"OpsMetadataInvalidArgumentException\":\n        case \"com.amazonaws.ssm#OpsMetadataInvalidArgumentException\":\n            throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);\n        case \"OpsMetadataLimitExceededException\":\n        case \"com.amazonaws.ssm#OpsMetadataLimitExceededException\":\n            throw await de_OpsMetadataLimitExceededExceptionRes(parsedOutput, context);\n        case \"OpsMetadataTooManyUpdatesException\":\n        case \"com.amazonaws.ssm#OpsMetadataTooManyUpdatesException\":\n            throw await de_OpsMetadataTooManyUpdatesExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreatePatchBaselineCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreatePatchBaselineCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreatePatchBaselineCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"IdempotentParameterMismatch\":\n        case \"com.amazonaws.ssm#IdempotentParameterMismatch\":\n            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourceLimitExceededException\":\n        case \"com.amazonaws.ssm#ResourceLimitExceededException\":\n            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateResourceDataSyncCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateResourceDataSyncCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreateResourceDataSyncCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourceDataSyncAlreadyExistsException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncAlreadyExistsException\":\n            throw await de_ResourceDataSyncAlreadyExistsExceptionRes(parsedOutput, context);\n        case \"ResourceDataSyncCountExceededException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncCountExceededException\":\n            throw await de_ResourceDataSyncCountExceededExceptionRes(parsedOutput, context);\n        case \"ResourceDataSyncInvalidConfigurationException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException\":\n            throw await de_ResourceDataSyncInvalidConfigurationExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteActivationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteActivationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteActivationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidActivation\":\n        case \"com.amazonaws.ssm#InvalidActivation\":\n            throw await de_InvalidActivationRes(parsedOutput, context);\n        case \"InvalidActivationId\":\n        case \"com.amazonaws.ssm#InvalidActivationId\":\n            throw await de_InvalidActivationIdRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteAssociationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteAssociationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteAssociationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationDoesNotExist\":\n        case \"com.amazonaws.ssm#AssociationDoesNotExist\":\n            throw await de_AssociationDoesNotExistRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteDocumentCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteDocumentCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteDocumentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociatedInstances\":\n        case \"com.amazonaws.ssm#AssociatedInstances\":\n            throw await de_AssociatedInstancesRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentOperation\":\n        case \"com.amazonaws.ssm#InvalidDocumentOperation\":\n            throw await de_InvalidDocumentOperationRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteInventoryCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteInventoryCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteInventoryCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDeleteInventoryParametersException\":\n        case \"com.amazonaws.ssm#InvalidDeleteInventoryParametersException\":\n            throw await de_InvalidDeleteInventoryParametersExceptionRes(parsedOutput, context);\n        case \"InvalidInventoryRequestException\":\n        case \"com.amazonaws.ssm#InvalidInventoryRequestException\":\n            throw await de_InvalidInventoryRequestExceptionRes(parsedOutput, context);\n        case \"InvalidOptionException\":\n        case \"com.amazonaws.ssm#InvalidOptionException\":\n            throw await de_InvalidOptionExceptionRes(parsedOutput, context);\n        case \"InvalidTypeNameException\":\n        case \"com.amazonaws.ssm#InvalidTypeNameException\":\n            throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteMaintenanceWindowCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteMaintenanceWindowCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteMaintenanceWindowCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteOpsMetadataCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteOpsMetadataCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteOpsMetadataCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsMetadataInvalidArgumentException\":\n        case \"com.amazonaws.ssm#OpsMetadataInvalidArgumentException\":\n            throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);\n        case \"OpsMetadataNotFoundException\":\n        case \"com.amazonaws.ssm#OpsMetadataNotFoundException\":\n            throw await de_OpsMetadataNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteParameterCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteParameterCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteParameterCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ParameterNotFound\":\n        case \"com.amazonaws.ssm#ParameterNotFound\":\n            throw await de_ParameterNotFoundRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteParametersCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteParametersCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteParametersCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeletePatchBaselineCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeletePatchBaselineCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeletePatchBaselineCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourceInUseException\":\n        case \"com.amazonaws.ssm#ResourceInUseException\":\n            throw await de_ResourceInUseExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteResourceDataSyncCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteResourceDataSyncCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteResourceDataSyncCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourceDataSyncInvalidConfigurationException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException\":\n            throw await de_ResourceDataSyncInvalidConfigurationExceptionRes(parsedOutput, context);\n        case \"ResourceDataSyncNotFoundException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncNotFoundException\":\n            throw await de_ResourceDataSyncNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteResourcePolicyCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteResourcePolicyCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteResourcePolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourcePolicyConflictException\":\n        case \"com.amazonaws.ssm#ResourcePolicyConflictException\":\n            throw await de_ResourcePolicyConflictExceptionRes(parsedOutput, context);\n        case \"ResourcePolicyInvalidParameterException\":\n        case \"com.amazonaws.ssm#ResourcePolicyInvalidParameterException\":\n            throw await de_ResourcePolicyInvalidParameterExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeregisterManagedInstanceCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeregisterManagedInstanceCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeregisterManagedInstanceCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeregisterPatchBaselineForPatchGroupCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeregisterPatchBaselineForPatchGroupCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeregisterPatchBaselineForPatchGroupCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeregisterTargetFromMaintenanceWindowCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeregisterTargetFromMaintenanceWindowCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeregisterTargetFromMaintenanceWindowCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"TargetInUseException\":\n        case \"com.amazonaws.ssm#TargetInUseException\":\n            throw await de_TargetInUseExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeregisterTaskFromMaintenanceWindowCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeregisterTaskFromMaintenanceWindowCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeregisterTaskFromMaintenanceWindowCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeActivationsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeActivationsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeActivationsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeActivationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilter\":\n        case \"com.amazonaws.ssm#InvalidFilter\":\n            throw await de_InvalidFilterRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeAssociationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeAssociationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeAssociationResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeAssociationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationDoesNotExist\":\n        case \"com.amazonaws.ssm#AssociationDoesNotExist\":\n            throw await de_AssociationDoesNotExistRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidAssociationVersion\":\n        case \"com.amazonaws.ssm#InvalidAssociationVersion\":\n            throw await de_InvalidAssociationVersionRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeAssociationExecutionsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeAssociationExecutionsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeAssociationExecutionsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeAssociationExecutionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationDoesNotExist\":\n        case \"com.amazonaws.ssm#AssociationDoesNotExist\":\n            throw await de_AssociationDoesNotExistRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeAssociationExecutionTargetsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeAssociationExecutionTargetsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeAssociationExecutionTargetsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeAssociationExecutionTargetsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationDoesNotExist\":\n        case \"com.amazonaws.ssm#AssociationDoesNotExist\":\n            throw await de_AssociationDoesNotExistRes(parsedOutput, context);\n        case \"AssociationExecutionDoesNotExist\":\n        case \"com.amazonaws.ssm#AssociationExecutionDoesNotExist\":\n            throw await de_AssociationExecutionDoesNotExistRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeAutomationExecutionsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeAutomationExecutionsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeAutomationExecutionsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeAutomationExecutionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilterKey\":\n        case \"com.amazonaws.ssm#InvalidFilterKey\":\n            throw await de_InvalidFilterKeyRes(parsedOutput, context);\n        case \"InvalidFilterValue\":\n        case \"com.amazonaws.ssm#InvalidFilterValue\":\n            throw await de_InvalidFilterValueRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeAutomationStepExecutionsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeAutomationStepExecutionsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeAutomationStepExecutionsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeAutomationStepExecutionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AutomationExecutionNotFoundException\":\n        case \"com.amazonaws.ssm#AutomationExecutionNotFoundException\":\n            throw await de_AutomationExecutionNotFoundExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilterKey\":\n        case \"com.amazonaws.ssm#InvalidFilterKey\":\n            throw await de_InvalidFilterKeyRes(parsedOutput, context);\n        case \"InvalidFilterValue\":\n        case \"com.amazonaws.ssm#InvalidFilterValue\":\n            throw await de_InvalidFilterValueRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeAvailablePatchesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeAvailablePatchesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeAvailablePatchesResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeAvailablePatchesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeDocumentCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeDocumentCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeDocumentResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeDocumentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeDocumentPermissionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeDocumentPermissionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeDocumentPermissionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentOperation\":\n        case \"com.amazonaws.ssm#InvalidDocumentOperation\":\n            throw await de_InvalidDocumentOperationRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        case \"InvalidPermissionType\":\n        case \"com.amazonaws.ssm#InvalidPermissionType\":\n            throw await de_InvalidPermissionTypeRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeEffectiveInstanceAssociationsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeEffectiveInstanceAssociationsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeEffectiveInstanceAssociationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeEffectivePatchesForPatchBaselineCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeEffectivePatchesForPatchBaselineCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeEffectivePatchesForPatchBaselineResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeEffectivePatchesForPatchBaselineCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        case \"UnsupportedOperatingSystem\":\n        case \"com.amazonaws.ssm#UnsupportedOperatingSystem\":\n            throw await de_UnsupportedOperatingSystemRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeInstanceAssociationsStatusCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeInstanceAssociationsStatusCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeInstanceAssociationsStatusResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeInstanceAssociationsStatusCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeInstanceInformationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeInstanceInformationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeInstanceInformationResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeInstanceInformationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilterKey\":\n        case \"com.amazonaws.ssm#InvalidFilterKey\":\n            throw await de_InvalidFilterKeyRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidInstanceInformationFilterValue\":\n        case \"com.amazonaws.ssm#InvalidInstanceInformationFilterValue\":\n            throw await de_InvalidInstanceInformationFilterValueRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeInstancePatchesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeInstancePatchesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeInstancePatchesResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeInstancePatchesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilter\":\n        case \"com.amazonaws.ssm#InvalidFilter\":\n            throw await de_InvalidFilterRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeInstancePatchStatesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeInstancePatchStatesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeInstancePatchStatesResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeInstancePatchStatesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeInstancePatchStatesForPatchGroupCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeInstancePatchStatesForPatchGroupCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeInstancePatchStatesForPatchGroupResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeInstancePatchStatesForPatchGroupCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilter\":\n        case \"com.amazonaws.ssm#InvalidFilter\":\n            throw await de_InvalidFilterRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeInventoryDeletionsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeInventoryDeletionsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeInventoryDeletionsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeInventoryDeletionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDeletionIdException\":\n        case \"com.amazonaws.ssm#InvalidDeletionIdException\":\n            throw await de_InvalidDeletionIdExceptionRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeMaintenanceWindowExecutionsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeMaintenanceWindowExecutionsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeMaintenanceWindowExecutionsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeMaintenanceWindowExecutionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeMaintenanceWindowExecutionTaskInvocationsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeMaintenanceWindowExecutionTaskInvocationsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeMaintenanceWindowExecutionTaskInvocationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeMaintenanceWindowExecutionTasksCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeMaintenanceWindowExecutionTasksCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeMaintenanceWindowExecutionTasksResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeMaintenanceWindowExecutionTasksCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeMaintenanceWindowsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeMaintenanceWindowsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeMaintenanceWindowsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeMaintenanceWindowScheduleCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeMaintenanceWindowScheduleCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeMaintenanceWindowScheduleCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeMaintenanceWindowsForTargetCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeMaintenanceWindowsForTargetCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeMaintenanceWindowsForTargetCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeMaintenanceWindowTargetsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeMaintenanceWindowTargetsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeMaintenanceWindowTargetsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeMaintenanceWindowTasksCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeMaintenanceWindowTasksCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeMaintenanceWindowTasksCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeOpsItemsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeOpsItemsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeOpsItemsResponse(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeOpsItemsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeParametersCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeParametersCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeParametersResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeParametersCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilterKey\":\n        case \"com.amazonaws.ssm#InvalidFilterKey\":\n            throw await de_InvalidFilterKeyRes(parsedOutput, context);\n        case \"InvalidFilterOption\":\n        case \"com.amazonaws.ssm#InvalidFilterOption\":\n            throw await de_InvalidFilterOptionRes(parsedOutput, context);\n        case \"InvalidFilterValue\":\n        case \"com.amazonaws.ssm#InvalidFilterValue\":\n            throw await de_InvalidFilterValueRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribePatchBaselinesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribePatchBaselinesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribePatchBaselinesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribePatchGroupsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribePatchGroupsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribePatchGroupsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribePatchGroupStateCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribePatchGroupStateCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribePatchGroupStateCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribePatchPropertiesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribePatchPropertiesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribePatchPropertiesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeSessionsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeSessionsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeSessionsResponse(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeSessionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilterKey\":\n        case \"com.amazonaws.ssm#InvalidFilterKey\":\n            throw await de_InvalidFilterKeyRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DisassociateOpsItemRelatedItemCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DisassociateOpsItemRelatedItemCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DisassociateOpsItemRelatedItemCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsItemInvalidParameterException\":\n        case \"com.amazonaws.ssm#OpsItemInvalidParameterException\":\n            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);\n        case \"OpsItemNotFoundException\":\n        case \"com.amazonaws.ssm#OpsItemNotFoundException\":\n            throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);\n        case \"OpsItemRelatedItemAssociationNotFoundException\":\n        case \"com.amazonaws.ssm#OpsItemRelatedItemAssociationNotFoundException\":\n            throw await de_OpsItemRelatedItemAssociationNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetAutomationExecutionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetAutomationExecutionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetAutomationExecutionResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetAutomationExecutionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AutomationExecutionNotFoundException\":\n        case \"com.amazonaws.ssm#AutomationExecutionNotFoundException\":\n            throw await de_AutomationExecutionNotFoundExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetCalendarStateCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetCalendarStateCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetCalendarStateCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentType\":\n        case \"com.amazonaws.ssm#InvalidDocumentType\":\n            throw await de_InvalidDocumentTypeRes(parsedOutput, context);\n        case \"UnsupportedCalendarException\":\n        case \"com.amazonaws.ssm#UnsupportedCalendarException\":\n            throw await de_UnsupportedCalendarExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetCommandInvocationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetCommandInvocationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetCommandInvocationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidCommandId\":\n        case \"com.amazonaws.ssm#InvalidCommandId\":\n            throw await de_InvalidCommandIdRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidPluginName\":\n        case \"com.amazonaws.ssm#InvalidPluginName\":\n            throw await de_InvalidPluginNameRes(parsedOutput, context);\n        case \"InvocationDoesNotExist\":\n        case \"com.amazonaws.ssm#InvocationDoesNotExist\":\n            throw await de_InvocationDoesNotExistRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetConnectionStatusCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetConnectionStatusCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetConnectionStatusCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetDefaultPatchBaselineCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetDefaultPatchBaselineCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetDefaultPatchBaselineCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetDeployablePatchSnapshotForInstanceCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetDeployablePatchSnapshotForInstanceCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetDeployablePatchSnapshotForInstanceCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"UnsupportedFeatureRequiredException\":\n        case \"com.amazonaws.ssm#UnsupportedFeatureRequiredException\":\n            throw await de_UnsupportedFeatureRequiredExceptionRes(parsedOutput, context);\n        case \"UnsupportedOperatingSystem\":\n        case \"com.amazonaws.ssm#UnsupportedOperatingSystem\":\n            throw await de_UnsupportedOperatingSystemRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetDocumentCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetDocumentCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetDocumentResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetDocumentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetInventoryCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetInventoryCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetInventoryCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidAggregatorException\":\n        case \"com.amazonaws.ssm#InvalidAggregatorException\":\n            throw await de_InvalidAggregatorExceptionRes(parsedOutput, context);\n        case \"InvalidFilter\":\n        case \"com.amazonaws.ssm#InvalidFilter\":\n            throw await de_InvalidFilterRes(parsedOutput, context);\n        case \"InvalidInventoryGroupException\":\n        case \"com.amazonaws.ssm#InvalidInventoryGroupException\":\n            throw await de_InvalidInventoryGroupExceptionRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        case \"InvalidResultAttributeException\":\n        case \"com.amazonaws.ssm#InvalidResultAttributeException\":\n            throw await de_InvalidResultAttributeExceptionRes(parsedOutput, context);\n        case \"InvalidTypeNameException\":\n        case \"com.amazonaws.ssm#InvalidTypeNameException\":\n            throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetInventorySchemaCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetInventorySchemaCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetInventorySchemaCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        case \"InvalidTypeNameException\":\n        case \"com.amazonaws.ssm#InvalidTypeNameException\":\n            throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetMaintenanceWindowCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetMaintenanceWindowCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetMaintenanceWindowResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetMaintenanceWindowCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetMaintenanceWindowExecutionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetMaintenanceWindowExecutionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetMaintenanceWindowExecutionResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetMaintenanceWindowExecutionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetMaintenanceWindowExecutionTaskCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetMaintenanceWindowExecutionTaskCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetMaintenanceWindowExecutionTaskResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetMaintenanceWindowExecutionTaskCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetMaintenanceWindowExecutionTaskInvocationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetMaintenanceWindowExecutionTaskInvocationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetMaintenanceWindowExecutionTaskInvocationResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetMaintenanceWindowExecutionTaskInvocationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetMaintenanceWindowTaskCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetMaintenanceWindowTaskCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetMaintenanceWindowTaskResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetMaintenanceWindowTaskCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetOpsItemCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetOpsItemCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetOpsItemResponse(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetOpsItemCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsItemAccessDeniedException\":\n        case \"com.amazonaws.ssm#OpsItemAccessDeniedException\":\n            throw await de_OpsItemAccessDeniedExceptionRes(parsedOutput, context);\n        case \"OpsItemNotFoundException\":\n        case \"com.amazonaws.ssm#OpsItemNotFoundException\":\n            throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetOpsMetadataCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetOpsMetadataCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetOpsMetadataCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsMetadataInvalidArgumentException\":\n        case \"com.amazonaws.ssm#OpsMetadataInvalidArgumentException\":\n            throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);\n        case \"OpsMetadataNotFoundException\":\n        case \"com.amazonaws.ssm#OpsMetadataNotFoundException\":\n            throw await de_OpsMetadataNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetOpsSummaryCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetOpsSummaryCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetOpsSummaryCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidAggregatorException\":\n        case \"com.amazonaws.ssm#InvalidAggregatorException\":\n            throw await de_InvalidAggregatorExceptionRes(parsedOutput, context);\n        case \"InvalidFilter\":\n        case \"com.amazonaws.ssm#InvalidFilter\":\n            throw await de_InvalidFilterRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        case \"InvalidTypeNameException\":\n        case \"com.amazonaws.ssm#InvalidTypeNameException\":\n            throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);\n        case \"ResourceDataSyncNotFoundException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncNotFoundException\":\n            throw await de_ResourceDataSyncNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetParameterCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetParameterCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetParameterResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetParameterCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidKeyId\":\n        case \"com.amazonaws.ssm#InvalidKeyId\":\n            throw await de_InvalidKeyIdRes(parsedOutput, context);\n        case \"ParameterNotFound\":\n        case \"com.amazonaws.ssm#ParameterNotFound\":\n            throw await de_ParameterNotFoundRes(parsedOutput, context);\n        case \"ParameterVersionNotFound\":\n        case \"com.amazonaws.ssm#ParameterVersionNotFound\":\n            throw await de_ParameterVersionNotFoundRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetParameterHistoryCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetParameterHistoryCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetParameterHistoryResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetParameterHistoryCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidKeyId\":\n        case \"com.amazonaws.ssm#InvalidKeyId\":\n            throw await de_InvalidKeyIdRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        case \"ParameterNotFound\":\n        case \"com.amazonaws.ssm#ParameterNotFound\":\n            throw await de_ParameterNotFoundRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetParametersCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetParametersCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetParametersResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetParametersCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidKeyId\":\n        case \"com.amazonaws.ssm#InvalidKeyId\":\n            throw await de_InvalidKeyIdRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetParametersByPathCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetParametersByPathCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetParametersByPathResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetParametersByPathCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilterKey\":\n        case \"com.amazonaws.ssm#InvalidFilterKey\":\n            throw await de_InvalidFilterKeyRes(parsedOutput, context);\n        case \"InvalidFilterOption\":\n        case \"com.amazonaws.ssm#InvalidFilterOption\":\n            throw await de_InvalidFilterOptionRes(parsedOutput, context);\n        case \"InvalidFilterValue\":\n        case \"com.amazonaws.ssm#InvalidFilterValue\":\n            throw await de_InvalidFilterValueRes(parsedOutput, context);\n        case \"InvalidKeyId\":\n        case \"com.amazonaws.ssm#InvalidKeyId\":\n            throw await de_InvalidKeyIdRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetPatchBaselineCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetPatchBaselineCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetPatchBaselineResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetPatchBaselineCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetPatchBaselineForPatchGroupCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetPatchBaselineForPatchGroupCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetPatchBaselineForPatchGroupCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetResourcePoliciesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetResourcePoliciesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetResourcePoliciesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourcePolicyInvalidParameterException\":\n        case \"com.amazonaws.ssm#ResourcePolicyInvalidParameterException\":\n            throw await de_ResourcePolicyInvalidParameterExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetServiceSettingCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetServiceSettingCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetServiceSettingResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetServiceSettingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ServiceSettingNotFound\":\n        case \"com.amazonaws.ssm#ServiceSettingNotFound\":\n            throw await de_ServiceSettingNotFoundRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_LabelParameterVersionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_LabelParameterVersionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_LabelParameterVersionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ParameterNotFound\":\n        case \"com.amazonaws.ssm#ParameterNotFound\":\n            throw await de_ParameterNotFoundRes(parsedOutput, context);\n        case \"ParameterVersionLabelLimitExceeded\":\n        case \"com.amazonaws.ssm#ParameterVersionLabelLimitExceeded\":\n            throw await de_ParameterVersionLabelLimitExceededRes(parsedOutput, context);\n        case \"ParameterVersionNotFound\":\n        case \"com.amazonaws.ssm#ParameterVersionNotFound\":\n            throw await de_ParameterVersionNotFoundRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListAssociationsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListAssociationsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListAssociationsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListAssociationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListAssociationVersionsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListAssociationVersionsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListAssociationVersionsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListAssociationVersionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationDoesNotExist\":\n        case \"com.amazonaws.ssm#AssociationDoesNotExist\":\n            throw await de_AssociationDoesNotExistRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListCommandInvocationsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListCommandInvocationsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListCommandInvocationsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListCommandInvocationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidCommandId\":\n        case \"com.amazonaws.ssm#InvalidCommandId\":\n            throw await de_InvalidCommandIdRes(parsedOutput, context);\n        case \"InvalidFilterKey\":\n        case \"com.amazonaws.ssm#InvalidFilterKey\":\n            throw await de_InvalidFilterKeyRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListCommandsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListCommandsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListCommandsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListCommandsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidCommandId\":\n        case \"com.amazonaws.ssm#InvalidCommandId\":\n            throw await de_InvalidCommandIdRes(parsedOutput, context);\n        case \"InvalidFilterKey\":\n        case \"com.amazonaws.ssm#InvalidFilterKey\":\n            throw await de_InvalidFilterKeyRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListComplianceItemsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListComplianceItemsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListComplianceItemsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListComplianceItemsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilter\":\n        case \"com.amazonaws.ssm#InvalidFilter\":\n            throw await de_InvalidFilterRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        case \"InvalidResourceType\":\n        case \"com.amazonaws.ssm#InvalidResourceType\":\n            throw await de_InvalidResourceTypeRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListComplianceSummariesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListComplianceSummariesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListComplianceSummariesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilter\":\n        case \"com.amazonaws.ssm#InvalidFilter\":\n            throw await de_InvalidFilterRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListDocumentMetadataHistoryCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListDocumentMetadataHistoryCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListDocumentMetadataHistoryResponse(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListDocumentMetadataHistoryCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListDocumentsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListDocumentsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListDocumentsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListDocumentsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilterKey\":\n        case \"com.amazonaws.ssm#InvalidFilterKey\":\n            throw await de_InvalidFilterKeyRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListDocumentVersionsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListDocumentVersionsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListDocumentVersionsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListDocumentVersionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListInventoryEntriesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListInventoryEntriesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListInventoryEntriesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilter\":\n        case \"com.amazonaws.ssm#InvalidFilter\":\n            throw await de_InvalidFilterRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        case \"InvalidTypeNameException\":\n        case \"com.amazonaws.ssm#InvalidTypeNameException\":\n            throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListOpsItemEventsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListOpsItemEventsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListOpsItemEventsResponse(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListOpsItemEventsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsItemInvalidParameterException\":\n        case \"com.amazonaws.ssm#OpsItemInvalidParameterException\":\n            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);\n        case \"OpsItemLimitExceededException\":\n        case \"com.amazonaws.ssm#OpsItemLimitExceededException\":\n            throw await de_OpsItemLimitExceededExceptionRes(parsedOutput, context);\n        case \"OpsItemNotFoundException\":\n        case \"com.amazonaws.ssm#OpsItemNotFoundException\":\n            throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListOpsItemRelatedItemsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListOpsItemRelatedItemsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListOpsItemRelatedItemsResponse(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListOpsItemRelatedItemsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsItemInvalidParameterException\":\n        case \"com.amazonaws.ssm#OpsItemInvalidParameterException\":\n            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListOpsMetadataCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListOpsMetadataCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListOpsMetadataResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListOpsMetadataCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsMetadataInvalidArgumentException\":\n        case \"com.amazonaws.ssm#OpsMetadataInvalidArgumentException\":\n            throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListResourceComplianceSummariesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListResourceComplianceSummariesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListResourceComplianceSummariesResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListResourceComplianceSummariesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilter\":\n        case \"com.amazonaws.ssm#InvalidFilter\":\n            throw await de_InvalidFilterRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListResourceDataSyncCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListResourceDataSyncCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListResourceDataSyncResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListResourceDataSyncCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        case \"ResourceDataSyncInvalidConfigurationException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException\":\n            throw await de_ResourceDataSyncInvalidConfigurationExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListTagsForResourceCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListTagsForResourceCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListTagsForResourceCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        case \"InvalidResourceType\":\n        case \"com.amazonaws.ssm#InvalidResourceType\":\n            throw await de_InvalidResourceTypeRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ModifyDocumentPermissionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ModifyDocumentPermissionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ModifyDocumentPermissionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DocumentLimitExceeded\":\n        case \"com.amazonaws.ssm#DocumentLimitExceeded\":\n            throw await de_DocumentLimitExceededRes(parsedOutput, context);\n        case \"DocumentPermissionLimit\":\n        case \"com.amazonaws.ssm#DocumentPermissionLimit\":\n            throw await de_DocumentPermissionLimitRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidPermissionType\":\n        case \"com.amazonaws.ssm#InvalidPermissionType\":\n            throw await de_InvalidPermissionTypeRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_PutComplianceItemsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_PutComplianceItemsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_PutComplianceItemsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ComplianceTypeCountLimitExceededException\":\n        case \"com.amazonaws.ssm#ComplianceTypeCountLimitExceededException\":\n            throw await de_ComplianceTypeCountLimitExceededExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidItemContentException\":\n        case \"com.amazonaws.ssm#InvalidItemContentException\":\n            throw await de_InvalidItemContentExceptionRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        case \"InvalidResourceType\":\n        case \"com.amazonaws.ssm#InvalidResourceType\":\n            throw await de_InvalidResourceTypeRes(parsedOutput, context);\n        case \"ItemSizeLimitExceededException\":\n        case \"com.amazonaws.ssm#ItemSizeLimitExceededException\":\n            throw await de_ItemSizeLimitExceededExceptionRes(parsedOutput, context);\n        case \"TotalSizeLimitExceededException\":\n        case \"com.amazonaws.ssm#TotalSizeLimitExceededException\":\n            throw await de_TotalSizeLimitExceededExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_PutInventoryCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_PutInventoryCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_PutInventoryCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"CustomSchemaCountLimitExceededException\":\n        case \"com.amazonaws.ssm#CustomSchemaCountLimitExceededException\":\n            throw await de_CustomSchemaCountLimitExceededExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidInventoryItemContextException\":\n        case \"com.amazonaws.ssm#InvalidInventoryItemContextException\":\n            throw await de_InvalidInventoryItemContextExceptionRes(parsedOutput, context);\n        case \"InvalidItemContentException\":\n        case \"com.amazonaws.ssm#InvalidItemContentException\":\n            throw await de_InvalidItemContentExceptionRes(parsedOutput, context);\n        case \"InvalidTypeNameException\":\n        case \"com.amazonaws.ssm#InvalidTypeNameException\":\n            throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);\n        case \"ItemContentMismatchException\":\n        case \"com.amazonaws.ssm#ItemContentMismatchException\":\n            throw await de_ItemContentMismatchExceptionRes(parsedOutput, context);\n        case \"ItemSizeLimitExceededException\":\n        case \"com.amazonaws.ssm#ItemSizeLimitExceededException\":\n            throw await de_ItemSizeLimitExceededExceptionRes(parsedOutput, context);\n        case \"SubTypeCountLimitExceededException\":\n        case \"com.amazonaws.ssm#SubTypeCountLimitExceededException\":\n            throw await de_SubTypeCountLimitExceededExceptionRes(parsedOutput, context);\n        case \"TotalSizeLimitExceededException\":\n        case \"com.amazonaws.ssm#TotalSizeLimitExceededException\":\n            throw await de_TotalSizeLimitExceededExceptionRes(parsedOutput, context);\n        case \"UnsupportedInventoryItemContextException\":\n        case \"com.amazonaws.ssm#UnsupportedInventoryItemContextException\":\n            throw await de_UnsupportedInventoryItemContextExceptionRes(parsedOutput, context);\n        case \"UnsupportedInventorySchemaVersionException\":\n        case \"com.amazonaws.ssm#UnsupportedInventorySchemaVersionException\":\n            throw await de_UnsupportedInventorySchemaVersionExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_PutParameterCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_PutParameterCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_PutParameterCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"HierarchyLevelLimitExceededException\":\n        case \"com.amazonaws.ssm#HierarchyLevelLimitExceededException\":\n            throw await de_HierarchyLevelLimitExceededExceptionRes(parsedOutput, context);\n        case \"HierarchyTypeMismatchException\":\n        case \"com.amazonaws.ssm#HierarchyTypeMismatchException\":\n            throw await de_HierarchyTypeMismatchExceptionRes(parsedOutput, context);\n        case \"IncompatiblePolicyException\":\n        case \"com.amazonaws.ssm#IncompatiblePolicyException\":\n            throw await de_IncompatiblePolicyExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidAllowedPatternException\":\n        case \"com.amazonaws.ssm#InvalidAllowedPatternException\":\n            throw await de_InvalidAllowedPatternExceptionRes(parsedOutput, context);\n        case \"InvalidKeyId\":\n        case \"com.amazonaws.ssm#InvalidKeyId\":\n            throw await de_InvalidKeyIdRes(parsedOutput, context);\n        case \"InvalidPolicyAttributeException\":\n        case \"com.amazonaws.ssm#InvalidPolicyAttributeException\":\n            throw await de_InvalidPolicyAttributeExceptionRes(parsedOutput, context);\n        case \"InvalidPolicyTypeException\":\n        case \"com.amazonaws.ssm#InvalidPolicyTypeException\":\n            throw await de_InvalidPolicyTypeExceptionRes(parsedOutput, context);\n        case \"ParameterAlreadyExists\":\n        case \"com.amazonaws.ssm#ParameterAlreadyExists\":\n            throw await de_ParameterAlreadyExistsRes(parsedOutput, context);\n        case \"ParameterLimitExceeded\":\n        case \"com.amazonaws.ssm#ParameterLimitExceeded\":\n            throw await de_ParameterLimitExceededRes(parsedOutput, context);\n        case \"ParameterMaxVersionLimitExceeded\":\n        case \"com.amazonaws.ssm#ParameterMaxVersionLimitExceeded\":\n            throw await de_ParameterMaxVersionLimitExceededRes(parsedOutput, context);\n        case \"ParameterPatternMismatchException\":\n        case \"com.amazonaws.ssm#ParameterPatternMismatchException\":\n            throw await de_ParameterPatternMismatchExceptionRes(parsedOutput, context);\n        case \"PoliciesLimitExceededException\":\n        case \"com.amazonaws.ssm#PoliciesLimitExceededException\":\n            throw await de_PoliciesLimitExceededExceptionRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        case \"UnsupportedParameterType\":\n        case \"com.amazonaws.ssm#UnsupportedParameterType\":\n            throw await de_UnsupportedParameterTypeRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_PutResourcePolicyCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_PutResourcePolicyCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_PutResourcePolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourcePolicyConflictException\":\n        case \"com.amazonaws.ssm#ResourcePolicyConflictException\":\n            throw await de_ResourcePolicyConflictExceptionRes(parsedOutput, context);\n        case \"ResourcePolicyInvalidParameterException\":\n        case \"com.amazonaws.ssm#ResourcePolicyInvalidParameterException\":\n            throw await de_ResourcePolicyInvalidParameterExceptionRes(parsedOutput, context);\n        case \"ResourcePolicyLimitExceededException\":\n        case \"com.amazonaws.ssm#ResourcePolicyLimitExceededException\":\n            throw await de_ResourcePolicyLimitExceededExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_RegisterDefaultPatchBaselineCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_RegisterDefaultPatchBaselineCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_RegisterDefaultPatchBaselineCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_RegisterPatchBaselineForPatchGroupCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_RegisterPatchBaselineForPatchGroupCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_RegisterPatchBaselineForPatchGroupCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AlreadyExistsException\":\n        case \"com.amazonaws.ssm#AlreadyExistsException\":\n            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        case \"ResourceLimitExceededException\":\n        case \"com.amazonaws.ssm#ResourceLimitExceededException\":\n            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_RegisterTargetWithMaintenanceWindowCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_RegisterTargetWithMaintenanceWindowCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_RegisterTargetWithMaintenanceWindowCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"IdempotentParameterMismatch\":\n        case \"com.amazonaws.ssm#IdempotentParameterMismatch\":\n            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourceLimitExceededException\":\n        case \"com.amazonaws.ssm#ResourceLimitExceededException\":\n            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_RegisterTaskWithMaintenanceWindowCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_RegisterTaskWithMaintenanceWindowCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_RegisterTaskWithMaintenanceWindowCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"FeatureNotAvailableException\":\n        case \"com.amazonaws.ssm#FeatureNotAvailableException\":\n            throw await de_FeatureNotAvailableExceptionRes(parsedOutput, context);\n        case \"IdempotentParameterMismatch\":\n        case \"com.amazonaws.ssm#IdempotentParameterMismatch\":\n            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourceLimitExceededException\":\n        case \"com.amazonaws.ssm#ResourceLimitExceededException\":\n            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_RemoveTagsFromResourceCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_RemoveTagsFromResourceCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_RemoveTagsFromResourceCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        case \"InvalidResourceType\":\n        case \"com.amazonaws.ssm#InvalidResourceType\":\n            throw await de_InvalidResourceTypeRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ResetServiceSettingCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ResetServiceSettingCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ResetServiceSettingResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ResetServiceSettingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ServiceSettingNotFound\":\n        case \"com.amazonaws.ssm#ServiceSettingNotFound\":\n            throw await de_ServiceSettingNotFoundRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ResumeSessionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ResumeSessionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ResumeSessionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_SendAutomationSignalCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_SendAutomationSignalCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_SendAutomationSignalCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AutomationExecutionNotFoundException\":\n        case \"com.amazonaws.ssm#AutomationExecutionNotFoundException\":\n            throw await de_AutomationExecutionNotFoundExceptionRes(parsedOutput, context);\n        case \"AutomationStepNotFoundException\":\n        case \"com.amazonaws.ssm#AutomationStepNotFoundException\":\n            throw await de_AutomationStepNotFoundExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidAutomationSignalException\":\n        case \"com.amazonaws.ssm#InvalidAutomationSignalException\":\n            throw await de_InvalidAutomationSignalExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_SendCommandCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_SendCommandCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_SendCommandResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_SendCommandCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DuplicateInstanceId\":\n        case \"com.amazonaws.ssm#DuplicateInstanceId\":\n            throw await de_DuplicateInstanceIdRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidNotificationConfig\":\n        case \"com.amazonaws.ssm#InvalidNotificationConfig\":\n            throw await de_InvalidNotificationConfigRes(parsedOutput, context);\n        case \"InvalidOutputFolder\":\n        case \"com.amazonaws.ssm#InvalidOutputFolder\":\n            throw await de_InvalidOutputFolderRes(parsedOutput, context);\n        case \"InvalidParameters\":\n        case \"com.amazonaws.ssm#InvalidParameters\":\n            throw await de_InvalidParametersRes(parsedOutput, context);\n        case \"InvalidRole\":\n        case \"com.amazonaws.ssm#InvalidRole\":\n            throw await de_InvalidRoleRes(parsedOutput, context);\n        case \"MaxDocumentSizeExceeded\":\n        case \"com.amazonaws.ssm#MaxDocumentSizeExceeded\":\n            throw await de_MaxDocumentSizeExceededRes(parsedOutput, context);\n        case \"UnsupportedPlatformType\":\n        case \"com.amazonaws.ssm#UnsupportedPlatformType\":\n            throw await de_UnsupportedPlatformTypeRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_StartAssociationsOnceCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_StartAssociationsOnceCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_StartAssociationsOnceCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationDoesNotExist\":\n        case \"com.amazonaws.ssm#AssociationDoesNotExist\":\n            throw await de_AssociationDoesNotExistRes(parsedOutput, context);\n        case \"InvalidAssociation\":\n        case \"com.amazonaws.ssm#InvalidAssociation\":\n            throw await de_InvalidAssociationRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_StartAutomationExecutionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_StartAutomationExecutionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_StartAutomationExecutionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AutomationDefinitionNotFoundException\":\n        case \"com.amazonaws.ssm#AutomationDefinitionNotFoundException\":\n            throw await de_AutomationDefinitionNotFoundExceptionRes(parsedOutput, context);\n        case \"AutomationDefinitionVersionNotFoundException\":\n        case \"com.amazonaws.ssm#AutomationDefinitionVersionNotFoundException\":\n            throw await de_AutomationDefinitionVersionNotFoundExceptionRes(parsedOutput, context);\n        case \"AutomationExecutionLimitExceededException\":\n        case \"com.amazonaws.ssm#AutomationExecutionLimitExceededException\":\n            throw await de_AutomationExecutionLimitExceededExceptionRes(parsedOutput, context);\n        case \"IdempotentParameterMismatch\":\n        case \"com.amazonaws.ssm#IdempotentParameterMismatch\":\n            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidAutomationExecutionParametersException\":\n        case \"com.amazonaws.ssm#InvalidAutomationExecutionParametersException\":\n            throw await de_InvalidAutomationExecutionParametersExceptionRes(parsedOutput, context);\n        case \"InvalidTarget\":\n        case \"com.amazonaws.ssm#InvalidTarget\":\n            throw await de_InvalidTargetRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_StartChangeRequestExecutionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_StartChangeRequestExecutionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_StartChangeRequestExecutionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AutomationDefinitionNotApprovedException\":\n        case \"com.amazonaws.ssm#AutomationDefinitionNotApprovedException\":\n            throw await de_AutomationDefinitionNotApprovedExceptionRes(parsedOutput, context);\n        case \"AutomationDefinitionNotFoundException\":\n        case \"com.amazonaws.ssm#AutomationDefinitionNotFoundException\":\n            throw await de_AutomationDefinitionNotFoundExceptionRes(parsedOutput, context);\n        case \"AutomationDefinitionVersionNotFoundException\":\n        case \"com.amazonaws.ssm#AutomationDefinitionVersionNotFoundException\":\n            throw await de_AutomationDefinitionVersionNotFoundExceptionRes(parsedOutput, context);\n        case \"AutomationExecutionLimitExceededException\":\n        case \"com.amazonaws.ssm#AutomationExecutionLimitExceededException\":\n            throw await de_AutomationExecutionLimitExceededExceptionRes(parsedOutput, context);\n        case \"IdempotentParameterMismatch\":\n        case \"com.amazonaws.ssm#IdempotentParameterMismatch\":\n            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidAutomationExecutionParametersException\":\n        case \"com.amazonaws.ssm#InvalidAutomationExecutionParametersException\":\n            throw await de_InvalidAutomationExecutionParametersExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_StartSessionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_StartSessionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_StartSessionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"TargetNotConnected\":\n        case \"com.amazonaws.ssm#TargetNotConnected\":\n            throw await de_TargetNotConnectedRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_StopAutomationExecutionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_StopAutomationExecutionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_StopAutomationExecutionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AutomationExecutionNotFoundException\":\n        case \"com.amazonaws.ssm#AutomationExecutionNotFoundException\":\n            throw await de_AutomationExecutionNotFoundExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidAutomationStatusUpdateException\":\n        case \"com.amazonaws.ssm#InvalidAutomationStatusUpdateException\":\n            throw await de_InvalidAutomationStatusUpdateExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_TerminateSessionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_TerminateSessionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_TerminateSessionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UnlabelParameterVersionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UnlabelParameterVersionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UnlabelParameterVersionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ParameterNotFound\":\n        case \"com.amazonaws.ssm#ParameterNotFound\":\n            throw await de_ParameterNotFoundRes(parsedOutput, context);\n        case \"ParameterVersionNotFound\":\n        case \"com.amazonaws.ssm#ParameterVersionNotFound\":\n            throw await de_ParameterVersionNotFoundRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateAssociationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateAssociationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_UpdateAssociationResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateAssociationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationDoesNotExist\":\n        case \"com.amazonaws.ssm#AssociationDoesNotExist\":\n            throw await de_AssociationDoesNotExistRes(parsedOutput, context);\n        case \"AssociationVersionLimitExceeded\":\n        case \"com.amazonaws.ssm#AssociationVersionLimitExceeded\":\n            throw await de_AssociationVersionLimitExceededRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidAssociationVersion\":\n        case \"com.amazonaws.ssm#InvalidAssociationVersion\":\n            throw await de_InvalidAssociationVersionRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        case \"InvalidOutputLocation\":\n        case \"com.amazonaws.ssm#InvalidOutputLocation\":\n            throw await de_InvalidOutputLocationRes(parsedOutput, context);\n        case \"InvalidParameters\":\n        case \"com.amazonaws.ssm#InvalidParameters\":\n            throw await de_InvalidParametersRes(parsedOutput, context);\n        case \"InvalidSchedule\":\n        case \"com.amazonaws.ssm#InvalidSchedule\":\n            throw await de_InvalidScheduleRes(parsedOutput, context);\n        case \"InvalidTarget\":\n        case \"com.amazonaws.ssm#InvalidTarget\":\n            throw await de_InvalidTargetRes(parsedOutput, context);\n        case \"InvalidTargetMaps\":\n        case \"com.amazonaws.ssm#InvalidTargetMaps\":\n            throw await de_InvalidTargetMapsRes(parsedOutput, context);\n        case \"InvalidUpdate\":\n        case \"com.amazonaws.ssm#InvalidUpdate\":\n            throw await de_InvalidUpdateRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateAssociationStatusCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateAssociationStatusCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_UpdateAssociationStatusResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateAssociationStatusCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationDoesNotExist\":\n        case \"com.amazonaws.ssm#AssociationDoesNotExist\":\n            throw await de_AssociationDoesNotExistRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"StatusUnchanged\":\n        case \"com.amazonaws.ssm#StatusUnchanged\":\n            throw await de_StatusUnchangedRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateDocumentCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateDocumentCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_UpdateDocumentResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateDocumentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DocumentVersionLimitExceeded\":\n        case \"com.amazonaws.ssm#DocumentVersionLimitExceeded\":\n            throw await de_DocumentVersionLimitExceededRes(parsedOutput, context);\n        case \"DuplicateDocumentContent\":\n        case \"com.amazonaws.ssm#DuplicateDocumentContent\":\n            throw await de_DuplicateDocumentContentRes(parsedOutput, context);\n        case \"DuplicateDocumentVersionName\":\n        case \"com.amazonaws.ssm#DuplicateDocumentVersionName\":\n            throw await de_DuplicateDocumentVersionNameRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentContent\":\n        case \"com.amazonaws.ssm#InvalidDocumentContent\":\n            throw await de_InvalidDocumentContentRes(parsedOutput, context);\n        case \"InvalidDocumentOperation\":\n        case \"com.amazonaws.ssm#InvalidDocumentOperation\":\n            throw await de_InvalidDocumentOperationRes(parsedOutput, context);\n        case \"InvalidDocumentSchemaVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentSchemaVersion\":\n            throw await de_InvalidDocumentSchemaVersionRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        case \"MaxDocumentSizeExceeded\":\n        case \"com.amazonaws.ssm#MaxDocumentSizeExceeded\":\n            throw await de_MaxDocumentSizeExceededRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateDocumentDefaultVersionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateDocumentDefaultVersionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateDocumentDefaultVersionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentSchemaVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentSchemaVersion\":\n            throw await de_InvalidDocumentSchemaVersionRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateDocumentMetadataCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateDocumentMetadataCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateDocumentMetadataCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentOperation\":\n        case \"com.amazonaws.ssm#InvalidDocumentOperation\":\n            throw await de_InvalidDocumentOperationRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateMaintenanceWindowCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateMaintenanceWindowCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateMaintenanceWindowCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateMaintenanceWindowTargetCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateMaintenanceWindowTargetCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateMaintenanceWindowTargetCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateMaintenanceWindowTaskCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateMaintenanceWindowTaskCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_UpdateMaintenanceWindowTaskResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateMaintenanceWindowTaskCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateManagedInstanceRoleCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateManagedInstanceRoleCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateManagedInstanceRoleCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateOpsItemCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateOpsItemCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateOpsItemCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsItemAccessDeniedException\":\n        case \"com.amazonaws.ssm#OpsItemAccessDeniedException\":\n            throw await de_OpsItemAccessDeniedExceptionRes(parsedOutput, context);\n        case \"OpsItemAlreadyExistsException\":\n        case \"com.amazonaws.ssm#OpsItemAlreadyExistsException\":\n            throw await de_OpsItemAlreadyExistsExceptionRes(parsedOutput, context);\n        case \"OpsItemInvalidParameterException\":\n        case \"com.amazonaws.ssm#OpsItemInvalidParameterException\":\n            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);\n        case \"OpsItemLimitExceededException\":\n        case \"com.amazonaws.ssm#OpsItemLimitExceededException\":\n            throw await de_OpsItemLimitExceededExceptionRes(parsedOutput, context);\n        case \"OpsItemNotFoundException\":\n        case \"com.amazonaws.ssm#OpsItemNotFoundException\":\n            throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateOpsMetadataCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateOpsMetadataCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateOpsMetadataCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsMetadataInvalidArgumentException\":\n        case \"com.amazonaws.ssm#OpsMetadataInvalidArgumentException\":\n            throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);\n        case \"OpsMetadataKeyLimitExceededException\":\n        case \"com.amazonaws.ssm#OpsMetadataKeyLimitExceededException\":\n            throw await de_OpsMetadataKeyLimitExceededExceptionRes(parsedOutput, context);\n        case \"OpsMetadataNotFoundException\":\n        case \"com.amazonaws.ssm#OpsMetadataNotFoundException\":\n            throw await de_OpsMetadataNotFoundExceptionRes(parsedOutput, context);\n        case \"OpsMetadataTooManyUpdatesException\":\n        case \"com.amazonaws.ssm#OpsMetadataTooManyUpdatesException\":\n            throw await de_OpsMetadataTooManyUpdatesExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdatePatchBaselineCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdatePatchBaselineCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_UpdatePatchBaselineResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdatePatchBaselineCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateResourceDataSyncCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateResourceDataSyncCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateResourceDataSyncCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourceDataSyncConflictException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncConflictException\":\n            throw await de_ResourceDataSyncConflictExceptionRes(parsedOutput, context);\n        case \"ResourceDataSyncInvalidConfigurationException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException\":\n            throw await de_ResourceDataSyncInvalidConfigurationExceptionRes(parsedOutput, context);\n        case \"ResourceDataSyncNotFoundException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncNotFoundException\":\n            throw await de_ResourceDataSyncNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateServiceSettingCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateServiceSettingCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateServiceSettingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ServiceSettingNotFound\":\n        case \"com.amazonaws.ssm#ServiceSettingNotFound\":\n            throw await de_ServiceSettingNotFoundRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nconst de_AlreadyExistsExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AlreadyExistsException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AssociatedInstancesRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AssociatedInstances({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AssociationAlreadyExistsRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AssociationAlreadyExists({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AssociationDoesNotExistRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AssociationDoesNotExist({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AssociationExecutionDoesNotExistRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AssociationExecutionDoesNotExist({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AssociationLimitExceededRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AssociationLimitExceeded({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AssociationVersionLimitExceededRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AssociationVersionLimitExceeded({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AutomationDefinitionNotApprovedExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AutomationDefinitionNotApprovedException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AutomationDefinitionNotFoundExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AutomationDefinitionNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AutomationDefinitionVersionNotFoundExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AutomationDefinitionVersionNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AutomationExecutionLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AutomationExecutionLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AutomationExecutionNotFoundExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AutomationExecutionNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AutomationStepNotFoundExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AutomationStepNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ComplianceTypeCountLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ComplianceTypeCountLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_CustomSchemaCountLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new CustomSchemaCountLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_DocumentAlreadyExistsRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new DocumentAlreadyExists({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_DocumentLimitExceededRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new DocumentLimitExceeded({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_DocumentPermissionLimitRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new DocumentPermissionLimit({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_DocumentVersionLimitExceededRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new DocumentVersionLimitExceeded({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_DoesNotExistExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new DoesNotExistException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_DuplicateDocumentContentRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new DuplicateDocumentContent({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_DuplicateDocumentVersionNameRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new DuplicateDocumentVersionName({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_DuplicateInstanceIdRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new DuplicateInstanceId({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_FeatureNotAvailableExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new FeatureNotAvailableException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_HierarchyLevelLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new HierarchyLevelLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_HierarchyTypeMismatchExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new HierarchyTypeMismatchException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_IdempotentParameterMismatchRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new IdempotentParameterMismatch({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_IncompatiblePolicyExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new IncompatiblePolicyException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InternalServerErrorRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InternalServerError({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidActivationRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidActivation({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidActivationIdRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidActivationId({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidAggregatorExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidAggregatorException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidAllowedPatternExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidAllowedPatternException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidAssociationRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidAssociation({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidAssociationVersionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidAssociationVersion({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidAutomationExecutionParametersExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidAutomationExecutionParametersException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidAutomationSignalExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidAutomationSignalException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidAutomationStatusUpdateExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidAutomationStatusUpdateException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidCommandIdRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidCommandId({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidDeleteInventoryParametersExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidDeleteInventoryParametersException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidDeletionIdExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidDeletionIdException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidDocumentRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidDocument({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidDocumentContentRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidDocumentContent({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidDocumentOperationRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidDocumentOperation({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidDocumentSchemaVersionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidDocumentSchemaVersion({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidDocumentTypeRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidDocumentType({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidDocumentVersionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidDocumentVersion({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidFilterRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidFilter({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidFilterKeyRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidFilterKey({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidFilterOptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidFilterOption({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidFilterValueRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidFilterValue({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidInstanceIdRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidInstanceId({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidInstanceInformationFilterValueRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidInstanceInformationFilterValue({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidInventoryGroupExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidInventoryGroupException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidInventoryItemContextExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidInventoryItemContextException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidInventoryRequestExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidInventoryRequestException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidItemContentExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidItemContentException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidKeyIdRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidKeyId({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidNextTokenRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidNextToken({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidNotificationConfigRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidNotificationConfig({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidOptionExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidOptionException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidOutputFolderRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidOutputFolder({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidOutputLocationRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidOutputLocation({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidParametersRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidParameters({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidPermissionTypeRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidPermissionType({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidPluginNameRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidPluginName({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidPolicyAttributeExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidPolicyAttributeException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidPolicyTypeExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidPolicyTypeException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidResourceIdRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidResourceId({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidResourceTypeRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidResourceType({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidResultAttributeExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidResultAttributeException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidRoleRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidRole({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidScheduleRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidSchedule({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidTagRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidTag({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidTargetRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidTarget({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidTargetMapsRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidTargetMaps({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidTypeNameExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidTypeNameException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidUpdateRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidUpdate({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvocationDoesNotExistRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvocationDoesNotExist({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ItemContentMismatchExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ItemContentMismatchException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ItemSizeLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ItemSizeLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_MaxDocumentSizeExceededRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new MaxDocumentSizeExceeded({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsItemAccessDeniedExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsItemAccessDeniedException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsItemAlreadyExistsExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsItemAlreadyExistsException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsItemInvalidParameterExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsItemInvalidParameterException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsItemLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsItemLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsItemNotFoundExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsItemNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsItemRelatedItemAlreadyExistsExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsItemRelatedItemAlreadyExistsException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsItemRelatedItemAssociationNotFoundExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsItemRelatedItemAssociationNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsMetadataAlreadyExistsExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsMetadataAlreadyExistsException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsMetadataInvalidArgumentExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsMetadataInvalidArgumentException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsMetadataKeyLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsMetadataKeyLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsMetadataLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsMetadataLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsMetadataNotFoundExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsMetadataNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsMetadataTooManyUpdatesExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsMetadataTooManyUpdatesException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ParameterAlreadyExistsRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ParameterAlreadyExists({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ParameterLimitExceededRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ParameterLimitExceeded({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ParameterMaxVersionLimitExceededRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ParameterMaxVersionLimitExceeded({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ParameterNotFoundRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ParameterNotFound({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ParameterPatternMismatchExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ParameterPatternMismatchException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ParameterVersionLabelLimitExceededRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ParameterVersionLabelLimitExceeded({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ParameterVersionNotFoundRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ParameterVersionNotFound({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_PoliciesLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new PoliciesLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourceDataSyncAlreadyExistsExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourceDataSyncAlreadyExistsException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourceDataSyncConflictExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourceDataSyncConflictException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourceDataSyncCountExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourceDataSyncCountExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourceDataSyncInvalidConfigurationExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourceDataSyncInvalidConfigurationException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourceDataSyncNotFoundExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourceDataSyncNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourceInUseExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourceInUseException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourceLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourceLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourcePolicyConflictExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourcePolicyConflictException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourcePolicyInvalidParameterExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourcePolicyInvalidParameterException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourcePolicyLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourcePolicyLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ServiceSettingNotFoundRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ServiceSettingNotFound({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_StatusUnchangedRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new StatusUnchanged({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_SubTypeCountLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new SubTypeCountLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_TargetInUseExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new TargetInUseException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_TargetNotConnectedRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new TargetNotConnected({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_TooManyTagsErrorRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new TooManyTagsError({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_TooManyUpdatesRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new TooManyUpdates({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_TotalSizeLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new TotalSizeLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_UnsupportedCalendarExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new UnsupportedCalendarException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_UnsupportedFeatureRequiredExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new UnsupportedFeatureRequiredException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_UnsupportedInventoryItemContextExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new UnsupportedInventoryItemContextException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_UnsupportedInventorySchemaVersionExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new UnsupportedInventorySchemaVersionException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_UnsupportedOperatingSystemRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new UnsupportedOperatingSystem({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_UnsupportedParameterTypeRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new UnsupportedParameterType({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_UnsupportedPlatformTypeRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new UnsupportedPlatformType({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst se_AssociationStatus = (input, context) => {\n    return take(input, {\n        AdditionalInfo: [],\n        Date: (_) => Math.round(_.getTime() / 1000),\n        Message: [],\n        Name: [],\n    });\n};\nconst se_ComplianceExecutionSummary = (input, context) => {\n    return take(input, {\n        ExecutionId: [],\n        ExecutionTime: (_) => Math.round(_.getTime() / 1000),\n        ExecutionType: [],\n    });\n};\nconst se_CreateActivationRequest = (input, context) => {\n    return take(input, {\n        DefaultInstanceName: [],\n        Description: [],\n        ExpirationDate: (_) => Math.round(_.getTime() / 1000),\n        IamRole: [],\n        RegistrationLimit: [],\n        RegistrationMetadata: _json,\n        Tags: _json,\n    });\n};\nconst se_CreateMaintenanceWindowRequest = (input, context) => {\n    return take(input, {\n        AllowUnassociatedTargets: [],\n        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],\n        Cutoff: [],\n        Description: [],\n        Duration: [],\n        EndDate: [],\n        Name: [],\n        Schedule: [],\n        ScheduleOffset: [],\n        ScheduleTimezone: [],\n        StartDate: [],\n        Tags: _json,\n    });\n};\nconst se_CreateOpsItemRequest = (input, context) => {\n    return take(input, {\n        AccountId: [],\n        ActualEndTime: (_) => Math.round(_.getTime() / 1000),\n        ActualStartTime: (_) => Math.round(_.getTime() / 1000),\n        Category: [],\n        Description: [],\n        Notifications: _json,\n        OperationalData: _json,\n        OpsItemType: [],\n        PlannedEndTime: (_) => Math.round(_.getTime() / 1000),\n        PlannedStartTime: (_) => Math.round(_.getTime() / 1000),\n        Priority: [],\n        RelatedOpsItems: _json,\n        Severity: [],\n        Source: [],\n        Tags: _json,\n        Title: [],\n    });\n};\nconst se_CreatePatchBaselineRequest = (input, context) => {\n    return take(input, {\n        ApprovalRules: _json,\n        ApprovedPatches: _json,\n        ApprovedPatchesComplianceLevel: [],\n        ApprovedPatchesEnableNonSecurity: [],\n        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],\n        Description: [],\n        GlobalFilters: _json,\n        Name: [],\n        OperatingSystem: [],\n        RejectedPatches: _json,\n        RejectedPatchesAction: [],\n        Sources: _json,\n        Tags: _json,\n    });\n};\nconst se_DeleteInventoryRequest = (input, context) => {\n    return take(input, {\n        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],\n        DryRun: [],\n        SchemaDeleteOption: [],\n        TypeName: [],\n    });\n};\nconst se_GetInventoryRequest = (input, context) => {\n    return take(input, {\n        Aggregators: (_) => se_InventoryAggregatorList(_, context),\n        Filters: _json,\n        MaxResults: [],\n        NextToken: [],\n        ResultAttributes: _json,\n    });\n};\nconst se_GetOpsSummaryRequest = (input, context) => {\n    return take(input, {\n        Aggregators: (_) => se_OpsAggregatorList(_, context),\n        Filters: _json,\n        MaxResults: [],\n        NextToken: [],\n        ResultAttributes: _json,\n        SyncName: [],\n    });\n};\nconst se_InventoryAggregator = (input, context) => {\n    return take(input, {\n        Aggregators: (_) => se_InventoryAggregatorList(_, context),\n        Expression: [],\n        Groups: _json,\n    });\n};\nconst se_InventoryAggregatorList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        return se_InventoryAggregator(entry, context);\n    });\n};\nconst se_MaintenanceWindowLambdaParameters = (input, context) => {\n    return take(input, {\n        ClientContext: [],\n        Payload: context.base64Encoder,\n        Qualifier: [],\n    });\n};\nconst se_MaintenanceWindowTaskInvocationParameters = (input, context) => {\n    return take(input, {\n        Automation: _json,\n        Lambda: (_) => se_MaintenanceWindowLambdaParameters(_, context),\n        RunCommand: _json,\n        StepFunctions: _json,\n    });\n};\nconst se_OpsAggregator = (input, context) => {\n    return take(input, {\n        AggregatorType: [],\n        Aggregators: (_) => se_OpsAggregatorList(_, context),\n        AttributeName: [],\n        Filters: _json,\n        TypeName: [],\n        Values: _json,\n    });\n};\nconst se_OpsAggregatorList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        return se_OpsAggregator(entry, context);\n    });\n};\nconst se_PutComplianceItemsRequest = (input, context) => {\n    return take(input, {\n        ComplianceType: [],\n        ExecutionSummary: (_) => se_ComplianceExecutionSummary(_, context),\n        ItemContentHash: [],\n        Items: _json,\n        ResourceId: [],\n        ResourceType: [],\n        UploadType: [],\n    });\n};\nconst se_RegisterTargetWithMaintenanceWindowRequest = (input, context) => {\n    return take(input, {\n        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],\n        Description: [],\n        Name: [],\n        OwnerInformation: [],\n        ResourceType: [],\n        Targets: _json,\n        WindowId: [],\n    });\n};\nconst se_RegisterTaskWithMaintenanceWindowRequest = (input, context) => {\n    return take(input, {\n        AlarmConfiguration: _json,\n        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],\n        CutoffBehavior: [],\n        Description: [],\n        LoggingInfo: _json,\n        MaxConcurrency: [],\n        MaxErrors: [],\n        Name: [],\n        Priority: [],\n        ServiceRoleArn: [],\n        Targets: _json,\n        TaskArn: [],\n        TaskInvocationParameters: (_) => se_MaintenanceWindowTaskInvocationParameters(_, context),\n        TaskParameters: _json,\n        TaskType: [],\n        WindowId: [],\n    });\n};\nconst se_StartChangeRequestExecutionRequest = (input, context) => {\n    return take(input, {\n        AutoApprove: [],\n        ChangeDetails: [],\n        ChangeRequestName: [],\n        ClientToken: [],\n        DocumentName: [],\n        DocumentVersion: [],\n        Parameters: _json,\n        Runbooks: _json,\n        ScheduledEndTime: (_) => Math.round(_.getTime() / 1000),\n        ScheduledTime: (_) => Math.round(_.getTime() / 1000),\n        Tags: _json,\n    });\n};\nconst se_UpdateAssociationStatusRequest = (input, context) => {\n    return take(input, {\n        AssociationStatus: (_) => se_AssociationStatus(_, context),\n        InstanceId: [],\n        Name: [],\n    });\n};\nconst se_UpdateMaintenanceWindowTaskRequest = (input, context) => {\n    return take(input, {\n        AlarmConfiguration: _json,\n        CutoffBehavior: [],\n        Description: [],\n        LoggingInfo: _json,\n        MaxConcurrency: [],\n        MaxErrors: [],\n        Name: [],\n        Priority: [],\n        Replace: [],\n        ServiceRoleArn: [],\n        Targets: _json,\n        TaskArn: [],\n        TaskInvocationParameters: (_) => se_MaintenanceWindowTaskInvocationParameters(_, context),\n        TaskParameters: _json,\n        WindowId: [],\n        WindowTaskId: [],\n    });\n};\nconst se_UpdateOpsItemRequest = (input, context) => {\n    return take(input, {\n        ActualEndTime: (_) => Math.round(_.getTime() / 1000),\n        ActualStartTime: (_) => Math.round(_.getTime() / 1000),\n        Category: [],\n        Description: [],\n        Notifications: _json,\n        OperationalData: _json,\n        OperationalDataToDelete: _json,\n        OpsItemArn: [],\n        OpsItemId: [],\n        PlannedEndTime: (_) => Math.round(_.getTime() / 1000),\n        PlannedStartTime: (_) => Math.round(_.getTime() / 1000),\n        Priority: [],\n        RelatedOpsItems: _json,\n        Severity: [],\n        Status: [],\n        Title: [],\n    });\n};\nconst de_Activation = (output, context) => {\n    return take(output, {\n        ActivationId: __expectString,\n        CreatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        DefaultInstanceName: __expectString,\n        Description: __expectString,\n        ExpirationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Expired: __expectBoolean,\n        IamRole: __expectString,\n        RegistrationLimit: __expectInt32,\n        RegistrationsCount: __expectInt32,\n        Tags: _json,\n    });\n};\nconst de_ActivationList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Activation(entry, context);\n    });\n    return retVal;\n};\nconst de_Association = (output, context) => {\n    return take(output, {\n        AssociationId: __expectString,\n        AssociationName: __expectString,\n        AssociationVersion: __expectString,\n        DocumentVersion: __expectString,\n        InstanceId: __expectString,\n        LastExecutionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Name: __expectString,\n        Overview: _json,\n        ScheduleExpression: __expectString,\n        ScheduleOffset: __expectInt32,\n        TargetMaps: _json,\n        Targets: _json,\n    });\n};\nconst de_AssociationDescription = (output, context) => {\n    return take(output, {\n        AlarmConfiguration: _json,\n        ApplyOnlyAtCronInterval: __expectBoolean,\n        AssociationId: __expectString,\n        AssociationName: __expectString,\n        AssociationVersion: __expectString,\n        AutomationTargetParameterName: __expectString,\n        CalendarNames: _json,\n        ComplianceSeverity: __expectString,\n        Date: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        DocumentVersion: __expectString,\n        InstanceId: __expectString,\n        LastExecutionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastSuccessfulExecutionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastUpdateAssociationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        MaxConcurrency: __expectString,\n        MaxErrors: __expectString,\n        Name: __expectString,\n        OutputLocation: _json,\n        Overview: _json,\n        Parameters: _json,\n        ScheduleExpression: __expectString,\n        ScheduleOffset: __expectInt32,\n        Status: (_) => de_AssociationStatus(_, context),\n        SyncCompliance: __expectString,\n        TargetLocations: _json,\n        TargetMaps: _json,\n        Targets: _json,\n        TriggeredAlarms: _json,\n    });\n};\nconst de_AssociationDescriptionList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_AssociationDescription(entry, context);\n    });\n    return retVal;\n};\nconst de_AssociationExecution = (output, context) => {\n    return take(output, {\n        AlarmConfiguration: _json,\n        AssociationId: __expectString,\n        AssociationVersion: __expectString,\n        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        DetailedStatus: __expectString,\n        ExecutionId: __expectString,\n        LastExecutionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ResourceCountByStatus: __expectString,\n        Status: __expectString,\n        TriggeredAlarms: _json,\n    });\n};\nconst de_AssociationExecutionsList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_AssociationExecution(entry, context);\n    });\n    return retVal;\n};\nconst de_AssociationExecutionTarget = (output, context) => {\n    return take(output, {\n        AssociationId: __expectString,\n        AssociationVersion: __expectString,\n        DetailedStatus: __expectString,\n        ExecutionId: __expectString,\n        LastExecutionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        OutputSource: _json,\n        ResourceId: __expectString,\n        ResourceType: __expectString,\n        Status: __expectString,\n    });\n};\nconst de_AssociationExecutionTargetsList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_AssociationExecutionTarget(entry, context);\n    });\n    return retVal;\n};\nconst de_AssociationList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Association(entry, context);\n    });\n    return retVal;\n};\nconst de_AssociationStatus = (output, context) => {\n    return take(output, {\n        AdditionalInfo: __expectString,\n        Date: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Message: __expectString,\n        Name: __expectString,\n    });\n};\nconst de_AssociationVersionInfo = (output, context) => {\n    return take(output, {\n        ApplyOnlyAtCronInterval: __expectBoolean,\n        AssociationId: __expectString,\n        AssociationName: __expectString,\n        AssociationVersion: __expectString,\n        CalendarNames: _json,\n        ComplianceSeverity: __expectString,\n        CreatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        DocumentVersion: __expectString,\n        MaxConcurrency: __expectString,\n        MaxErrors: __expectString,\n        Name: __expectString,\n        OutputLocation: _json,\n        Parameters: _json,\n        ScheduleExpression: __expectString,\n        ScheduleOffset: __expectInt32,\n        SyncCompliance: __expectString,\n        TargetLocations: _json,\n        TargetMaps: _json,\n        Targets: _json,\n    });\n};\nconst de_AssociationVersionList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_AssociationVersionInfo(entry, context);\n    });\n    return retVal;\n};\nconst de_AutomationExecution = (output, context) => {\n    return take(output, {\n        AlarmConfiguration: _json,\n        AssociationId: __expectString,\n        AutomationExecutionId: __expectString,\n        AutomationExecutionStatus: __expectString,\n        AutomationSubtype: __expectString,\n        ChangeRequestName: __expectString,\n        CurrentAction: __expectString,\n        CurrentStepName: __expectString,\n        DocumentName: __expectString,\n        DocumentVersion: __expectString,\n        ExecutedBy: __expectString,\n        ExecutionEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ExecutionStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        FailureMessage: __expectString,\n        MaxConcurrency: __expectString,\n        MaxErrors: __expectString,\n        Mode: __expectString,\n        OpsItemId: __expectString,\n        Outputs: _json,\n        Parameters: _json,\n        ParentAutomationExecutionId: __expectString,\n        ProgressCounters: _json,\n        ResolvedTargets: _json,\n        Runbooks: _json,\n        ScheduledTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        StepExecutions: (_) => de_StepExecutionList(_, context),\n        StepExecutionsTruncated: __expectBoolean,\n        Target: __expectString,\n        TargetLocations: _json,\n        TargetMaps: _json,\n        TargetParameterName: __expectString,\n        Targets: _json,\n        TriggeredAlarms: _json,\n    });\n};\nconst de_AutomationExecutionMetadata = (output, context) => {\n    return take(output, {\n        AlarmConfiguration: _json,\n        AssociationId: __expectString,\n        AutomationExecutionId: __expectString,\n        AutomationExecutionStatus: __expectString,\n        AutomationSubtype: __expectString,\n        AutomationType: __expectString,\n        ChangeRequestName: __expectString,\n        CurrentAction: __expectString,\n        CurrentStepName: __expectString,\n        DocumentName: __expectString,\n        DocumentVersion: __expectString,\n        ExecutedBy: __expectString,\n        ExecutionEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ExecutionStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        FailureMessage: __expectString,\n        LogFile: __expectString,\n        MaxConcurrency: __expectString,\n        MaxErrors: __expectString,\n        Mode: __expectString,\n        OpsItemId: __expectString,\n        Outputs: _json,\n        ParentAutomationExecutionId: __expectString,\n        ResolvedTargets: _json,\n        Runbooks: _json,\n        ScheduledTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Target: __expectString,\n        TargetMaps: _json,\n        TargetParameterName: __expectString,\n        Targets: _json,\n        TriggeredAlarms: _json,\n    });\n};\nconst de_AutomationExecutionMetadataList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_AutomationExecutionMetadata(entry, context);\n    });\n    return retVal;\n};\nconst de_Command = (output, context) => {\n    return take(output, {\n        AlarmConfiguration: _json,\n        CloudWatchOutputConfig: _json,\n        CommandId: __expectString,\n        Comment: __expectString,\n        CompletedCount: __expectInt32,\n        DeliveryTimedOutCount: __expectInt32,\n        DocumentName: __expectString,\n        DocumentVersion: __expectString,\n        ErrorCount: __expectInt32,\n        ExpiresAfter: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        InstanceIds: _json,\n        MaxConcurrency: __expectString,\n        MaxErrors: __expectString,\n        NotificationConfig: _json,\n        OutputS3BucketName: __expectString,\n        OutputS3KeyPrefix: __expectString,\n        OutputS3Region: __expectString,\n        Parameters: _json,\n        RequestedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ServiceRole: __expectString,\n        Status: __expectString,\n        StatusDetails: __expectString,\n        TargetCount: __expectInt32,\n        Targets: _json,\n        TimeoutSeconds: __expectInt32,\n        TriggeredAlarms: _json,\n    });\n};\nconst de_CommandInvocation = (output, context) => {\n    return take(output, {\n        CloudWatchOutputConfig: _json,\n        CommandId: __expectString,\n        CommandPlugins: (_) => de_CommandPluginList(_, context),\n        Comment: __expectString,\n        DocumentName: __expectString,\n        DocumentVersion: __expectString,\n        InstanceId: __expectString,\n        InstanceName: __expectString,\n        NotificationConfig: _json,\n        RequestedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ServiceRole: __expectString,\n        StandardErrorUrl: __expectString,\n        StandardOutputUrl: __expectString,\n        Status: __expectString,\n        StatusDetails: __expectString,\n        TraceOutput: __expectString,\n    });\n};\nconst de_CommandInvocationList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_CommandInvocation(entry, context);\n    });\n    return retVal;\n};\nconst de_CommandList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Command(entry, context);\n    });\n    return retVal;\n};\nconst de_CommandPlugin = (output, context) => {\n    return take(output, {\n        Name: __expectString,\n        Output: __expectString,\n        OutputS3BucketName: __expectString,\n        OutputS3KeyPrefix: __expectString,\n        OutputS3Region: __expectString,\n        ResponseCode: __expectInt32,\n        ResponseFinishDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ResponseStartDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        StandardErrorUrl: __expectString,\n        StandardOutputUrl: __expectString,\n        Status: __expectString,\n        StatusDetails: __expectString,\n    });\n};\nconst de_CommandPluginList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_CommandPlugin(entry, context);\n    });\n    return retVal;\n};\nconst de_ComplianceExecutionSummary = (output, context) => {\n    return take(output, {\n        ExecutionId: __expectString,\n        ExecutionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ExecutionType: __expectString,\n    });\n};\nconst de_ComplianceItem = (output, context) => {\n    return take(output, {\n        ComplianceType: __expectString,\n        Details: _json,\n        ExecutionSummary: (_) => de_ComplianceExecutionSummary(_, context),\n        Id: __expectString,\n        ResourceId: __expectString,\n        ResourceType: __expectString,\n        Severity: __expectString,\n        Status: __expectString,\n        Title: __expectString,\n    });\n};\nconst de_ComplianceItemList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_ComplianceItem(entry, context);\n    });\n    return retVal;\n};\nconst de_CreateAssociationBatchResult = (output, context) => {\n    return take(output, {\n        Failed: _json,\n        Successful: (_) => de_AssociationDescriptionList(_, context),\n    });\n};\nconst de_CreateAssociationResult = (output, context) => {\n    return take(output, {\n        AssociationDescription: (_) => de_AssociationDescription(_, context),\n    });\n};\nconst de_CreateDocumentResult = (output, context) => {\n    return take(output, {\n        DocumentDescription: (_) => de_DocumentDescription(_, context),\n    });\n};\nconst de_DescribeActivationsResult = (output, context) => {\n    return take(output, {\n        ActivationList: (_) => de_ActivationList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeAssociationExecutionsResult = (output, context) => {\n    return take(output, {\n        AssociationExecutions: (_) => de_AssociationExecutionsList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeAssociationExecutionTargetsResult = (output, context) => {\n    return take(output, {\n        AssociationExecutionTargets: (_) => de_AssociationExecutionTargetsList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeAssociationResult = (output, context) => {\n    return take(output, {\n        AssociationDescription: (_) => de_AssociationDescription(_, context),\n    });\n};\nconst de_DescribeAutomationExecutionsResult = (output, context) => {\n    return take(output, {\n        AutomationExecutionMetadataList: (_) => de_AutomationExecutionMetadataList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeAutomationStepExecutionsResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        StepExecutions: (_) => de_StepExecutionList(_, context),\n    });\n};\nconst de_DescribeAvailablePatchesResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        Patches: (_) => de_PatchList(_, context),\n    });\n};\nconst de_DescribeDocumentResult = (output, context) => {\n    return take(output, {\n        Document: (_) => de_DocumentDescription(_, context),\n    });\n};\nconst de_DescribeEffectivePatchesForPatchBaselineResult = (output, context) => {\n    return take(output, {\n        EffectivePatches: (_) => de_EffectivePatchList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeInstanceAssociationsStatusResult = (output, context) => {\n    return take(output, {\n        InstanceAssociationStatusInfos: (_) => de_InstanceAssociationStatusInfos(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeInstanceInformationResult = (output, context) => {\n    return take(output, {\n        InstanceInformationList: (_) => de_InstanceInformationList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeInstancePatchesResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        Patches: (_) => de_PatchComplianceDataList(_, context),\n    });\n};\nconst de_DescribeInstancePatchStatesForPatchGroupResult = (output, context) => {\n    return take(output, {\n        InstancePatchStates: (_) => de_InstancePatchStatesList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeInstancePatchStatesResult = (output, context) => {\n    return take(output, {\n        InstancePatchStates: (_) => de_InstancePatchStateList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeInventoryDeletionsResult = (output, context) => {\n    return take(output, {\n        InventoryDeletions: (_) => de_InventoryDeletionsList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeMaintenanceWindowExecutionsResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        WindowExecutions: (_) => de_MaintenanceWindowExecutionList(_, context),\n    });\n};\nconst de_DescribeMaintenanceWindowExecutionTaskInvocationsResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        WindowExecutionTaskInvocationIdentities: (_) => de_MaintenanceWindowExecutionTaskInvocationIdentityList(_, context),\n    });\n};\nconst de_DescribeMaintenanceWindowExecutionTasksResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        WindowExecutionTaskIdentities: (_) => de_MaintenanceWindowExecutionTaskIdentityList(_, context),\n    });\n};\nconst de_DescribeOpsItemsResponse = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        OpsItemSummaries: (_) => de_OpsItemSummaries(_, context),\n    });\n};\nconst de_DescribeParametersResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        Parameters: (_) => de_ParameterMetadataList(_, context),\n    });\n};\nconst de_DescribeSessionsResponse = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        Sessions: (_) => de_SessionList(_, context),\n    });\n};\nconst de_DocumentDescription = (output, context) => {\n    return take(output, {\n        ApprovedVersion: __expectString,\n        AttachmentsInformation: _json,\n        Author: __expectString,\n        Category: _json,\n        CategoryEnum: _json,\n        CreatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        DefaultVersion: __expectString,\n        Description: __expectString,\n        DisplayName: __expectString,\n        DocumentFormat: __expectString,\n        DocumentType: __expectString,\n        DocumentVersion: __expectString,\n        Hash: __expectString,\n        HashType: __expectString,\n        LatestVersion: __expectString,\n        Name: __expectString,\n        Owner: __expectString,\n        Parameters: _json,\n        PendingReviewVersion: __expectString,\n        PlatformTypes: _json,\n        Requires: _json,\n        ReviewInformation: (_) => de_ReviewInformationList(_, context),\n        ReviewStatus: __expectString,\n        SchemaVersion: __expectString,\n        Sha1: __expectString,\n        Status: __expectString,\n        StatusInformation: __expectString,\n        Tags: _json,\n        TargetType: __expectString,\n        VersionName: __expectString,\n    });\n};\nconst de_DocumentIdentifier = (output, context) => {\n    return take(output, {\n        Author: __expectString,\n        CreatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        DisplayName: __expectString,\n        DocumentFormat: __expectString,\n        DocumentType: __expectString,\n        DocumentVersion: __expectString,\n        Name: __expectString,\n        Owner: __expectString,\n        PlatformTypes: _json,\n        Requires: _json,\n        ReviewStatus: __expectString,\n        SchemaVersion: __expectString,\n        Tags: _json,\n        TargetType: __expectString,\n        VersionName: __expectString,\n    });\n};\nconst de_DocumentIdentifierList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_DocumentIdentifier(entry, context);\n    });\n    return retVal;\n};\nconst de_DocumentMetadataResponseInfo = (output, context) => {\n    return take(output, {\n        ReviewerResponse: (_) => de_DocumentReviewerResponseList(_, context),\n    });\n};\nconst de_DocumentReviewerResponseList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_DocumentReviewerResponseSource(entry, context);\n    });\n    return retVal;\n};\nconst de_DocumentReviewerResponseSource = (output, context) => {\n    return take(output, {\n        Comment: _json,\n        CreateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ReviewStatus: __expectString,\n        Reviewer: __expectString,\n        UpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n    });\n};\nconst de_DocumentVersionInfo = (output, context) => {\n    return take(output, {\n        CreatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        DisplayName: __expectString,\n        DocumentFormat: __expectString,\n        DocumentVersion: __expectString,\n        IsDefaultVersion: __expectBoolean,\n        Name: __expectString,\n        ReviewStatus: __expectString,\n        Status: __expectString,\n        StatusInformation: __expectString,\n        VersionName: __expectString,\n    });\n};\nconst de_DocumentVersionList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_DocumentVersionInfo(entry, context);\n    });\n    return retVal;\n};\nconst de_EffectivePatch = (output, context) => {\n    return take(output, {\n        Patch: (_) => de_Patch(_, context),\n        PatchStatus: (_) => de_PatchStatus(_, context),\n    });\n};\nconst de_EffectivePatchList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_EffectivePatch(entry, context);\n    });\n    return retVal;\n};\nconst de_GetAutomationExecutionResult = (output, context) => {\n    return take(output, {\n        AutomationExecution: (_) => de_AutomationExecution(_, context),\n    });\n};\nconst de_GetDocumentResult = (output, context) => {\n    return take(output, {\n        AttachmentsContent: _json,\n        Content: __expectString,\n        CreatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        DisplayName: __expectString,\n        DocumentFormat: __expectString,\n        DocumentType: __expectString,\n        DocumentVersion: __expectString,\n        Name: __expectString,\n        Requires: _json,\n        ReviewStatus: __expectString,\n        Status: __expectString,\n        StatusInformation: __expectString,\n        VersionName: __expectString,\n    });\n};\nconst de_GetMaintenanceWindowExecutionResult = (output, context) => {\n    return take(output, {\n        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Status: __expectString,\n        StatusDetails: __expectString,\n        TaskIds: _json,\n        WindowExecutionId: __expectString,\n    });\n};\nconst de_GetMaintenanceWindowExecutionTaskInvocationResult = (output, context) => {\n    return take(output, {\n        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ExecutionId: __expectString,\n        InvocationId: __expectString,\n        OwnerInformation: __expectString,\n        Parameters: __expectString,\n        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Status: __expectString,\n        StatusDetails: __expectString,\n        TaskExecutionId: __expectString,\n        TaskType: __expectString,\n        WindowExecutionId: __expectString,\n        WindowTargetId: __expectString,\n    });\n};\nconst de_GetMaintenanceWindowExecutionTaskResult = (output, context) => {\n    return take(output, {\n        AlarmConfiguration: _json,\n        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        MaxConcurrency: __expectString,\n        MaxErrors: __expectString,\n        Priority: __expectInt32,\n        ServiceRole: __expectString,\n        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Status: __expectString,\n        StatusDetails: __expectString,\n        TaskArn: __expectString,\n        TaskExecutionId: __expectString,\n        TaskParameters: _json,\n        TriggeredAlarms: _json,\n        Type: __expectString,\n        WindowExecutionId: __expectString,\n    });\n};\nconst de_GetMaintenanceWindowResult = (output, context) => {\n    return take(output, {\n        AllowUnassociatedTargets: __expectBoolean,\n        CreatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Cutoff: __expectInt32,\n        Description: __expectString,\n        Duration: __expectInt32,\n        Enabled: __expectBoolean,\n        EndDate: __expectString,\n        ModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Name: __expectString,\n        NextExecutionTime: __expectString,\n        Schedule: __expectString,\n        ScheduleOffset: __expectInt32,\n        ScheduleTimezone: __expectString,\n        StartDate: __expectString,\n        WindowId: __expectString,\n    });\n};\nconst de_GetMaintenanceWindowTaskResult = (output, context) => {\n    return take(output, {\n        AlarmConfiguration: _json,\n        CutoffBehavior: __expectString,\n        Description: __expectString,\n        LoggingInfo: _json,\n        MaxConcurrency: __expectString,\n        MaxErrors: __expectString,\n        Name: __expectString,\n        Priority: __expectInt32,\n        ServiceRoleArn: __expectString,\n        Targets: _json,\n        TaskArn: __expectString,\n        TaskInvocationParameters: (_) => de_MaintenanceWindowTaskInvocationParameters(_, context),\n        TaskParameters: _json,\n        TaskType: __expectString,\n        WindowId: __expectString,\n        WindowTaskId: __expectString,\n    });\n};\nconst de_GetOpsItemResponse = (output, context) => {\n    return take(output, {\n        OpsItem: (_) => de_OpsItem(_, context),\n    });\n};\nconst de_GetParameterHistoryResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        Parameters: (_) => de_ParameterHistoryList(_, context),\n    });\n};\nconst de_GetParameterResult = (output, context) => {\n    return take(output, {\n        Parameter: (_) => de_Parameter(_, context),\n    });\n};\nconst de_GetParametersByPathResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        Parameters: (_) => de_ParameterList(_, context),\n    });\n};\nconst de_GetParametersResult = (output, context) => {\n    return take(output, {\n        InvalidParameters: _json,\n        Parameters: (_) => de_ParameterList(_, context),\n    });\n};\nconst de_GetPatchBaselineResult = (output, context) => {\n    return take(output, {\n        ApprovalRules: _json,\n        ApprovedPatches: _json,\n        ApprovedPatchesComplianceLevel: __expectString,\n        ApprovedPatchesEnableNonSecurity: __expectBoolean,\n        BaselineId: __expectString,\n        CreatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Description: __expectString,\n        GlobalFilters: _json,\n        ModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Name: __expectString,\n        OperatingSystem: __expectString,\n        PatchGroups: _json,\n        RejectedPatches: _json,\n        RejectedPatchesAction: __expectString,\n        Sources: _json,\n    });\n};\nconst de_GetServiceSettingResult = (output, context) => {\n    return take(output, {\n        ServiceSetting: (_) => de_ServiceSetting(_, context),\n    });\n};\nconst de_InstanceAssociationStatusInfo = (output, context) => {\n    return take(output, {\n        AssociationId: __expectString,\n        AssociationName: __expectString,\n        AssociationVersion: __expectString,\n        DetailedStatus: __expectString,\n        DocumentVersion: __expectString,\n        ErrorCode: __expectString,\n        ExecutionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ExecutionSummary: __expectString,\n        InstanceId: __expectString,\n        Name: __expectString,\n        OutputUrl: _json,\n        Status: __expectString,\n    });\n};\nconst de_InstanceAssociationStatusInfos = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_InstanceAssociationStatusInfo(entry, context);\n    });\n    return retVal;\n};\nconst de_InstanceInformation = (output, context) => {\n    return take(output, {\n        ActivationId: __expectString,\n        AgentVersion: __expectString,\n        AssociationOverview: _json,\n        AssociationStatus: __expectString,\n        ComputerName: __expectString,\n        IPAddress: __expectString,\n        IamRole: __expectString,\n        InstanceId: __expectString,\n        IsLatestVersion: __expectBoolean,\n        LastAssociationExecutionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastPingDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastSuccessfulAssociationExecutionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Name: __expectString,\n        PingStatus: __expectString,\n        PlatformName: __expectString,\n        PlatformType: __expectString,\n        PlatformVersion: __expectString,\n        RegistrationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ResourceType: __expectString,\n        SourceId: __expectString,\n        SourceType: __expectString,\n    });\n};\nconst de_InstanceInformationList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_InstanceInformation(entry, context);\n    });\n    return retVal;\n};\nconst de_InstancePatchState = (output, context) => {\n    return take(output, {\n        BaselineId: __expectString,\n        CriticalNonCompliantCount: __expectInt32,\n        FailedCount: __expectInt32,\n        InstallOverrideList: __expectString,\n        InstalledCount: __expectInt32,\n        InstalledOtherCount: __expectInt32,\n        InstalledPendingRebootCount: __expectInt32,\n        InstalledRejectedCount: __expectInt32,\n        InstanceId: __expectString,\n        LastNoRebootInstallOperationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        MissingCount: __expectInt32,\n        NotApplicableCount: __expectInt32,\n        Operation: __expectString,\n        OperationEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        OperationStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        OtherNonCompliantCount: __expectInt32,\n        OwnerInformation: __expectString,\n        PatchGroup: __expectString,\n        RebootOption: __expectString,\n        SecurityNonCompliantCount: __expectInt32,\n        SnapshotId: __expectString,\n        UnreportedNotApplicableCount: __expectInt32,\n    });\n};\nconst de_InstancePatchStateList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_InstancePatchState(entry, context);\n    });\n    return retVal;\n};\nconst de_InstancePatchStatesList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_InstancePatchState(entry, context);\n    });\n    return retVal;\n};\nconst de_InventoryDeletionsList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_InventoryDeletionStatusItem(entry, context);\n    });\n    return retVal;\n};\nconst de_InventoryDeletionStatusItem = (output, context) => {\n    return take(output, {\n        DeletionId: __expectString,\n        DeletionStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        DeletionSummary: _json,\n        LastStatus: __expectString,\n        LastStatusMessage: __expectString,\n        LastStatusUpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        TypeName: __expectString,\n    });\n};\nconst de_ListAssociationsResult = (output, context) => {\n    return take(output, {\n        Associations: (_) => de_AssociationList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_ListAssociationVersionsResult = (output, context) => {\n    return take(output, {\n        AssociationVersions: (_) => de_AssociationVersionList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_ListCommandInvocationsResult = (output, context) => {\n    return take(output, {\n        CommandInvocations: (_) => de_CommandInvocationList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_ListCommandsResult = (output, context) => {\n    return take(output, {\n        Commands: (_) => de_CommandList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_ListComplianceItemsResult = (output, context) => {\n    return take(output, {\n        ComplianceItems: (_) => de_ComplianceItemList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_ListDocumentMetadataHistoryResponse = (output, context) => {\n    return take(output, {\n        Author: __expectString,\n        DocumentVersion: __expectString,\n        Metadata: (_) => de_DocumentMetadataResponseInfo(_, context),\n        Name: __expectString,\n        NextToken: __expectString,\n    });\n};\nconst de_ListDocumentsResult = (output, context) => {\n    return take(output, {\n        DocumentIdentifiers: (_) => de_DocumentIdentifierList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_ListDocumentVersionsResult = (output, context) => {\n    return take(output, {\n        DocumentVersions: (_) => de_DocumentVersionList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_ListOpsItemEventsResponse = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        Summaries: (_) => de_OpsItemEventSummaries(_, context),\n    });\n};\nconst de_ListOpsItemRelatedItemsResponse = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        Summaries: (_) => de_OpsItemRelatedItemSummaries(_, context),\n    });\n};\nconst de_ListOpsMetadataResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        OpsMetadataList: (_) => de_OpsMetadataList(_, context),\n    });\n};\nconst de_ListResourceComplianceSummariesResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        ResourceComplianceSummaryItems: (_) => de_ResourceComplianceSummaryItemList(_, context),\n    });\n};\nconst de_ListResourceDataSyncResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        ResourceDataSyncItems: (_) => de_ResourceDataSyncItemList(_, context),\n    });\n};\nconst de_MaintenanceWindowExecution = (output, context) => {\n    return take(output, {\n        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Status: __expectString,\n        StatusDetails: __expectString,\n        WindowExecutionId: __expectString,\n        WindowId: __expectString,\n    });\n};\nconst de_MaintenanceWindowExecutionList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_MaintenanceWindowExecution(entry, context);\n    });\n    return retVal;\n};\nconst de_MaintenanceWindowExecutionTaskIdentity = (output, context) => {\n    return take(output, {\n        AlarmConfiguration: _json,\n        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Status: __expectString,\n        StatusDetails: __expectString,\n        TaskArn: __expectString,\n        TaskExecutionId: __expectString,\n        TaskType: __expectString,\n        TriggeredAlarms: _json,\n        WindowExecutionId: __expectString,\n    });\n};\nconst de_MaintenanceWindowExecutionTaskIdentityList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_MaintenanceWindowExecutionTaskIdentity(entry, context);\n    });\n    return retVal;\n};\nconst de_MaintenanceWindowExecutionTaskInvocationIdentity = (output, context) => {\n    return take(output, {\n        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ExecutionId: __expectString,\n        InvocationId: __expectString,\n        OwnerInformation: __expectString,\n        Parameters: __expectString,\n        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Status: __expectString,\n        StatusDetails: __expectString,\n        TaskExecutionId: __expectString,\n        TaskType: __expectString,\n        WindowExecutionId: __expectString,\n        WindowTargetId: __expectString,\n    });\n};\nconst de_MaintenanceWindowExecutionTaskInvocationIdentityList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_MaintenanceWindowExecutionTaskInvocationIdentity(entry, context);\n    });\n    return retVal;\n};\nconst de_MaintenanceWindowLambdaParameters = (output, context) => {\n    return take(output, {\n        ClientContext: __expectString,\n        Payload: context.base64Decoder,\n        Qualifier: __expectString,\n    });\n};\nconst de_MaintenanceWindowTaskInvocationParameters = (output, context) => {\n    return take(output, {\n        Automation: _json,\n        Lambda: (_) => de_MaintenanceWindowLambdaParameters(_, context),\n        RunCommand: _json,\n        StepFunctions: _json,\n    });\n};\nconst de_OpsItem = (output, context) => {\n    return take(output, {\n        ActualEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ActualStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Category: __expectString,\n        CreatedBy: __expectString,\n        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Description: __expectString,\n        LastModifiedBy: __expectString,\n        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Notifications: _json,\n        OperationalData: _json,\n        OpsItemArn: __expectString,\n        OpsItemId: __expectString,\n        OpsItemType: __expectString,\n        PlannedEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        PlannedStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Priority: __expectInt32,\n        RelatedOpsItems: _json,\n        Severity: __expectString,\n        Source: __expectString,\n        Status: __expectString,\n        Title: __expectString,\n        Version: __expectString,\n    });\n};\nconst de_OpsItemEventSummaries = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_OpsItemEventSummary(entry, context);\n    });\n    return retVal;\n};\nconst de_OpsItemEventSummary = (output, context) => {\n    return take(output, {\n        CreatedBy: _json,\n        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Detail: __expectString,\n        DetailType: __expectString,\n        EventId: __expectString,\n        OpsItemId: __expectString,\n        Source: __expectString,\n    });\n};\nconst de_OpsItemRelatedItemSummaries = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_OpsItemRelatedItemSummary(entry, context);\n    });\n    return retVal;\n};\nconst de_OpsItemRelatedItemSummary = (output, context) => {\n    return take(output, {\n        AssociationId: __expectString,\n        AssociationType: __expectString,\n        CreatedBy: _json,\n        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastModifiedBy: _json,\n        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        OpsItemId: __expectString,\n        ResourceType: __expectString,\n        ResourceUri: __expectString,\n    });\n};\nconst de_OpsItemSummaries = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_OpsItemSummary(entry, context);\n    });\n    return retVal;\n};\nconst de_OpsItemSummary = (output, context) => {\n    return take(output, {\n        ActualEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ActualStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Category: __expectString,\n        CreatedBy: __expectString,\n        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastModifiedBy: __expectString,\n        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        OperationalData: _json,\n        OpsItemId: __expectString,\n        OpsItemType: __expectString,\n        PlannedEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        PlannedStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Priority: __expectInt32,\n        Severity: __expectString,\n        Source: __expectString,\n        Status: __expectString,\n        Title: __expectString,\n    });\n};\nconst de_OpsMetadata = (output, context) => {\n    return take(output, {\n        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastModifiedUser: __expectString,\n        OpsMetadataArn: __expectString,\n        ResourceId: __expectString,\n    });\n};\nconst de_OpsMetadataList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_OpsMetadata(entry, context);\n    });\n    return retVal;\n};\nconst de_Parameter = (output, context) => {\n    return take(output, {\n        ARN: __expectString,\n        DataType: __expectString,\n        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Name: __expectString,\n        Selector: __expectString,\n        SourceResult: __expectString,\n        Type: __expectString,\n        Value: __expectString,\n        Version: __expectLong,\n    });\n};\nconst de_ParameterHistory = (output, context) => {\n    return take(output, {\n        AllowedPattern: __expectString,\n        DataType: __expectString,\n        Description: __expectString,\n        KeyId: __expectString,\n        Labels: _json,\n        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastModifiedUser: __expectString,\n        Name: __expectString,\n        Policies: _json,\n        Tier: __expectString,\n        Type: __expectString,\n        Value: __expectString,\n        Version: __expectLong,\n    });\n};\nconst de_ParameterHistoryList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_ParameterHistory(entry, context);\n    });\n    return retVal;\n};\nconst de_ParameterList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Parameter(entry, context);\n    });\n    return retVal;\n};\nconst de_ParameterMetadata = (output, context) => {\n    return take(output, {\n        AllowedPattern: __expectString,\n        DataType: __expectString,\n        Description: __expectString,\n        KeyId: __expectString,\n        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastModifiedUser: __expectString,\n        Name: __expectString,\n        Policies: _json,\n        Tier: __expectString,\n        Type: __expectString,\n        Version: __expectLong,\n    });\n};\nconst de_ParameterMetadataList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_ParameterMetadata(entry, context);\n    });\n    return retVal;\n};\nconst de_Patch = (output, context) => {\n    return take(output, {\n        AdvisoryIds: _json,\n        Arch: __expectString,\n        BugzillaIds: _json,\n        CVEIds: _json,\n        Classification: __expectString,\n        ContentUrl: __expectString,\n        Description: __expectString,\n        Epoch: __expectInt32,\n        Id: __expectString,\n        KbNumber: __expectString,\n        Language: __expectString,\n        MsrcNumber: __expectString,\n        MsrcSeverity: __expectString,\n        Name: __expectString,\n        Product: __expectString,\n        ProductFamily: __expectString,\n        Release: __expectString,\n        ReleaseDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Repository: __expectString,\n        Severity: __expectString,\n        Title: __expectString,\n        Vendor: __expectString,\n        Version: __expectString,\n    });\n};\nconst de_PatchComplianceData = (output, context) => {\n    return take(output, {\n        CVEIds: __expectString,\n        Classification: __expectString,\n        InstalledTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        KBId: __expectString,\n        Severity: __expectString,\n        State: __expectString,\n        Title: __expectString,\n    });\n};\nconst de_PatchComplianceDataList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_PatchComplianceData(entry, context);\n    });\n    return retVal;\n};\nconst de_PatchList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Patch(entry, context);\n    });\n    return retVal;\n};\nconst de_PatchStatus = (output, context) => {\n    return take(output, {\n        ApprovalDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ComplianceLevel: __expectString,\n        DeploymentStatus: __expectString,\n    });\n};\nconst de_ResetServiceSettingResult = (output, context) => {\n    return take(output, {\n        ServiceSetting: (_) => de_ServiceSetting(_, context),\n    });\n};\nconst de_ResourceComplianceSummaryItem = (output, context) => {\n    return take(output, {\n        ComplianceType: __expectString,\n        CompliantSummary: _json,\n        ExecutionSummary: (_) => de_ComplianceExecutionSummary(_, context),\n        NonCompliantSummary: _json,\n        OverallSeverity: __expectString,\n        ResourceId: __expectString,\n        ResourceType: __expectString,\n        Status: __expectString,\n    });\n};\nconst de_ResourceComplianceSummaryItemList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_ResourceComplianceSummaryItem(entry, context);\n    });\n    return retVal;\n};\nconst de_ResourceDataSyncItem = (output, context) => {\n    return take(output, {\n        LastStatus: __expectString,\n        LastSuccessfulSyncTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastSyncStatusMessage: __expectString,\n        LastSyncTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        S3Destination: _json,\n        SyncCreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        SyncLastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        SyncName: __expectString,\n        SyncSource: _json,\n        SyncType: __expectString,\n    });\n};\nconst de_ResourceDataSyncItemList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_ResourceDataSyncItem(entry, context);\n    });\n    return retVal;\n};\nconst de_ReviewInformation = (output, context) => {\n    return take(output, {\n        ReviewedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Reviewer: __expectString,\n        Status: __expectString,\n    });\n};\nconst de_ReviewInformationList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_ReviewInformation(entry, context);\n    });\n    return retVal;\n};\nconst de_SendCommandResult = (output, context) => {\n    return take(output, {\n        Command: (_) => de_Command(_, context),\n    });\n};\nconst de_ServiceSetting = (output, context) => {\n    return take(output, {\n        ARN: __expectString,\n        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastModifiedUser: __expectString,\n        SettingId: __expectString,\n        SettingValue: __expectString,\n        Status: __expectString,\n    });\n};\nconst de_Session = (output, context) => {\n    return take(output, {\n        Details: __expectString,\n        DocumentName: __expectString,\n        EndDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        MaxSessionDuration: __expectString,\n        OutputUrl: _json,\n        Owner: __expectString,\n        Reason: __expectString,\n        SessionId: __expectString,\n        StartDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Status: __expectString,\n        Target: __expectString,\n    });\n};\nconst de_SessionList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Session(entry, context);\n    });\n    return retVal;\n};\nconst de_StepExecution = (output, context) => {\n    return take(output, {\n        Action: __expectString,\n        ExecutionEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ExecutionStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        FailureDetails: _json,\n        FailureMessage: __expectString,\n        Inputs: _json,\n        IsCritical: __expectBoolean,\n        IsEnd: __expectBoolean,\n        MaxAttempts: __expectInt32,\n        NextStep: __expectString,\n        OnFailure: __expectString,\n        Outputs: _json,\n        OverriddenParameters: _json,\n        Response: __expectString,\n        ResponseCode: __expectString,\n        StepExecutionId: __expectString,\n        StepName: __expectString,\n        StepStatus: __expectString,\n        TargetLocation: _json,\n        Targets: _json,\n        TimeoutSeconds: __expectLong,\n        TriggeredAlarms: _json,\n        ValidNextSteps: _json,\n    });\n};\nconst de_StepExecutionList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_StepExecution(entry, context);\n    });\n    return retVal;\n};\nconst de_UpdateAssociationResult = (output, context) => {\n    return take(output, {\n        AssociationDescription: (_) => de_AssociationDescription(_, context),\n    });\n};\nconst de_UpdateAssociationStatusResult = (output, context) => {\n    return take(output, {\n        AssociationDescription: (_) => de_AssociationDescription(_, context),\n    });\n};\nconst de_UpdateDocumentResult = (output, context) => {\n    return take(output, {\n        DocumentDescription: (_) => de_DocumentDescription(_, context),\n    });\n};\nconst de_UpdateMaintenanceWindowTaskResult = (output, context) => {\n    return take(output, {\n        AlarmConfiguration: _json,\n        CutoffBehavior: __expectString,\n        Description: __expectString,\n        LoggingInfo: _json,\n        MaxConcurrency: __expectString,\n        MaxErrors: __expectString,\n        Name: __expectString,\n        Priority: __expectInt32,\n        ServiceRoleArn: __expectString,\n        Targets: _json,\n        TaskArn: __expectString,\n        TaskInvocationParameters: (_) => de_MaintenanceWindowTaskInvocationParameters(_, context),\n        TaskParameters: _json,\n        WindowId: __expectString,\n        WindowTaskId: __expectString,\n    });\n};\nconst de_UpdatePatchBaselineResult = (output, context) => {\n    return take(output, {\n        ApprovalRules: _json,\n        ApprovedPatches: _json,\n        ApprovedPatchesComplianceLevel: __expectString,\n        ApprovedPatchesEnableNonSecurity: __expectBoolean,\n        BaselineId: __expectString,\n        CreatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Description: __expectString,\n        GlobalFilters: _json,\n        ModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Name: __expectString,\n        OperatingSystem: __expectString,\n        RejectedPatches: _json,\n        RejectedPatchesAction: __expectString,\n        Sources: _json,\n    });\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst throwDefaultError = withBaseException(__BaseException);\nconst buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const contents = {\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        path: basePath.endsWith(\"/\") ? basePath.slice(0, -1) + path : basePath + path,\n        headers,\n    };\n    if (resolvedHostname !== undefined) {\n        contents.hostname = resolvedHostname;\n    }\n    if (body !== undefined) {\n        contents.body = body;\n    }\n    return new __HttpRequest(contents);\n};\nfunction sharedHeaders(operation) {\n    return {\n        \"content-type\": \"application/x-amz-json-1.1\",\n        \"x-amz-target\": `AmazonSSM.${operation}`,\n    };\n}\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        return JSON.parse(encoded);\n    }\n    return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n    const value = await parseBody(errorBody, context);\n    value.message = value.message ?? value.Message;\n    return value;\n};\nconst loadRestJsonErrorCode = (output, data) => {\n    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n    const sanitizeErrorCode = (rawValue) => {\n        let cleanValue = rawValue;\n        if (typeof cleanValue === \"number\") {\n            cleanValue = cleanValue.toString();\n        }\n        if (cleanValue.indexOf(\",\") >= 0) {\n            cleanValue = cleanValue.split(\",\")[0];\n        }\n        if (cleanValue.indexOf(\":\") >= 0) {\n            cleanValue = cleanValue.split(\":\")[0];\n        }\n        if (cleanValue.indexOf(\"#\") >= 0) {\n            cleanValue = cleanValue.split(\"#\")[1];\n        }\n        return cleanValue;\n    };\n    const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n    if (headerKey !== undefined) {\n        return sanitizeErrorCode(output.headers[headerKey]);\n    }\n    if (data.code !== undefined) {\n        return sanitizeErrorCode(data.code);\n    }\n    if (data[\"__type\"] !== undefined) {\n        return sanitizeErrorCode(data[\"__type\"]);\n    }\n};\n","import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { GetParametersByPathResultFilterSensitiveLog, } from \"../models/models_1\";\nimport { de_GetParametersByPathCommand, se_GetParametersByPathCommand } from \"../protocols/Aws_json1_1\";\nexport class GetParametersByPathCommand extends $Command {\n    static getEndpointParameterInstructions() {\n        return {\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getEndpointPlugin(configuration, GetParametersByPathCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"SSMClient\";\n        const commandName = \"GetParametersByPathCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: (_) => _,\n            outputFilterSensitiveLog: GetParametersByPathResultFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return se_GetParametersByPathCommand(input, context);\n    }\n    deserialize(output, context) {\n        return de_GetParametersByPathCommand(output, context);\n    }\n}\n","import { GetParametersByPathCommand, } from \"../commands/GetParametersByPathCommand\";\nimport { SSMClient } from \"../SSMClient\";\nconst makePagedClientRequest = async (client, input, ...args) => {\n    return await client.send(new GetParametersByPathCommand(input), ...args);\n};\nexport async function* paginateGetParametersByPath(config, input, ...additionalArguments) {\n    let token = config.startingToken || undefined;\n    let hasNext = true;\n    let page;\n    while (hasNext) {\n        input.NextToken = token;\n        input[\"MaxResults\"] = config.pageSize;\n        if (config.client instanceof SSMClient) {\n            page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n        }\n        else {\n            throw new Error(\"Invalid client, expected SSM | SSMClient\");\n        }\n        yield page;\n        const prevToken = token;\n        token = page.NextToken;\n        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));\n    }\n    return undefined;\n}\n","import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { de_ListTagsForResourceCommand, se_ListTagsForResourceCommand } from \"../protocols/Aws_json1_1\";\nexport class ListTagsForResourceCommand extends $Command {\n    static getEndpointParameterInstructions() {\n        return {\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getEndpointPlugin(configuration, ListTagsForResourceCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"SSMClient\";\n        const commandName = \"ListTagsForResourceCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: (_) => _,\n            outputFilterSensitiveLog: (_) => _,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return se_ListTagsForResourceCommand(input, context);\n    }\n    deserialize(output, context) {\n        return de_ListTagsForResourceCommand(output, context);\n    }\n}\n","import {\n  ECSClient,\n  paginateListServices,\n  DescribeServicesCommand,\n  DescribeTaskDefinitionCommand,\n  RegisterTaskDefinitionCommand,\n  TaskDefinitionField,\n  UpdateServiceCommand\n} from '@aws-sdk/client-ecs'\n\nimport {\n  SSMClient,\n  paginateGetParametersByPath,\n  ListTagsForResourceCommand\n} from '@aws-sdk/client-ssm'\n\nimport {\n  DynamoDBClient,\n  UpdateItemCommand\n} from '@aws-sdk/client-dynamodb'\n\nimport {\n  EventBridgeClient,\n  ListRulesCommand,\n  ListTargetsByRuleCommand,\n  PutTargetsCommand\n} from '@aws-sdk/client-eventbridge'\n\nconst tagReducer = (previousValue, currentValue) => {\n  previousValue[currentValue.Key] = currentValue.Value\n  return previousValue\n}\n\nconst chunk = (arr, size) => arr.reduce((acc, _, i) => (i % size) ? acc : [...acc, arr.slice(i, i + size)], [])\nconst RETRY_CONFIG = {maxAttempts: 5, retryMode: 'standard'}\n\nexport async function ecsListServices (regexp, cluster) {\n  const client = new ECSClient({...RETRY_CONFIG})\n  const serviceArns = []\n  for await (const page of paginateListServices({ client, pageSize: 50 }, { cluster })) {\n    serviceArns.push(...page.serviceArns)\n  }\n  return serviceArns.filter(arn => regexp.test(arn))\n}\n\nexport async function ecsServiceTaskDefinitions (serviceArns, cluster) {\n  const client = new ECSClient({...RETRY_CONFIG})\n  const services = []\n  for (const arns of chunk(serviceArns, 10)) {\n    const result = await client.send(new DescribeServicesCommand({ cluster, services: arns }))\n    services.push(...result.services)\n  }\n  return await services.reduce(async (acc, key) => {\n    try {\n      const taskDef = await ecsDescribeTaskDefinition(key.taskDefinition)\n      return { ...await acc, [key.serviceArn]: taskDef.taskDefinition }\n    } catch (error) {\n      return { ...await acc, [key.serviceArn]: { error } }\n    }\n  }, {})\n}\n\nexport async function ecsDescribeTaskDefinition (taskDefinition) {\n  const client = new ECSClient({...RETRY_CONFIG})\n  return client.send(new DescribeTaskDefinitionCommand({ taskDefinition, include: [TaskDefinitionField.TAGS] }))\n}\n\nexport async function ecsRegisterTaskDefinition (taskDefinition) {\n  const client = new ECSClient({...RETRY_CONFIG})\n  const response = await client.send(new RegisterTaskDefinitionCommand(taskDefinition))\n  return response.taskDefinition.taskDefinitionArn\n}\n\nexport async function ecsUpdateService (service, cluster, taskDefinition) {\n  const client = new ECSClient({...RETRY_CONFIG})\n  const response = await client.send(new UpdateServiceCommand({ service, cluster, taskDefinition }))\n  return response.service\n}\n\nexport async function ssmParameters (prefix, decrypt = true) {\n  const client = new SSMClient({ region: 'us-east-1', ...RETRY_CONFIG })\n  const params = []\n  for await (const page of paginateGetParametersByPath({ client, pageSize: 10 }, {\n    Path: prefix,\n    WithDecryption: decrypt\n  })) {\n    params.push(...page.Parameters)\n  }\n  return await Promise.all(params.map(async (param) => {\n    const tags = (await client.send(new ListTagsForResourceCommand({\n      ResourceType: 'Parameter',\n      ResourceId: param.Name\n    }))).TagList\n    return {\n      name: param.Name,\n      value: param.Value,\n      tags: tags.reduce(tagReducer, {})\n    }\n  }))\n}\n\nexport async function ecsBuildNumber (projectName) {\n  const client = new DynamoDBClient({...RETRY_CONFIG})\n  return (await client.send(new UpdateItemCommand({\n    TableName: 'ECSBuildNumbers',\n    Key: { ProjectName: { 'S': projectName } },\n    ExpressionAttributeNames: { '#buildNumber': 'BuildNumber' },\n    ExpressionAttributeValues: { ':num': { 'N': '1' }, ':base': { 'N': '10000' } },\n    UpdateExpression: 'SET #buildNumber = if_not_exists(#buildNumber, :base) + :num',\n    ReturnValues: 'UPDATED_NEW'\n  }))).Attributes.BuildNumber.N\n}\n\nexport async function eventBridgeListRules (prefix) {\n  const client = new EventBridgeClient({...RETRY_CONFIG})\n  const rules = []\n  let NextToken = undefined\n\n  do {\n    const command = new ListRulesCommand({ NamePrefix: prefix, Limit: 10, NextToken })\n    const response = await client.send(command)\n    rules.push(...response.Rules)\n    NextToken = response.NextToken\n  } while (NextToken)\n  return rules\n}\n\nexport async function eventBridgeListTargets (ruleName) {\n  const client = new EventBridgeClient({...RETRY_CONFIG})\n  const targets = []\n  let NextToken = undefined\n\n  do {\n    const command = new ListTargetsByRuleCommand({ Rule: ruleName, Limit: 10, NextToken })\n    const response = await client.send(command)\n    targets.push(...response.Targets)\n    NextToken = response.NextToken\n  } while (NextToken)\n  return targets\n}\n\nexport async function eventBridgeUpdateTarget(ruleName, target) {\n  const client = new EventBridgeClient({...RETRY_CONFIG})\n  const command = new PutTargetsCommand({Rule: ruleName, Targets: [target]})\n  return await client.send(command)\n}\n","import { ssmParameters } from './aws'\n\nconst ACCOUNTS = {\n  'cruds': '056154071827',\n  'great-lakes': '149713003610',\n  'snowplow': '699385956789',\n  'oracle-dr': '831196674197',\n  'r-and-d': '972493202329',\n  'cru-prod': '151451362611',\n  'user-bastion': '725722162525'\n}\nconst DEFAULT_ACCOUNT = 'cruds'\n\nexport const PARAM_TYPES = ['BUILD', 'RUNTIME', 'ALL']\nexport const BUILD_PARAM_TYPES = ['BUILD', 'ALL']\nexport const RUNTIME_PARAM_TYPES = ['RUNTIME', 'ALL']\n\nexport function environmentNickname (environment) {\n  switch (environment) {\n    case 'production':\n      return 'prod'\n    case 'staging':\n      return 'stage'\n    case 'development':\n      return 'dev'\n    case 'lab':\n      return 'lab'\n    default:\n      return environment\n  }\n}\n\nexport function environmentFromBranch (branch) {\n  switch (branch) {\n    case 'main':\n    case 'master':\n    case 'production':\n      return 'production'\n    case branch.match(/^lab-.+/)?.input:\n      return 'lab'\n    case 'staging':\n    default:\n      return 'staging'\n  }\n}\n\nexport function ecsCluster (environment) {\n  switch (environment) {\n    case 'production':\n    case 'prod':\n      return 'prod'\n    case 'development':\n    case 'dev':\n    case 'lab':\n      return 'lab'\n    default:\n      return 'stage'\n  }\n}\n\nexport function awsAccountNumber (awsAccount = DEFAULT_ACCOUNT) {\n  // If account is 12+ digits, return it\n  if (/^\\d{12,}$/.test(awsAccount))\n    return awsAccount\n\n  if (!ACCOUNTS.hasOwnProperty(awsAccount))\n    throw new TypeError(`Unknown AWS account alias: ${awsAccount}`)\n\n  // Otherwise, lookup account number\n  return ACCOUNTS[awsAccount]\n}\n\nexport function taskRoleARN (projectName, environment, awsAccount = DEFAULT_ACCOUNT) {\n  const env = environmentNickname(environment)\n  return `arn:aws:iam::${awsAccountNumber(awsAccount)}:role/${projectName}-${env}-TaskRole`\n}\n\nexport function ecrRegistry (account, region = 'us-east-1') {\n  const accountNumber = awsAccountNumber(account)\n  return `${accountNumber}.dkr.ecr.${region}.amazonaws.com`\n}\n\nexport function ecrImageTag (projectName, environment, buildNumber) {\n  return `${ecrRegistry(DEFAULT_ACCOUNT)}/${projectName}:${environment}-${buildNumber}`\n}\n\nexport async function secrets (projectName, environment, types = PARAM_TYPES) {\n  const env = environmentNickname(environment)\n  return (await ssmParameters(`/ecs/${projectName}/${env}/`))\n    .filter(param => types.includes(param.tags['param_type']))\n    .reduce((acc, key) => ({ ...acc, [key.name.split('/').pop()]: key.value }), {})\n}\n\nexport async function runtimeSecrets (projectName, environment) {\n  const env = environmentNickname(environment)\n  return (await ssmParameters(`/ecs/${projectName}/${env}/`, false))\n    .filter(param => RUNTIME_PARAM_TYPES.includes(param.tags['param_type']))\n    .reduce((acc, key) => [...acc, { name: key.name.split('/').pop(), valueFrom: key.name }], [])\n}\n","import * as core from '@actions/core'\nimport { secrets, PARAM_TYPES, RUNTIME_PARAM_TYPES, BUILD_PARAM_TYPES } from './ecs-config'\n\nasync function run () {\n  try {\n    const projectName = core.getInput('project-name', { required: false }) || process.env.PROJECT_NAME\n    const environment = core.getInput('environment', { required: false }) || process.env.ENVIRONMENT\n    const type = core.getInput('type', { required: false }) || 'BUILD'\n\n    core.debug(`Project Name: ${projectName}`)\n    core.debug(`Environment: ${environment}`)\n    core.debug(`Type: ${type}`)\n\n    let types\n    switch (type) {\n      case 'ALL':\n        types = PARAM_TYPES\n        break\n      case 'RUNTIME':\n        types = RUNTIME_PARAM_TYPES\n        break\n      case 'BUILD':\n      default:\n        types = BUILD_PARAM_TYPES\n    }\n\n    const selectedSecrets = await secrets(projectName, environment, types)\n    for (const key in selectedSecrets) {\n      // Only mark the value of a secret as secret if it doesn't match projectName or environment\n      if (![projectName, environment].includes(selectedSecrets[key])) {\n        core.setSecret(selectedSecrets[key])\n      }\n      core.exportVariable(key, selectedSecrets[key])\n    }\n\n  } catch (error) {\n    core.setFailed(error.message)\n  }\n}\n\nrun()\n"],"names":["__createBinding","this","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","hasOwnProperty","call","exports","issue","issueCommand","os","utils_1","command","properties","message","cmd","Command","process","stdout","write","toString","EOL","name","constructor","cmdStr","keys","length","first","key","val","s","toCommandValue","replace","escapeData","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","done","then","apply","getIDToken","getState","saveState","group","endGroup","startGroup","info","notice","warning","error","debug","isDebug","setFailed","setCommandEcho","setOutput","getBooleanInput","getMultilineInput","getInput","addPath","setSecret","exportVariable","ExitCode","command_1","file_command_1","path","oidc_utils_1","options","env","toUpperCase","required","Error","trimWhitespace","trim","toCommandProperties","convertedVal","issueFileCommand","prepareKeyValueMessage","secret","inputPath","delimiter","inputs","split","filter","x","map","input","includes","TypeError","enabled","exitCode","Failure","fn","aud","OidcClient","summary_1","summary","summary_2","markdownSummary","path_utils_1","toPosixPath","toWin32Path","toPlatformPath","fs","uuid_1","filePath","existsSync","appendFileSync","encoding","v4","convertedValue","http_client_1","auth_1","core_1","static","allowRetry","maxRetry","requestOptions","allowRetries","maxRetries","HttpClient","BearerCredentialHandler","getRequestToken","token","runtimeUrl","id_token_url","_a","httpclient","createHttpClient","res","getJson","catch","statusCode","id_token","audience","getIDTokenUrl","encodeURIComponent","getCall","pth","sep","SUMMARY_DOCS_URL","SUMMARY_ENV_VAR","os_1","fs_1","access","appendFile","writeFile","promises","_summary","_buffer","_filePath","pathFromEnv","constants","R_OK","W_OK","wrap","tag","content","attrs","htmlAttrs","entries","join","overwrite","writeFunc","emptyBuffer","clear","stringify","isEmptyBuffer","addRaw","text","addEOL","addCodeBlock","code","lang","assign","element","addList","items","ordered","listItems","item","addTable","rows","tableBody","row","cells","cell","header","data","colspan","rowspan","addDetails","label","addImage","src","alt","width","height","addHeading","level","allowedTag","addSeparator","addBreak","addQuote","cite","addLink","href","String","JSON","annotationProperties","title","file","line","startLine","endLine","col","startColumn","endColumn","PersonalAccessTokenCredentialHandler","BasicCredentialHandler","username","password","prepareRequest","headers","Buffer","from","canHandleAuthentication","handleAuthentication","isHttps","HttpClientResponse","HttpClientError","getProxyUrl","MediaTypes","Headers","HttpCodes","http","https","pm","tunnel","serverUrl","proxyUrl","URL","HttpRedirectCodes","MovedPermanently","ResourceMoved","SeeOther","TemporaryRedirect","PermanentRedirect","HttpResponseRetryCodes","BadGateway","ServiceUnavailable","GatewayTimeout","RetryableHttpVerbs","super","setPrototypeOf","prototype","readBody","output","alloc","on","chunk","concat","requestUrl","protocol","userAgent","handlers","_ignoreSslError","_allowRedirects","_allowRedirectDowngrade","_maxRedirects","_allowRetries","_maxRetries","_keepAlive","_disposed","ignoreSslError","_socketTimeout","socketTimeout","allowRedirects","allowRedirectDowngrade","maxRedirects","Math","max","keepAlive","additionalHeaders","request","del","post","patch","put","head","sendStream","verb","stream","Accept","_getExistingOrDefaultHeader","ApplicationJson","_processResponse","postJson","obj","ContentType","putJson","patchJson","parsedUrl","_prepareRequest","maxTries","response","numTries","requestRaw","Unauthorized","authenticationHandler","handler","redirectsRemaining","redirectUrl","parsedRedirectUrl","hostname","toLowerCase","_performExponentialBackoff","dispose","_agent","destroy","requestRawWithCallback","err","onResult","byteLength","callbackCalled","handleResult","req","httpModule","msg","socket","sock","setTimeout","end","pipe","getAgent","_getAgent","method","usingSsl","defaultPort","host","port","parseInt","pathname","search","_mergeHeaders","agent","lowercaseKeys","_default","clientHeader","useProxy","_proxyAgent","maxSockets","globalAgent","agentOptions","proxy","proxyAuth","tunnelAgent","overHttps","httpsOverHttps","httpsOverHttp","httpOverHttps","httpOverHttp","Agent","rejectUnauthorized","retryNumber","min","ms","pow","contents","NotFound","deserializeDates","parse","a","Date","isNaN","valueOf","reduce","c","checkBypass","reqUrl","noProxy","reqPort","Number","upperReqHosts","push","upperNoProxyItem","some","proxyVar","validator","XMLParser","XMLBuilder","module","XMLValidator","nameStartChar","nameRegexp","regexName","RegExp","isExist","isEmptyObject","merge","target","arrayMode","len","i","getValue","isName","string","match","exec","getAllMatches","regex","matches","allmatches","startIndex","lastIndex","index","util","defaultOptions","allowBooleanAttributes","unpairedTags","isWhiteSpace","char","readPI","xmlData","start","tagname","substr","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","validate","tags","tagFound","reachedRoot","tagStartPos","closingTag","tagName","substring","readAttributeStr","attrStr","attrStrStart","isValid","validateAttributeString","tagClosed","otg","pop","openPos","indexOf","afterAmp","validateAmpersand","t","doubleQuote","singleQuote","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","attrName","validateAttrName","re","validateNumberAmpersand","count","lineNumber","lines","buildFromOrderedJs","attributeNamePrefix","attributesGroupName","textNodeName","ignoreAttributes","cdataPropName","format","indentBy","suppressEmptyNode","suppressUnpairedNode","suppressBooleanAttributes","tagValueProcessor","attributeValueProcessor","preserveOrder","commentPropName","entities","processEntities","stopNodes","Builder","isAttribute","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","object","j2x","buildTextValNode","buildObjectNode","repeat","startsWith","build","jObj","Array","isArray","arrayNodeName","attr","buildAttrPairStr","newval","replaceEntitiesValue","arrLen","j","Ks","L","closeTag","tagEndExp","piClosingChar","textValue","entity","arrToStr","arr","jPath","indentation","xmlStr","isPreviousElementTag","tagObj","propName","newJPath","tagText","isStopNode","attStr","attr_to_str","tempInd","piTextNodeName","newIdentation","tagStart","tagValue","endsWith","attrMap","attrVal","lastIndexOf","jArray","entityRegex","parseEntityExp","exp","regx","hasBody","comment","removeNSPrefix","parseTagValue","parseAttributeValue","trimValues","numberParseOptions","hex","leadingZeros","eNotation","alwaysCreateTextNode","htmlEntities","ignoreDeclaration","ignorePiTags","transformTagName","transformAttributeName","buildOptions","xmlNode","readDocType","toNumber","addExternalEntities","externalEntities","entKeys","ent","lastEntities","parseTextData","dontTrim","hasAttributes","isLeafNode","escapeEntities","parseValue","resolveNameSpace","prefix","charAt","attrsRegx","buildAttributesMap","oldVal","aName","newVal","attrCollection","parseXml","xmlObj","currentNode","textData","closeIndex","findClosingIndex","colonIndex","saveTextToParentTag","tagsNodeStack","tagData","readTagExp","childNode","add","tagExp","attrExpPresent","addChild","endIndex","docTypeEntities","lastTag","isItStopNode","tagContent","readStopNodeData","child","entityName","ampEntity","currentTagName","allNodesExp","stopNodePath","stopNodeExp","str","errMsg","closingIndex","closingChar","attrBoundary","ch","tagExpWithClosingIndex","separatorIndex","openTagCount","shouldParse","OrderedObjParser","prettify","validationOption","orderedObjParser","orderedResult","addEntity","compress","compressedObj","property","newJpath","isLeaf","isLeafTag","assignAttributes","jpath","atrrName","propCount","node","hexRegex","numRegex","window","parseFloat","consider","decimalPoint","trimmedStr","skipLike","test","sign","numTrimmedByZeros","numStr","trimZeros","num","tls","events","TunnelingAgent","self","proxyOptions","defaultMaxSockets","requests","sockets","localAddress","toOptions","pending","splice","onSocket","removeSocket","createSecureSocket","cb","createSocket","hostHeader","getHeader","tlsOptions","mergeOptions","servername","secureSocket","connect","arguments","overrides","keyLen","inherits","EventEmitter","addRequest","onFree","emit","onCloseOrRemove","removeListener","placeholder","connectOptions","connectReq","onConnect","removeAllListeners","useChunkedEncodingByDefault","once","upgrade","nextTick","cause","stack","pos","shift","NODE_DEBUG","args","slice","unshift","console","_nodeId","_clockseq","_lastMSecs","_lastNSecs","buf","offset","b","clockseq","seedBytes","random","rng","msecs","now","nsecs","dt","tl","tmh","n","uuid","Uint8Array","version","hashfunc","generateUUID","namespace","unescape","bytes","charCodeAt","stringToBytes","set","DNS","v35","update","digest","rnds8Pool","poolPtr","byteToHex","rnds","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","d","definition","prop","r","Symbol","toStringTag","SelectorType","booleanSelector","type","NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS","environmentVariableSelector","ENV","configFileSelector","profile","CONFIG","default","NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS","NODE_REGION_CONFIG_OPTIONS","NODE_REGION_CONFIG_FILE_OPTIONS","preferredFile","isFipsRegion","region","getRealRegion","resolveRegionConfig","useFipsEndpoint","async","providedRegion","FieldPosition","query","body","clone","cloned","carry","paramName","param","resp","CONTENT_LENGTH_HEADER","contentLengthMiddlewareOptions","override","getContentLengthPlugin","applyToStack","clientStack","bodyLengthChecker","deserializerMiddlewareOption","serializerMiddlewareOption","getSerdePlugin","config","serializer","deserializer","commandStack","context","hint","deserializerMiddleware","endpoint","endpointV2","url","urlParser","serializerMiddleware","DOMAIN_PATTERN","IP_ADDRESS_PATTERN","DOTS_PATTERN","isDnsCompatibleBucketName","bucketName","isArnBucketName","arn","partition","service","account","typeOrId","isArn","isValidArn","Boolean","createConfigValueProvider","configKey","canonicalEndpointParamKey","configProvider","configValue","resolveParams","commandInput","instructionsSupplier","clientConfig","endpointParams","instructions","getEndpointParameterInstructions","instruction","serviceId","bucket","Bucket","ForcePathStyle","Endpoint","DisableMultiRegionAccessPoints","disableMultiRegionAccessPoints","DisableMRAP","resolveParamsForS3","endpointMiddleware","endpointProvider","getEndpointFromInstructions","authSchemes","authScheme","signingRegion","signingName","endpointMiddlewareOptions","relation","toMiddleware","getEndpointPlugin","addRelativeTo","promisified","parseUrl","querystring","pair","decodeURIComponent","parseQueryString","resolveEndpointConfig","customEndpointProvider","toEndpointV1","isCustomEndpoint","useDualstackEndpoint","hostHeaderMiddlewareOptions","priority","getHostHeaderPlugin","handlerProtocol","requestHandler","metadata","hostHeaderMiddleware","loggerMiddlewareOptions","getLoggerPlugin","clientName","commandName","logger","dynamoDbDocumentClientOptions","overrideInputFilterSensitiveLog","overrideOutputFilterSensitiveLog","inputFilterSensitiveLog","outputFilterSensitiveLog","$metadata","outputWithoutMetadata","TRACE_ID_HEADER_NAME","addRecursionDetectionMiddlewareOptions","getRecursionDetectionPlugin","runtime","functionName","traceId","nonEmptyString","recursionDetectionMiddleware","RETRY_MODES","DEFAULT_RETRY_MODE","STANDARD","THROTTLING_ERROR_CODES","TRANSIENT_ERROR_CODES","TRANSIENT_ERROR_STATUS_CODES","NODEJS_TIMEOUT_ERROR_CODES","httpStatusCode","$retryable","throttling","isTransientError","currentCapacity","lastMaxRate","measuredTxRate","requestCount","lastTimestamp","timeWindow","beta","minCapacity","minFillRate","scaleConstant","smooth","currentTimeInSeconds","getCurrentTimeInSeconds","lastThrottleTime","lastTxRateBucket","floor","fillRate","maxCapacity","acquireTokenBucket","amount","refillTokenBucket","delay","timestamp","fillAmount","updateClientSendingRate","calculatedRate","updateMeasuredRate","rateToUse","calculateTimeWindow","cubicThrottle","enableTokenBucket","cubicSuccess","newRate","updateTokenBucketRate","getPrecise","timeBucket","currentRate","toFixed","getDefaultRetryToken","initialRetryTokens","initialRetryDelay","initialRetryCount","MAX_CAPACITY","retryCost","timeoutRetryCost","retryBackoffStrategy","delayBase","computeNextBackoffDelay","attempts","setDelayBase","getDefaultRetryBackoffStrategy","lastRetryCost","availableCapacity","retryDelay","retryCount","getCapacityAmount","errorType","hasRetryTokens","getRetryCount","getRetryDelay","getLastRetryCost","getRetryTokenCount","errorInfo","capacityAmount","delayFromErrorType","retryAfterHint","delayFromRetryAfterHint","getTime","releaseRetryTokens","releaseAmount","maxAttempts","mode","retryToken","maxAttemptsProvider","retryTokenScope","tokenToRenew","getMaxAttempts","shouldRetry","recordSuccess","warn","isRetryableError","AdaptiveRetryStrategy","rateLimiter","standardRetryStrategy","getSendToken","acquireInitialRetryToken","refreshRetryTokenForRetry","ENV_MAX_ATTEMPTS","CONFIG_MAX_ATTEMPTS","NODE_MAX_ATTEMPT_CONFIG_OPTIONS","maxAttempt","resolveRetryConfig","retryStrategy","retryMode","NODE_RETRY_MODE_CONFIG_OPTIONS","isRetryStrategyV2","getRetryErrorInfo","getRetryErrorType","getRetryAfterHint","$response","isServerError","retryMiddlewareOptions","getRetryPlugin","retry","lastError","totalRetryDelay","retryErrorInfo","refreshError","retryMiddleware","retryAfterHeaderName","find","retryAfter","retryAfterSeconds","ProviderError","tryNextLink","CredentialsProviderError","TokenProviderError","chain","providers","promise","provider","memoize","isExpired","requiresRefresh","resolved","hasResult","isConstant","coalesceProvider","forceRefresh","SHORT_TO_HEX","HEX_TO_SHORT","encodedByte","toHex","out","isArrayBuffer","arg","ArrayBuffer","fromArrayBuffer","fromString","fromUtf8","buffer","byteOffset","BYTES_PER_ELEMENT","toUint8Array","isView","toUtf8","AMZ_DATE_QUERY_PARAM","SIGNATURE_QUERY_PARAM","TOKEN_QUERY_PARAM","AUTH_HEADER","AMZ_DATE_HEADER","GENERATED_HEADERS","SIGNATURE_HEADER","SHA256_HEADER","TOKEN_HEADER","ALWAYS_UNSIGNABLE_HEADERS","authorization","connection","expect","pragma","referer","te","trailer","PROXY_HEADER_PATTERN","SEC_HEADER_PATTERN","ALGORITHM_IDENTIFIER","EVENT_ALGORITHM_IDENTIFIER","KEY_TYPE_IDENTIFIER","signingKeyCache","cacheQueue","createScope","shortDate","hmac","ctor","hash","getCanonicalHeaders","unsignableHeaders","signableHeaders","canonical","headerName","sort","canonicalHeaderName","has","escapeUri","uri","hexEncode","getPayloadHash","hashConstructor","hashCtor","cloneRequest","rest","toDate","time","applyChecksum","credentials","sha256","uriEscapePath","regionProvider","credentialProvider","originalRequest","signingDate","expiresIn","unhoistableHeaders","signingService","validateResolvedCredentials","longDate","formatDate","scope","lname","moveHeadersToQuery","sessionToken","accessKeyId","canonicalHeaders","getCanonicalHeaderList","getSignature","getSigningKey","createCanonicalRequest","toSign","signString","payload","signEvent","signRequest","priorSignature","hashedPayload","hashedHeaders","stringToSign","requestToSign","payloadHash","soughtHeader","hasHeader","signature","sortedHeaders","getCanonicalPath","serialized","encoded","getCanonicalQuery","credentialScope","canonicalRequest","hashedRequest","normalizedPathSegments","pathSegment","normalizedPath","keyPromise","createStringToSign","sha256Constructor","cacheKey","secretAccessKey","signable","toISOString","resolveAwsAuthConfig","normalizedCreds","normalizeCredentialProvider","credentialDefaultProvider","signingEscapePath","systemClockOffset","signer","regionInfoProvider","regionInfo","params","signerConstructor","defaultSigningName","expiration","getSkewCorrectedDate","getUpdatedSystemClockOffset","clockTime","currentSystemClockOffset","clockTimeInMs","abs","isClockSkewed","getDateHeader","date","awsAuthMiddlewareOptions","getAwsAuthPlugin","multiRegionOverride","signingRegionSet","serverTime","ServerTime","dateHeader","awsAuthMiddleware","resolveUserAgentConfig","customUserAgent","selectedPartitionsInfo","selectedUserAgentPrefix","partitions","regions","outputs","regionData","regionRegex","DEFAULT_PARTITION","id","setPartitionInfo","partitionsInfo","userAgentPrefix","useDefaultPartitionInfo","getUserAgentPrefix","debugId","toDebugString","ref","argv","EndpointError","IP_V4_REGEX","isIpAddress","VALID_HOST_LABEL_REGEX","isValidHostLabel","allowSubDomains","labels","isVirtualHostableS3Bucket","parseArn","segments","accountId","resourceId","booleanEquals","value1","value2","getAttr","parts","pathList","part","squareBracketIndex","arrayIndex","getAttrPathList","acc","isSet","not","HttpAuthLocation","HostAddressType","EndpointURLScheme","RequestHandlerProtocol","DEFAULT_PORTS","HTTP","HTTPS","parseURL","whatwgURL","urlString","scheme","values","isIp","authority","stringEquals","stop","reverse","uriEncode","evaluateTemplate","template","evaluatedTemplateArr","templateContext","referenceRecord","currentIndex","openingBraceIndex","closingBraceIndex","parameterName","refName","evaluateExpression","keyName","callFunction","getReferenceValue","evaluatedArgs","evaluateCondition","fnArgs","toAssign","evaluateConditions","conditions","conditionsReferenceRecord","condition","getEndpointHeaders","headerKey","headerVal","headerValEntry","processedExpr","getEndpointProperty","propertyEntry","getEndpointProperties","propertyKey","propertyVal","getEndpointUrl","endpointUrl","expression","evaluateEndpointRule","endpointRule","endpointRuleOptions","evaluateErrorRule","errorRule","evaluateTreeRule","treeRule","rules","evaluateRules","rule","endpointOrUndefined","resolveEndpoint","ruleSetObject","parameters","paramsWithDefault","paramKey","paramDefaultValue","requiredParams","requiredParam","givenEndpoint","USER_AGENT","X_AMZ_USER_AGENT","UA_ESCAPE_REGEX","escapeUserAgent","prefixSeparatorIndex","uaName","getUserAgentMiddlewareOptions","getUserAgentPlugin","defaultUserAgent","defaultUserAgentProvider","sdkUserAgentValue","normalUAValue","section","NoOpLogger","trace","constructStack","absoluteEntries","relativeEntries","entriesNameSet","Set","cloneTo","toStack","forEach","entry","middleware","expandRelativeMiddlewareList","expandedMiddlewareList","before","after","getMiddlewareList","normalizedAbsoluteEntries","normalizedRelativeEntries","normalizedEntriesNameMap","normalizedEntry","mainChain","stepWeights","priorityWeights","wholeList","expendedMiddlewareList","toOverrideIndex","findIndex","toOverride","use","plugin","remove","toRemove","isRemoved","filterCb","delete","removeByName","removeByReference","removeByTag","identify","mw","initialize","serialize","finalizeRequest","deserialize","high","normal","low","Client","middlewareStack","send","optionsOrCb","callback","resolveMiddleware","expectNumber","parsed","stackTraceWarning","MAX_FLOAT","ceil","expectFloat32","expected","Infinity","expectLong","isInteger","expectInt32","expectSizedInt","expectShort","expectByte","size","castInt","Int32Array","of","Int16Array","Int8Array","expectNonNull","location","expectObject","receivedType","expectString","strictParseDouble","parseNumber","NUMBER_REGEX","strictParseInt32","MONTHS","RFC3339_WITH_OFFSET","parseRfc3339DateTimeWithOffset","_","yearStr","monthStr","dayStr","hours","minutes","seconds","fractionalMilliseconds","offsetStr","year","stripLeadingZeroes","month","parseDateValue","day","buildDate","setTime","parseOffsetToMilliseconds","adjustedMonth","validateDayOfMonth","UTC","parseMilliseconds","DAYS_IN_MONTH","maxDays","isLeapYear","lower","upper","dateVal","strictParseByte","strictParseFloat32","directionStr","direction","idx","ServiceException","$fault","decorateServiceException","exception","additions","Message","withBaseException","ExceptionCtor","parsedBody","errorCode","exceptionCtor","deserializeMetadata","Code","throwDefaultError","requestId","extendedRequestId","cfId","loadConfigsForDefaultMode","connectionTimeout","warningEmitted","emitWarningIfUnsupportedVersion","extendedEncodeURIComponent","getValueFromTextNode","StringWrapper","Class","getPrototypeOf","instance","Function","bind","writable","configurable","arg0","arg1","arg2","mapWithFilter","applyInstruction","source","_instructions","targetKey","nonNullish","valueFn","pass","sourceKey","_value","defaultFilterPassed","customFilterPassed","STSServiceException","ExpiredTokenException","opts","MalformedPolicyDocumentException","PackedPolicyTooLargeException","RegionDisabledException","IDPRejectedClaimException","InvalidIdentityTokenException","IDPCommunicationErrorException","de_AssumeRoleCommandError","parsedOutput","parseErrorBody","loadQueryErrorCode","de_ExpiredTokenExceptionRes","de_MalformedPolicyDocumentExceptionRes","de_PackedPolicyTooLargeExceptionRes","de_RegionDisabledExceptionRes","de_AssumeRoleWithWebIdentityCommandError","de_IDPCommunicationErrorExceptionRes","de_IDPRejectedClaimExceptionRes","de_InvalidIdentityTokenExceptionRes","deserialized","de_ExpiredTokenException","de_IDPCommunicationErrorException","de_IDPRejectedClaimException","de_InvalidIdentityTokenException","de_MalformedPolicyDocumentException","de_PackedPolicyTooLargeException","de_RegionDisabledException","se_AssumeRoleRequest","RoleArn","RoleSessionName","PolicyArns","memberEntries","se_policyDescriptorListType","Policy","DurationSeconds","Tags","se_tagListType","TransitiveTagKeys","se_tagKeyListType","ExternalId","SerialNumber","TokenCode","SourceIdentity","se_AssumeRoleWithWebIdentityRequest","WebIdentityToken","ProviderId","counter","se_PolicyDescriptorType","se_Tag","Key","Value","de_AssumedRoleUser","AssumedRoleId","Arn","de_AssumeRoleResponse","Credentials","de_Credentials","AssumedRoleUser","PackedPolicySize","de_AssumeRoleWithWebIdentityResponse","SubjectFromWebIdentityToken","Provider","Audience","AccessKeyId","SecretAccessKey","SessionToken","Expiration","collectBodyString","streamBody","streamCollector","collectBody","utf8Encoder","buildHttpRpcRequest","resolvedHostname","basePath","SHARED_HEADERS","parseBody","parser","parsedObj","parsedObjToReturn","errorBody","buildFormUrlencodedString","formEntries","AssumeRoleCommand","UseGlobalEndpoint","UseFIPS","Region","UseDualStack","configuration","handlerExecutionContext","handle","Action","Version","se_AssumeRoleCommand","AssumeRoleResult","de_AssumeRoleCommand","AssumeRoleWithWebIdentityCommand","se_AssumeRoleWithWebIdentityCommand","AssumeRoleWithWebIdentityResult","de_AssumeRoleWithWebIdentityCommand","ASSUME_ROLE_DEFAULT_REGION","decorateDefaultRegion","getDefaultRoleAssumer","stsOptions","stsClientCtor","stsClient","closureSourceCreds","sourceCreds","getDefaultRoleAssumerWithWebIdentity","fromEnv","expiry","getHomeDir","HOME","USERPROFILE","HOMEPATH","HOMEDRIVE","homedir","ENV_PROFILE","getProfileName","init","getSSOTokenFilepath","cacheName","createHash","readFile","getSSOTokenFromFile","ssoTokenFilepath","ssoTokenText","getConfigFilepath","getCredentialsFilepath","profileKeyRegex","getProfileData","profileNameBlockList","parseIni","iniData","currentSection","indexOfEqualsSign","filePromisesHash","slurpFile","ignoreCache","swallowError","loadSharedConfigFiles","filepath","configFilepath","parsedFiles","all","configFile","credentialsFile","ssoSessionKeyRegex","getSsoSessionData","loadSsoSessionData","parseKnownFiles","files","merged","mergeConfigFiles","httpRequest","chunks","isImdsCredentials","Token","fromImdsCredentials","creds","providerConfigFromInit","timeout","toRetry","ENV_CMDS_FULL_URI","ENV_CMDS_RELATIVE_URI","ENV_CMDS_AUTH_TOKEN","fromContainerMetadata","getCmdsUri","credsResponse","requestFromEcsImds","Authorization","GREENGRASS_HOSTS","localhost","GREENGRASS_PROTOCOLS","defaultValue","isFunction","staticValue","loadConfig","envVarSelector","configSelector","profileFromCredentials","profileFromConfig","mergedProfile","fromSharedConfigFiles","ENDPOINT_CONFIG_OPTIONS","EndpointMode","ENDPOINT_MODE_CONFIG_OPTIONS","IPv4","getInstanceMetadataEndpoint","getFromEndpointConfig","getFromEndpointModeConfig","endpointMode","IPv6","getExtendedInstanceMetadataCredentials","refreshInterval","newExpiration","originalExpiration","IMDS_PATH","fromInstanceMetadata","pastCredentials","staticStabilityProvider","getInstanceImdsProvider","disableFetchToken","getCredentials","getProfile","getCredentialsFromProfile","getMetadataToken","isAssumeRoleWithSourceProfile","source_profile","credential_source","isAssumeRoleWithProviderProfile","resolveAssumeRoleCredentials","profileName","profiles","visitedProfiles","roleAssumer","sourceCredsProvider","resolveProfileData","credentialSource","sourceProvidersMap","EcsContainer","Ec2InstanceMetadata","Environment","resolveCredentialSource","role_arn","role_session_name","external_id","mfa_serial","mfaCodeProvider","resolveProcessCredentials","credentialProcess","execPromise","promisify","currentTime","getValidatedProcessCredentials","fromProcess","isSsoProfile","sso_start_url","sso_account_id","sso_session","sso_region","sso_role_name","Hash","algorithmIdentifier","reset","toHash","castSourceData","createHmac","toCast","transformedHeaders","headerValues","writeBody","Readable","NodeHttpHandler","_options","resolveDefaultConfig","requestTimeout","httpAgent","httpsAgent","abortSignal","aborted","abortError","isSSL","queryString","iLen","qsEntry","nodeHttpsOptions","httpResponse","timeoutInMs","connecting","timeoutId","clearTimeout","setConnectionTimeout","setSocketTimeout","onabort","abort","keepAliveMsecs","setKeepAlive","setSocketKeepAlive","sessions","poll","offerLast","session","contains","iterator","destroyed","Collector","Writable","bufferedBytes","_write","collector","calculateBodyLength","isBuffer","lstatSync","fd","fstatSync","clientVersion","sections","platform","release","versions","crtAvailable","isCrtAvailable","appIdPromise","resolvedUserAgent","appId","BASE64_REGEX","fromBase64","toBase64","p","q","f","g","h","l","ruleSet","defaultEndpointResolver","AWS_REGION_ENV","AWS_DEFAULT_REGION_ENV","DEFAULTS_MODE_OPTIONS","NODE_DEFAULTS_MODE_CONFIG_OPTIONS","resolveDefaultsModeConfig","defaultsMode","resolveNodeDefaultsModeAuto","toLocaleLowerCase","clientRegion","resolvedRegion","inferredRegion","inferPhysicalRegion","defaultConfigProvider","clientSharedValues","apiVersion","base64Decoder","base64Encoder","disableHostPrefix","utf8Decoder","SSOClient","_config_0","_config_1","_config_2","_config_3","_config_6","SSOServiceException","InvalidRequestException","ResourceNotFoundException","TooManyRequestsException","UnauthorizedException","GetRoleCredentialsRequestFilterSensitiveLog","accessToken","RoleCredentialsFilterSensitiveLog","GetRoleCredentialsResponseFilterSensitiveLog","roleCredentials","de_GetRoleCredentialsCommandError","loadRestJsonErrorCode","de_InvalidRequestExceptionRes","de_ResourceNotFoundExceptionRes","de_TooManyRequestsExceptionRes","de_UnauthorizedExceptionRes","doc","isSerializableHeaderValue","getOwnPropertyNames","sanitizeErrorCode","rawValue","cleanValue","GetRoleCredentialsCommand","resolvedPath","role_name","roleName","account_id","se_GetRoleCredentialsCommand","de_GetRoleCredentialsCommand","REFRESH_MESSAGE","SSOOIDCServiceException","AccessDeniedException","error_description","AuthorizationPendingException","InternalServerException","InvalidClientException","InvalidGrantException","InvalidScopeException","SlowDownException","UnauthorizedClientException","UnsupportedGrantTypeException","de_CreateTokenCommandError","de_AccessDeniedExceptionRes","de_AuthorizationPendingExceptionRes","de_InternalServerExceptionRes","de_InvalidClientExceptionRes","de_InvalidGrantExceptionRes","de_InvalidScopeExceptionRes","de_SlowDownExceptionRes","de_UnauthorizedClientExceptionRes","de_UnsupportedGrantTypeExceptionRes","CreateTokenCommand","clientId","clientSecret","deviceCode","grantType","redirectUri","refreshToken","se_CreateTokenCommand","idToken","tokenType","de_CreateTokenCommand","SSOOIDCClient","ssoOidcClientsHash","getNewSsoOidcToken","ssoToken","ssoRegion","ssoOidcClient","getSsoOidcClient","validateTokenExpiry","validateTokenKey","forRefresh","lastRefreshAttemptTime","fromSso","ssoSessionName","ssoSession","ssoSessionRequiredKey","expiresAt","existingToken","newSsoOidcToken","newTokenExpiration","tokenFilepath","tokenString","writeSSOTokenToFile","SHOULD_FAIL_CREDENTIAL_CHAIN","resolveSSOCredentials","ssoStartUrl","ssoAccountId","ssoRoleName","ssoClient","refreshMessage","_token","sso","ssoResp","validateSsoProfile","fromSSO","conflictMsg","isStaticCredsProfile","aws_access_key_id","aws_secret_access_key","aws_session_token","resolveStaticCredentials","fromTokenFile","resolveTokenFile","webIdentityTokenFile","roleArn","roleSessionName","webIdentityToken","providerId","policyArns","policy","durationSeconds","roleAssumerWithWebIdentity","fromWebToken","readFileSync","web_identity_token_file","isWebIdentityProfile","resolveWebIdentityCredentials","credential_process","isProcessProfile","resolveSsoCredentials","defaultProvider","fromIni","remoteProvider","F","G","H","I","J","u","w","y","z","A","B","C","D","E","STSClient","useGlobalEndpoint","_config_7","resolveStsAuthConfig","getCustomizableStsClientCtor","baseCtor","customizations","customization","stsPlugins","SSMClient","_config_4","SSMServiceException","InvalidFilterOption","InvalidKeyId","ParameterFilterSensitiveLog","GetParametersByPathResultFilterSensitiveLog","Parameters","InternalServerError","InvalidResourceId","InvalidResourceType","InvalidNextToken","InvalidFilterKey","InvalidFilterValue","de_GetParametersByPathCommandError","de_InternalServerErrorRes","de_InvalidFilterKeyRes","de_InvalidFilterOptionRes","de_InvalidFilterValueRes","de_InvalidKeyIdRes","de_InvalidNextTokenRes","de_ListTagsForResourceCommandError","de_InvalidResourceIdRes","de_InvalidResourceTypeRes","de_GetParametersByPathResult","NextToken","de_ParameterList","de_Parameter","ARN","DataType","LastModifiedDate","valueAsDouble","round","Name","Selector","SourceResult","Type","retVal","sharedHeaders","operation","GetParametersByPathCommand","se_GetParametersByPathCommand","de_GetParametersByPathCommand","makePagedClientRequest","client","ListTagsForResourceCommand","se_ListTagsForResourceCommand","de_ListTagsForResourceCommand","tagReducer","previousValue","currentValue","RETRY_CONFIG","decrypt","page","additionalArguments","startingToken","hasNext","pageSize","prevToken","stopOnSameToken","paginateGetParametersByPath","Path","WithDecryption","ResourceType","ResourceId","TagList","PARAM_TYPES","BUILD_PARAM_TYPES","RUNTIME_PARAM_TYPES","environmentNickname","environment","projectName","core","PROJECT_NAME","ENVIRONMENT","types","selectedSecrets","secrets","run"],"sourceRoot":""}